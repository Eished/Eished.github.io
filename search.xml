<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>querySelector 与 getElementById 性能比较</title>
      <link href="/2021/07/13/queryselector-yu-getelementbyid-xing-neng-bi-jiao/"/>
      <url>/2021/07/13/queryselector-yu-getelementbyid-xing-neng-bi-jiao/</url>
      
        <content type="html"><![CDATA[<h2 id="1-querySelector-与-getElementById"><a href="#1-querySelector-与-getElementById" class="headerlink" title="1. querySelector 与 getElementById"></a>1. querySelector 与 getElementById</h2><p>首先我们来比较 <code>querySelector</code> 与 <code>getElementById</code> 的差别，创建测试文件如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'querySelector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'querySelector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'getElementById'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'getElementById'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>测试结果：</strong>IE11、Edge、Chrome</p><p><img src="/images/%E5%9B%BE%E7%89%87_39.png" alt="图片_39"></p><h2 id="2-querySelectorAll-与-getElementByClassName"><a href="#2-querySelectorAll-与-getElementByClassName" class="headerlink" title="2. querySelectorAll 与 getElementByClassName"></a>2. querySelectorAll 与 getElementByClassName</h2><p>我们再创建一个测试文件来比较 <code>querySelectorAll</code> 与 <code>getElementByClassName</code>，如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'querySelectorAll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'querySelectorAll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'getElementsByClassName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'getElementsByClassName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>测试结果：</strong>IE11、Edge、Chrome</p><p><img src="/images/%E5%9B%BE%E7%89%87_40.png" alt="图片_40"></p><h2 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h2><p>IE 差距大。</p><p>Chrome 对 <code>querySelector</code> 和 <code>querySelectorAll</code> 进行了优化，与传统方式差距很小。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Web </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tampermonkey 中使用 JavaScript 打包下载图片</title>
      <link href="/2021/07/08/shi-yong-javascript-da-bao-xia-zai-tu-pian/"/>
      <url>/2021/07/08/shi-yong-javascript-da-bao-xia-zai-tu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="Tampermonkey-例子："><a href="#Tampermonkey-例子：" class="headerlink" title="Tampermonkey 例子："></a>Tampermonkey 例子：</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入插件：另存和压缩打包</span><span class="token comment" spellcheck="true">// @require      https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js</span><span class="token comment" spellcheck="true">// @require      https://cdn.jsdelivr.net/npm/jszip@3.6.0/dist/jszip.min.js</span><span class="token comment" spellcheck="true">// 批量下载 顺序下载 传入（图片链接数组，对应的带后缀的图片标题数组，文件夹名）</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">batchDownload</span><span class="token punctuation">(</span>imgsUrl<span class="token punctuation">,</span> imgsTitles<span class="token punctuation">,</span> folderName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> imgsUrl<span class="token punctuation">;</span>      <span class="token keyword">const</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSZip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 压缩包</span>      <span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 异步需把 for 改为 forEach</span>        <span class="token keyword">const</span> item <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">"blob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 下载文件, 并存成ArrayBuffer对象</span>          <span class="token keyword">const</span> file_name <span class="token operator">=</span> imgsTitles<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取文件名</span>          <span class="token comment" spellcheck="true">// （文件名，二进制流，多文件）</span>          zip<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">{</span>            binary<span class="token punctuation">:</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 逐个添加文件</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`第</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">张，文件名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，大小：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">parseInt</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Kb，下载完成！等待压缩...`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 处理错误 reject；不处理会打断 Promise.all</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 返回 promise 结果数组，处理结果中的错误</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> err<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> i <span class="token operator">+</span> <span class="token string">"文件缺失！"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        zip<span class="token punctuation">.</span><span class="token function">generateAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">"blob"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>content <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 生成二进制流</span>          <span class="token function">saveAs</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>folderName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">P]`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 利用 file-saver 保存文件</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// GM_xmlhttpRequest GET异步通用模块</span>    <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"document"</span><span class="token punctuation">,</span> usermethod <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">GM_xmlhttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          method<span class="token punctuation">:</span> usermethod<span class="token punctuation">,</span>          url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>          responseType<span class="token punctuation">:</span> type<span class="token punctuation">,</span>          onload<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          onerror<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"网络错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><a href="https://github.com/Eished/jkforum_helper" target="_blank" rel="noopener">项目完整代码</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> Tampermonkey </tag>
            
            <tag> Promise </tag>
            
            <tag> GM_xmlhttpRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo prism 代码高亮问题</title>
      <link href="/2021/07/02/hexo-prism-dai-ma-gao-liang-wen-ti/"/>
      <url>/2021/07/02/hexo-prism-dai-ma-gao-liang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-prism-代码高亮问题"><a href="#hexo-prism-代码高亮问题" class="headerlink" title="hexo prism 代码高亮问题"></a>hexo prism 代码高亮问题</h1><p><code>hexo-prism-plugin</code> 代码标注只支持小写英文，不支持符号、大写。</p><p>prism 支持的语言： <a href="https://prismjs.com/#languages-list" target="_blank" rel="noopener">https://prismjs.com/#languages-list</a></p><ul><li>小写</li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>大写</li></ul><pre class=" language-CPP"><code class="language-CPP">#include <iostream>int main(){    return 0;}</code></pre><ul><li>大写+符号</li></ul><pre class=" language-C++"><code class="language-C++">#include <iostream>int main(){    return 0;}</code></pre><ul><li>小写+符号</li></ul><pre class=" language-c++"><code class="language-c++">#include <iostream>int main(){    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> prism </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 实现学生信息管理系统</title>
      <link href="/2021/07/02/c-shi-xian-xue-sheng-xin-xi-guan-li-xi-tong/"/>
      <url>/2021/07/02/c-shi-xian-xue-sheng-xin-xi-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="cpp-实现学生信息管理系统"><a href="#cpp-实现学生信息管理系统" class="headerlink" title="cpp 实现学生信息管理系统"></a>cpp 实现学生信息管理系统</h1><blockquote><p><a href="https://github.com/Eished/C-cpp/blob/master/C%2B%2B%E5%AE%9E%E7%8E%B0%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.md" target="_blank" rel="noopener">此笔记线更新地址</a></p><p><a href="https://github.com/Eished/C-cpp" target="_blank" rel="noopener">cpp 笔记和代码库</a></p></blockquote><h2 id="考试题目："><a href="#考试题目：" class="headerlink" title="考试题目："></a>考试题目：</h2><h3 id="A：学生信息存储（40分）"><a href="#A：学生信息存储（40分）" class="headerlink" title="A：学生信息存储（40分）"></a>A：学生信息存储（40分）</h3><ol><li><p><strong>业务描述：</strong></p><ul><li><p>某学校的学生信息包括：学号、姓名、性别、学院。</p></li><li><p>其中学号是整数；性别用单个大写字母表示，F 表示女性，M 表示男性；姓名是字符串类型。</p></li><li><p>学生学号固定长度6位，前两位表示学院，例如计算机学院编码 11，则首两位编码是 11；</p><p>中间两位表示入学年份，例如学生是 2019 年入学，则中间编码为 19：最后两位是自动按序编号，例如学生是 2019 年入学计算机学院的第56号学生，则学号为 111956。</p></li><li><p>假设学校有三个学院：</p><ul><li>计算机学院编码 11， </li><li>管理学院编码 22，</li><li>土木学院编码 33。</li></ul></li></ul></li><li><p><strong>程序开发要求：</strong></p><ol><li>要求使用 cpp 语言与面对对象设计思想实现开发。</li><li>定义一个学生类，包含上述学生信息。</li><li>在学生类中，定义输出函数 <code>Print</code> ，输出一个学生对象的信息。</li><li>定义学号生成函数 <code>GenID</code>，根据学生所属的学院、入学年份、学院顺序号，生成学生的学号。</li><li>学生类中，可以根据需要增加成员函数，但不能增加数据成员。</li><li>在主函数中，创建三个对象数组，对应三个学院，分别存储三个学院的学生对象。</li></ol></li><li><p><strong>输入：</strong></p><ol><li>第一行输入t，表示有t个学生。</li><li>接着输入t行，每行输入一个学生信息共五个参数，包括姓名、性别、学院、入学年份和学院顺序号，数据之间用空格隔开。其中学院用缩写表示，CS 表示计算机学院，MA 表示管理学院，BU 表示土木学院。</li><li>每输入一个学生信息，就调用函数 <code>GenID</code> 生成学生学号，并创建一个新的学生对象。然后根据学院缩写，把新学生插入到对应对象数组的末尾。</li><li>数据输入的具体格式参考输入样例。</li></ol></li></ol><h3 id="B：学生信息操作（50分）"><a href="#B：学生信息操作（50分）" class="headerlink" title="B：学生信息操作（50分）"></a>B：学生信息操作（50分）</h3><ol><li><p><strong>业务描述：</strong></p><ul><li>在前一题的基础上：加入增加、删除、查询的信息操作</li><li>某学核的学生信息包括：学号、姓名、性别、学院。其中学号是整数；性别用单个大写字母表示，F 示女性，M 示男性；姓名是字符串类型。假设学校有三个学院：计算机字院编码11，管理学院编码 22，土木学院编码 33。</li><li>编写一个程序完成学生信息的插入、存储、输出、增加、删除、查询等功能</li></ul></li><li><p><strong>程序开发要求：</strong></p><ol><li>要求使用cpp语言与面向对象设计思想实现开发。</li><li>定义一个学生类，不仅包含上述学生信息，还要增加静态数据成员 <code>total</code>，表示学生总数。要求静态数据成员必须是private。</li><li>在学生中定义输出函数 <code>Print</code>，输出一个学生对象的信息。</li><li>学生类中可以根据需要增加成员函数，但不能增加据成员</li></ol></li><li><p><strong>在主函数中，完成以下要求：</strong></p><ol><li><p>创建三个对象数组，对应三个学院，分别存储三个学院的学生对象</p></li><li><p>定义插入函数 <code>Ins</code>，先创建一个新学生对象，根据学院缩写把新学生插入到对应数组的指定位置；插入前，指定位置上的原学生对象以及后面的学生对象都要往后移动一位。</p><p>提示：无需考虑插入位置非法的问题；题目的插入数组位置从 1 开始计算；每增加一个新学生，学生总数加 1。</p></li><li><p>定义删除函数 <code>Del</code>，根据提供的学号先找到学生对象，删除对应数组的对应学生对象；刪除后，刪除位置后面的学生对象都要往前移动一位。</p><p>提示：每删除一个学生，学生总数减1。</p></li><li><p>定义查询函数 <code>Query</code>，根据提供的学号，查询学生是否存在，并调用输出的数 <code>Print</code> 信息作输出。</p></li><li><p>学生总数的所有操作都必须使用学生类的静态数据 <code>total</code> 来进行，不能在类外使用其他函数或变量进行统计。</p></li></ol></li></ol><h3 id="C：学生学号排序（10分）"><a href="#C：学生学号排序（10分）" class="headerlink" title="C：学生学号排序（10分）"></a>C：学生学号排序（10分）</h3><ol><li><strong>业务描述：</strong><ul><li>现在需要对学号进行排序。设有一个数组存储了所有学院所有学生的对象，采用简单选择排序法，实现所有学生对象学号从小到大排序。</li><li>简单选择排序算法说明<ul><li>假设 <code>n</code> 为待排序记录数，每一趟（例如第 <code>i</code> 趟，<code>i=1,2,...,n-1</code>）有 <code>n-i+1</code> 个待排序记录，</li><li>在第 <code>i</code> 趟中，通过 <code>n-i</code> 次比较，选出关键字最小的记录，与第 <code>i</code> 个记录交换。</li></ul></li></ul></li><li><strong>程序开发要求：</strong><ol><li>必须使用简单选择排序实现学生排序。</li><li>不允许使用第三方对象或函数实现排序，学生必须写出完整的排序算法。</li><li>无需考虑学号相同的情况。</li></ol></li></ol><h2 id="功能实现："><a href="#功能实现：" class="headerlink" title="功能实现："></a>功能实现：</h2><h3 id="A：输入文字模板"><a href="#A：输入文字模板" class="headerlink" title="A：输入文字模板"></a>A：输入文字模板</h3><p>张三 M CS 2019 11</p><p>杨六 M CS 2018 11</p><p>胡七 M CS 2017 11</p><p>李四 M MA 2020 22</p><p>王五 F BU 2019 33</p><h3 id="B：功能设计"><a href="#B：功能设计" class="headerlink" title="B：功能设计"></a>B：功能设计</h3><pre class=" language-cpp"><code class="language-cpp">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1:输入学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2:打印学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3:插入学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4:查找学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5:修改学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"6:删除学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"7:读取学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"8:保存学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"9:按学号从小到大排序\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0:退出\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入对应的序号："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></code></pre><h3 id="C：实现代码"><a href="#C：实现代码" class="headerlink" title="C：实现代码"></a>C：实现代码</h3><h4 id="普通数组版："><a href="#普通数组版：" class="headerlink" title="普通数组版："></a>普通数组版：</h4><ul><li>要求静态数据成员必须是private。</li><li>不能在类外使用其他函数或变量进行统计。</li><li>不能增加数据成员。</li></ul><h5 id="Student-h"><a href="#Student-h" class="headerlink" title="Student.h"></a>Student.h</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> total<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> studNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> sex <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> colNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> sex<span class="token punctuation">,</span> <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> colNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">GenID</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="Student-cpp"><a href="#Student-cpp" class="headerlink" title="Student.cpp"></a>Student.cpp</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Student.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> Student<span class="token operator">::</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Student<span class="token operator">::</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> sex<span class="token punctuation">,</span> <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">strcpy_s</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy_s</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>college<span class="token punctuation">,</span> college<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>colNum <span class="token operator">=</span> colNum<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>total<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Student<span class="token operator">::</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    studNum <span class="token operator">=</span> colNum <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">+</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Student<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"学号："</span> <span class="token operator">&lt;&lt;</span> studNum <span class="token operator">&lt;&lt;</span> <span class="token string">"  姓名："</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"  性别："</span> <span class="token operator">&lt;&lt;</span> sex <span class="token operator">&lt;&lt;</span> <span class="token string">"  学院："</span> <span class="token operator">&lt;&lt;</span> college <span class="token operator">&lt;&lt;</span> <span class="token string">"  入学年份："</span> <span class="token operator">&lt;&lt;</span> year <span class="token operator">&lt;&lt;</span> <span class="token string">"  学院顺序号："</span> <span class="token operator">&lt;&lt;</span> colNum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Student<span class="token operator">::</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Student<span class="token operator">::</span><span class="token function">setTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span> total<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>total <span class="token operator">=</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="StudIMS-cpp"><a href="#StudIMS-cpp" class="headerlink" title="StudIMS.cpp"></a>StudIMS.cpp</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Student.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">define</span> M 30</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1:输入学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2:打印学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3:插入学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4:查找学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5:统计学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"6:删除学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"7:读取学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"8:保存学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"9:按学号从小到大排序\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0:退出\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入对应的序号："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student CSarr<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 学生数组</span>    Student MAarr<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>    Student BUarr<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> CScount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 学号顺序号：只增不减</span>    <span class="token keyword">int</span> MAcount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> BUcount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> CSi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 学生数组下标位置</span>    <span class="token keyword">int</span> MAi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> BUi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cho<span class="token punctuation">;</span>        cin <span class="token operator">>></span> cho<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cho<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 输入学生信息</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入录入人数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cin <span class="token operator">>></span> t<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入：名字 性别 学院字母 入学年份 学院代码"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> sex<span class="token punctuation">;</span>                <span class="token keyword">int</span> year<span class="token punctuation">;</span>                <span class="token keyword">int</span> colNum<span class="token punctuation">;</span>                cin <span class="token operator">>></span> name <span class="token operator">>></span> sex <span class="token operator">>></span> college <span class="token operator">>></span> year <span class="token operator">>></span> colNum<span class="token punctuation">;</span>                Student <span class="token function">stud</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> college<span class="token punctuation">,</span> year<span class="token punctuation">,</span> colNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    stud<span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token operator">++</span>CScount<span class="token punctuation">)</span><span class="token punctuation">;</span>                    CSarr<span class="token punctuation">[</span>CSi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stud<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    stud<span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token operator">++</span>MAcount<span class="token punctuation">)</span><span class="token punctuation">;</span>                    MAarr<span class="token punctuation">[</span>MAi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stud<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    stud<span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token operator">++</span>BUcount<span class="token punctuation">)</span><span class="token punctuation">;</span>                    BUarr<span class="token punctuation">[</span>BUi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stud<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 打印学生信息</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//break; // 打印插入位置非法的学生</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//break;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//break;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 插入学生信息</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入插入位置："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">int</span> num<span class="token punctuation">;</span>            cin <span class="token operator">>></span> num<span class="token punctuation">;</span>            num <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入：名字 性别 学院字母 入学年份 学院代码"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> sex<span class="token punctuation">;</span>            <span class="token keyword">int</span> year<span class="token punctuation">;</span>            <span class="token keyword">int</span> colNum<span class="token punctuation">;</span>            cin <span class="token operator">>></span> name <span class="token operator">>></span> sex <span class="token operator">>></span> college <span class="token operator">>></span> year <span class="token operator">>></span> colNum<span class="token punctuation">;</span>            Student <span class="token function">stud</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> college<span class="token punctuation">,</span> year<span class="token punctuation">,</span> colNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            Student studTmp<span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>                stud<span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token operator">++</span>CScount<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 插入位置超过当前输入队列长度，再次输入时会被覆盖；M改成CSi可解决</span>                    studTmp <span class="token operator">=</span> CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stud<span class="token punctuation">;</span>                    stud <span class="token operator">=</span> studTmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                CSi<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组下标增加</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>                stud<span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token operator">++</span>MAcount<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    studTmp <span class="token operator">=</span> MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stud<span class="token punctuation">;</span>                    stud <span class="token operator">=</span> studTmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                MAi<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>                stud<span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token operator">++</span>BUcount<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    studTmp <span class="token operator">=</span> BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stud<span class="token punctuation">;</span>                    stud <span class="token operator">=</span> studTmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                BUi<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 查找学生信息</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入查询学号："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">int</span> num<span class="token punctuation">;</span>            cin <span class="token operator">>></span> num<span class="token punctuation">;</span>            <span class="token keyword">int</span> colNum <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 统计学生信息</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student stud<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"总人数："</span> <span class="token operator">&lt;&lt;</span> stud<span class="token punctuation">.</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"计算机学院人数："</span> <span class="token operator">&lt;&lt;</span> CSi <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"管理学院人数："</span> <span class="token operator">&lt;&lt;</span> MAi <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"土木学院人数："</span> <span class="token operator">&lt;&lt;</span> BUi <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 删除学生信息</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student stud<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入删除的学号："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">int</span> num<span class="token punctuation">;</span>            cin <span class="token operator">>></span> num<span class="token punctuation">;</span>            <span class="token keyword">int</span> colNum <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            CSarr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> CSarr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        CSi<span class="token operator">--</span><span class="token punctuation">;</span>                        stud<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>stud<span class="token punctuation">.</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除成功"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            MAarr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> MAarr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        MAi<span class="token operator">--</span><span class="token punctuation">;</span>                        stud<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>stud<span class="token punctuation">.</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除成功"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            BUarr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> BUarr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        BUi<span class="token operator">--</span><span class="token punctuation">;</span>                        stud<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>stud<span class="token punctuation">.</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除成功"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 读取学生信息</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student stud<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// CS</span>            ifstream <span class="token function">fileCS</span><span class="token punctuation">(</span><span class="token string">"CS.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>fileCS<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>stud<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stud<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stud<span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            CScount <span class="token operator">=</span> stud<span class="token punctuation">.</span>studNum <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读最后一个对象的学号，作为起始值；乱序插入后有bug</span>            CSi <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化数组下标</span>            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            fileCS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// MA</span>            ifstream <span class="token function">fileMA</span><span class="token punctuation">(</span><span class="token string">"MA.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>fileMA<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>stud<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stud<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stud<span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            MAcount <span class="token operator">=</span> stud<span class="token punctuation">.</span>studNum <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>            MAi <span class="token operator">=</span> i<span class="token punctuation">;</span>            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            fileMA<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// BU</span>            ifstream <span class="token function">fileBU</span><span class="token punctuation">(</span><span class="token string">"BU.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>fileBU<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>stud<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stud<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stud<span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            BUcount <span class="token operator">=</span> stud<span class="token punctuation">.</span>studNum <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>            BUi <span class="token operator">=</span> i<span class="token punctuation">;</span>            stud<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>CScount <span class="token operator">+</span> MAcount <span class="token operator">+</span> BUcount<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileBU<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"读取成功！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 保存</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ofstream <span class="token function">fileCS</span><span class="token punctuation">(</span><span class="token string">"CS.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fileCS<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            fileCS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ofstream <span class="token function">fileMA</span><span class="token punctuation">(</span><span class="token string">"MA.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fileMA<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            fileMA<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ofstream <span class="token function">fileBU</span><span class="token punctuation">(</span><span class="token string">"BU.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fileBU<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            fileBU<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"保存成功！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 按学号从小到大排序</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student studs<span class="token punctuation">[</span>M <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    studs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    studs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    studs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> less <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            Student studTmp<span class="token punctuation">;</span>            Student studTmpSec<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>studs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">-</span> studs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> less<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            less <span class="token operator">=</span> studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">-</span> studs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum<span class="token punctuation">;</span>                            index <span class="token operator">=</span> j<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>less<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 插入到i位置 然后后移</span>                        studTmp <span class="token operator">=</span> studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> studs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            studTmpSec <span class="token operator">=</span> studs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                            studs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> studTmp<span class="token punctuation">;</span>                            studTmp <span class="token operator">=</span> studTmpSec<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 删除 然后前移</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            studs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> studs<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// studs[index].print();</span>                        less <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 退出</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"已退出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入不正确!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="STL-vector-动态数组版："><a href="#STL-vector-动态数组版：" class="headerlink" title="STL vector 动态数组版："></a>STL vector 动态数组版：</h4><ul><li>静态数据成员公有。<ul><li>total 私有</li></ul></li><li>增加数据成员学号。<ul><li>未改进：静态数据不会存入对象二进制文件中，写入文件存储更方便复原。</li></ul></li><li>修改学生信息功能。</li></ul><h5 id="Student-h-1"><a href="#Student-h-1" class="headerlink" title="Student.h"></a>Student.h</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> total<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> csCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 学号，只增不减</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> maCount<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> buCount<span class="token punctuation">;</span>    <span class="token keyword">int</span> studNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> sex <span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> colNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> sex<span class="token punctuation">,</span> <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> colNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">GenID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h5 id="Student-cpp-1"><a href="#Student-cpp-1" class="headerlink" title="Student.cpp"></a>Student.cpp</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Student.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> Student<span class="token operator">::</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> Student<span class="token operator">::</span>csCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> Student<span class="token operator">::</span>maCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> Student<span class="token operator">::</span>buCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Student<span class="token operator">::</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> sex<span class="token punctuation">,</span> <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">strcpy_s</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy_s</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>college<span class="token punctuation">,</span> college<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>colNum <span class="token operator">=</span> colNum<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>total<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>        csCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>        maCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>        buCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> Student<span class="token operator">::</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>        count <span class="token operator">=</span> csCount<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>        count <span class="token operator">=</span> maCount<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>        count <span class="token operator">=</span> buCount<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    studNum <span class="token operator">=</span> colNum <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">+</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Student<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"学号："</span> <span class="token operator">&lt;&lt;</span> studNum <span class="token operator">&lt;&lt;</span> <span class="token string">"  姓名："</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"  性别："</span> <span class="token operator">&lt;&lt;</span> sex <span class="token operator">&lt;&lt;</span> <span class="token string">"  学院："</span> <span class="token operator">&lt;&lt;</span> college <span class="token operator">&lt;&lt;</span> <span class="token string">"  入学年份："</span> <span class="token operator">&lt;&lt;</span> year <span class="token operator">&lt;&lt;</span> <span class="token string">"  学院顺序号："</span> <span class="token operator">&lt;&lt;</span> colNum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Student<span class="token operator">::</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Student<span class="token operator">::</span><span class="token function">setTotal</span><span class="token punctuation">(</span><span class="token keyword">int</span> total<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>total <span class="token operator">=</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="myfunc-h"><a href="#myfunc-h" class="headerlink" title="myfunc.h"></a>myfunc.h</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Ins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="stuInfoMS-cpp"><a href="#stuInfoMS-cpp" class="headerlink" title="stuInfoMS.cpp"></a>stuInfoMS.cpp</h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Student.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myfunc.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Student<span class="token operator">></span> CSarr<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Student<span class="token operator">></span> MAarr<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Student<span class="token operator">></span> BUarr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cho<span class="token punctuation">;</span>        cin <span class="token operator">>></span> cho<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cho<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 输入学生信息</span>            <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 打印学生信息</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 插入学生信息</span>            <span class="token function">Ins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 查找学生信息</span>            <span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 修改学生信息</span>            <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 删除学生信息</span>            <span class="token function">Del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 读取学生信息</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"读取成功！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 保存</span>            <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"保存成功！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 按学号从小到大排序</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 退出</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"已退出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入不正确!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1:输入学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2:打印学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3:插入学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4:查找学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5:修改学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"6:删除学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"7:读取学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"8:保存学生信息\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"9:按学号从小到大排序\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0:退出\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入对应的序号："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入学生人数："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入：名字 性别 学院字母 入学年份 学院代码"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> sex<span class="token punctuation">;</span>        <span class="token keyword">int</span> year<span class="token punctuation">;</span>        <span class="token keyword">int</span> colNum<span class="token punctuation">;</span>        cin <span class="token operator">>></span> name <span class="token operator">>></span> sex <span class="token operator">>></span> college <span class="token operator">>></span> year <span class="token operator">>></span> colNum<span class="token punctuation">;</span>        Student <span class="token function">stud</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> college<span class="token punctuation">,</span> year<span class="token punctuation">,</span> colNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        stud<span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>            CSarr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>stud<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>            MAarr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>stud<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>            BUarr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>stud<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student stud<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"总人数："</span> <span class="token operator">&lt;&lt;</span> stud<span class="token punctuation">.</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"计算机学院人数："</span> <span class="token operator">&lt;&lt;</span> CSarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"管理学院人数："</span> <span class="token operator">&lt;&lt;</span> MAarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"土木学院人数："</span> <span class="token operator">&lt;&lt;</span> BUarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输入学院 或 打印全部</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"计算机学院:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CSarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n管理学院:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n土木学院:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Ins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入插入位置："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> x<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入学生人数："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入：名字 性别 学院字母 入学年份 学院代码"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> sex<span class="token punctuation">;</span>        <span class="token keyword">int</span> year<span class="token punctuation">;</span>        <span class="token keyword">int</span> colNum<span class="token punctuation">;</span>        cin <span class="token operator">>></span> name <span class="token operator">>></span> sex <span class="token operator">>></span> college <span class="token operator">>></span> year <span class="token operator">>></span> colNum<span class="token punctuation">;</span>        Student <span class="token function">stud</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> college<span class="token punctuation">,</span> year<span class="token punctuation">,</span> colNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        stud<span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>CSarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                CSarr<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>CSarr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> stud<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"插入位置大于数组长度"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>MAarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                MAarr<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>MAarr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> stud<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"插入位置大于数组长度"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BUarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                BUarr<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>BUarr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> stud<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"插入位置大于数组长度"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入查询的学号:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span>    colNum <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CSarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入删除的学号:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span>    colNum <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CSarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                CSarr<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>CSarr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MAarr<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>MAarr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Total</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                BUarr<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>BUarr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入修改的学号:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span>    colNum <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CSarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> sex<span class="token punctuation">;</span>                <span class="token keyword">int</span> year<span class="token punctuation">;</span>                <span class="token keyword">int</span> colNum<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入：名字 性别 学院字母 入学年份 学院代码"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cin <span class="token operator">>></span> name <span class="token operator">>></span> sex <span class="token operator">>></span> college <span class="token operator">>></span> year <span class="token operator">>></span> colNum<span class="token punctuation">;</span>                <span class="token function">strcpy_s</span><span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcpy_s</span><span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>college<span class="token punctuation">,</span> college<span class="token punctuation">)</span><span class="token punctuation">;</span>                CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>                CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>                CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>colNum <span class="token operator">=</span> colNum<span class="token punctuation">;</span>                CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">22</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> sex<span class="token punctuation">;</span>                <span class="token keyword">int</span> year<span class="token punctuation">;</span>                <span class="token keyword">int</span> colNum<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入：名字 性别 学院字母 入学年份 学院代码"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cin <span class="token operator">>></span> name <span class="token operator">>></span> sex <span class="token operator">>></span> college <span class="token operator">>></span> year <span class="token operator">>></span> colNum<span class="token punctuation">;</span>                <span class="token function">strcpy_s</span><span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcpy_s</span><span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>college<span class="token punctuation">,</span> college<span class="token punctuation">)</span><span class="token punctuation">;</span>                MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>                MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>                MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>colNum <span class="token operator">=</span> colNum<span class="token punctuation">;</span>                MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">33</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> college<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> sex<span class="token punctuation">;</span>                <span class="token keyword">int</span> year<span class="token punctuation">;</span>                <span class="token keyword">int</span> colNum<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入：名字 性别 学院字母 入学年份 学院代码"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cin <span class="token operator">>></span> name <span class="token operator">>></span> sex <span class="token operator">>></span> college <span class="token operator">>></span> year <span class="token operator">>></span> colNum<span class="token punctuation">;</span>                <span class="token function">strcpy_s</span><span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcpy_s</span><span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>college<span class="token punctuation">,</span> college<span class="token punctuation">)</span><span class="token punctuation">;</span>                BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>                BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>                BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>colNum <span class="token operator">=</span> colNum<span class="token punctuation">;</span>                BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GenID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"未找到"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"简单选择排序算法，从小到大排序:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Student<span class="token operator">></span> studs<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> less <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CSarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        studs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        studs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        studs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>studs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> studs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> studs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">-</span> studs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">></span> less<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    less <span class="token operator">=</span> studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum <span class="token operator">-</span> studs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>studNum<span class="token punctuation">;</span>                    temp <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>less<span class="token punctuation">)</span> <span class="token punctuation">{</span>                studs<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>studs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> studs<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                studs<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>studs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                less <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没有数据"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> studs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        studs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ofstream <span class="token function">fileCS</span><span class="token punctuation">(</span><span class="token string">"CS.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CSarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fileCS<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>CSarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ofstream <span class="token function">fileMA</span><span class="token punctuation">(</span><span class="token string">"MA.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fileMA<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>MAarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ofstream <span class="token function">fileBU</span><span class="token punctuation">(</span><span class="token string">"BU.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fileBU<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>BUarr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fileCS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileMA<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileBU<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Student stud<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// CS</span>    ifstream <span class="token function">fileCS</span><span class="token punctuation">(</span><span class="token string">"CS.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fileCS<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>stud<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stud<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CSarr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>stud<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Student<span class="token operator">::</span>csCount <span class="token operator">=</span> stud<span class="token punctuation">.</span>studNum <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化学号起始位置；最后一个对象的学号，乱序插入后有bug</span>    <span class="token comment" spellcheck="true">// MA</span>    ifstream <span class="token function">fileMA</span><span class="token punctuation">(</span><span class="token string">"MA.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fileMA<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>stud<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stud<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MAarr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>stud<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Student<span class="token operator">::</span>maCount <span class="token operator">=</span> stud<span class="token punctuation">.</span>studNum <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// BU</span>    ifstream <span class="token function">fileBU</span><span class="token punctuation">(</span><span class="token string">"BU.dat"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fileBU<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>stud<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stud<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BUarr<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>stud<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Student<span class="token operator">::</span>buCount <span class="token operator">=</span> stud<span class="token punctuation">.</span>studNum <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    stud<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>CSarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> MAarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> BUarr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileCS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileMA<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileBU<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息管理系统 </tag>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> 实践 </tag>
            
            <tag> 考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用FTP软件和USB线进行文件传输</title>
      <link href="/2021/06/24/shi-yong-ftp-ruan-jian-he-usb-xian-jin-xing-wen-jian-chuan-shu/"/>
      <url>/2021/06/24/shi-yong-ftp-ruan-jian-he-usb-xian-jin-xing-wen-jian-chuan-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="准备的软件"><a href="#准备的软件" class="headerlink" title="准备的软件"></a>准备的软件</h2><ol><li>手机端：实简FTP（Android）</li><li>电脑端：FlashFxp（Windows）</li></ol><h2 id="逐字稿"><a href="#逐字稿" class="headerlink" title="逐字稿:"></a>逐字稿:</h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>大家好！这里是：We Know。</p><p>今天来给大家介绍一种，电脑和手机之间快速传输文件的方法。</p><p>传输速度平均40MB/S，是我目前发现的最快的方法。</p><p>首先要准备这两个软件和USB线。</p><p>这两个软件，软件市场有下载，</p><p>其它同类软件也可以，只要支持FTP即可。</p><h2 id="手机端操作："><a href="#手机端操作：" class="headerlink" title="手机端操作："></a>手机端操作：</h2><p>首先来看手机端操作：</p><p>打开 实简FTP，</p><p>设置 用户名和密码。</p><p>启动服务，后台运行。</p><p>然后进入手机设置，打开个人热点，</p><p>把手机用USB线连上电脑。</p><p>仅充电，选择USB共享网络就可以了。</p><h2 id="电脑端操作"><a href="#电脑端操作" class="headerlink" title="电脑端操作"></a>电脑端操作</h2><p>接下来是电脑端操作：</p><p>电脑提示连上网络，右键网络图标，打开网络设置，选择更改适配器选项，</p><p>禁用有线网卡或无线网卡，不禁用的话也可以用，但会经过路由器，</p><p>速度取决于路由器速度，通常只有10MB/S左右。</p><p>然后打开FlashFXP，左边是本地，打开收藏夹：选择素材文件夹</p><p>菜单栏选择站点，站点管理，新建站点</p><p>输入站点名，连接类型，地址，用户名，密码</p><p>然后就可以连接了</p><p>连上后显示在右边，选择自己要传的文件，拖过去就开始传输了，</p><p>右下角又显示需要的时间，传输速度之类的。</p><p>快进到99%，已经传输完了，可以看到平均速度。</p><h3 id="准备的软件-1"><a href="#准备的软件-1" class="headerlink" title="准备的软件"></a>准备的软件</h3><ol><li>手机端：实简FTP（Android）</li><li>电脑端：FlashFxp（Windows）</li></ol><h3 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h3><ol><li>USB连接电脑</li><li>个人热点，USB共享网络</li><li>设置开启FTP服务端软件</li></ol><h3 id="电脑端"><a href="#电脑端" class="headerlink" title="电脑端"></a>电脑端</h3><ol><li>更改适配器选项，禁用有线或无线网卡，留下手机USB共享的网卡</li><li>开启FTP客户端软件，连接手机服务端</li><li>传输文件</li></ol><p>传输完还原所有设置。</p><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><ol><li>此方法无需网络</li><li>可以用无线网络传输，手机或电脑开热点</li></ol><p>USB连接只有40MB/s，因为小米手机只支持USB2.0，达到了传输速度上限，使用USB3.0的手机理论可达600MB/s，实际100MB/s左右</p><p>手机与电脑<br>最快传输文件的方式<br>轻松易操作</p><p>无线/有线传输<br>平均40MB/S</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 局域网 </tag>
            
            <tag> FTP </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tampermonkey 油猴脚本笔记</title>
      <link href="/2021/06/20/tampermonkey-you-hou-jiao-ben-bi-ji/"/>
      <url>/2021/06/20/tampermonkey-you-hou-jiao-ben-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Tampermonkey-语法"><a href="#Tampermonkey-语法" class="headerlink" title="Tampermonkey 语法"></a>Tampermonkey 语法</h1><h2 id="require-引入文件"><a href="#require-引入文件" class="headerlink" title="require 引入文件"></a>require 引入文件</h2><ul><li>引入后相当于在同一个文件内，可直接调用引入文件的函数。</li></ul><h2 id="GM-xmlhttpRequest-Promise-写法"><a href="#GM-xmlhttpRequest-Promise-写法" class="headerlink" title="GM_xmlhttpRequest Promise 写法"></a>GM_xmlhttpRequest Promise 写法</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// GM_xmlhttpRequest GET异步通用模块</span>    <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"document"</span><span class="token punctuation">,</span> usermethod <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">GM_xmlhttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          method<span class="token punctuation">:</span> usermethod<span class="token punctuation">,</span>          url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>          responseType<span class="token punctuation">:</span> type<span class="token punctuation">,</span>          onload<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求错误："</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          onerror<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"网络错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// GM_xmlhttpRequest POST异步通用模块</span>    <span class="token keyword">function</span> <span class="token function">postData</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> postData<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"document"</span><span class="token punctuation">,</span> usermethod <span class="token operator">=</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">GM_xmlhttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          method<span class="token punctuation">:</span> usermethod<span class="token punctuation">,</span>          url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>          headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          data<span class="token punctuation">:</span> postData<span class="token punctuation">,</span>          responseType<span class="token punctuation">:</span> type<span class="token punctuation">,</span>          onload<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求错误："</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          onerror<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"网络错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="脚本执行顺序"><a href="#脚本执行顺序" class="headerlink" title="脚本执行顺序"></a>脚本执行顺序</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// @require      file://d:\a.js</span><span class="token comment" spellcheck="true">// ==/UserScript==</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>require 引入文件</li><li><code>// ==/UserScript==</code> 下的内容</li><li><code>(function () { &#39;use strict&#39;;console.log(1);})();</code> 的内容</li></ol><h2 id="GM-addValueChangeListener"><a href="#GM-addValueChangeListener" class="headerlink" title="GM_addValueChangeListener"></a>GM_addValueChangeListener</h2><ul><li>先运行监听函数；</li><li>只要对应名称的值发生变化就可以监听到。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myname <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">;</span><span class="token function">GM_addValueChangeListener</span><span class="token punctuation">(</span>myname<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>myname<span class="token punctuation">,</span> old_value<span class="token punctuation">,</span> new_value<span class="token punctuation">,</span> remote<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myname<span class="token punctuation">,</span> old_value<span class="token punctuation">,</span> new_value<span class="token punctuation">,</span> remote<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">GM_setValue</span><span class="token punctuation">(</span>myname<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(2);</span><span class="token keyword">function</span> <span class="token function">launch1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  user<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// console.log(user);</span>  <span class="token function">GM_setValue</span><span class="token punctuation">(</span>myname<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">launch2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  user<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">GM_setValue</span><span class="token punctuation">(</span>myname<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// console.log("user", user);</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> Tampermonkey </tag>
            
            <tag> Promise </tag>
            
            <tag> GM_xmlhttpRequest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新标准日本语学习笔记</title>
      <link href="/2021/06/07/xin-biao-zhun-ri-ben-yu-xue-xi-bi-ji/"/>
      <url>/2021/06/07/xin-biao-zhun-ri-ben-yu-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="新标日初级上"><a href="#新标日初级上" class="headerlink" title="新标日初级上"></a>新标日初级上</h1><h2 id="书本介绍"><a href="#书本介绍" class="headerlink" title="书本介绍"></a>书本介绍</h2><h3 id="书本结构"><a href="#书本结构" class="headerlink" title="书本结构"></a>书本结构</h3><ol><li><p>上、下册各设6个”基本单元”，每个单元由4课构成。</p><p>上册另设”入门单元”</p></li><li><p>入门单元</p></li><li><p>基本单元</p><ol><li>寒暄用语</li><li>人物介绍</li><li>单元结构</li><li>单元扉页</li><li>单元末<ul><li>阅读文</li><li>实用场景对话</li><li>词语之泉</li><li>日本风情</li></ul></li></ol></li><li><p>模拟试题</p></li><li><p>附录</p><ul><li>为了整理学习项目，在上、下册的卷末都设置了附录。附录内容包括：课文译文”“练习<br>Ⅱ、模拟试题参考答案”“练习、模拟试题录音内容”“数、量词搭配使用表”“动词一览表”<br>“句型、表达索引”“总词汇表”“关联词语范畴一览表”“专栏日语译文”“图画词典”等。<br>●“总词汇表”中的动词以基本形的形式给出。<br>●¨数、量词搭配使用表”只收入上册附录。<br>●图画词典用插图和对译的方式介绍基本的动词、一类形容词等，只收入下册附录</li></ul></li></ol><h3 id="各课结构"><a href="#各课结构" class="headerlink" title="各课结构"></a>各课结构</h3><ol><li><p>基本课文 和 应用课文</p><ol><li>基本课文: 一二两个部分<ol><li>单句突出句型</li><li>对话再现句型</li></ol></li><li>应用课文: 实用会话</li></ol></li><li><p>语法解释 与 表达及词语讲解</p><p>“语法解释”和“表达及词语讲解”并置于“基本课文”和“应用课文”之间，以引导学习者加深对本课所学句型、语法项目以及相关表达的理解。关于学习顺序和方法，请参照本书的使用方法一例”（p.XI)</p><ol><li><p>语法解释</p><p>主要解释基本课文中出现的句型和语法项目。有时也涉及应用课文中有关项目，这时候用[人物]表示。</p><ul><li>标题：语法解释”中的标题用以下方式简明扼要地标出。</li></ul><p>下面是标题形式”与其“内容与含义”的对照表。</p><table><thead><tr><th align="left">标题形式</th><th align="left">内容与含义</th></tr></thead><tbody><tr><td align="left">名</td><td align="left">名词</td></tr><tr><td align="left">名[场所]</td><td align="left">表示处所的名词</td></tr><tr><td align="left">名[人]</td><td align="left">表示人的名词</td></tr><tr><td align="left">名[物]</td><td align="left">表示物的名词</td></tr><tr><td align="left">名[时间]</td><td align="left">时间名词</td></tr><tr><td align="left">名[交通工具]</td><td align="left">交通工具名词</td></tr><tr><td align="left">名[工具]</td><td align="left">工具\手段的名词</td></tr><tr><td align="left">名[数量]</td><td align="left">数量的名词</td></tr><tr><td align="left">名[次数]</td><td align="left">次数</td></tr><tr><td align="left">名[附着点]</td><td align="left"></td></tr><tr><td align="left">名[目的地]</td><td align="left"></td></tr><tr><td align="left">名＋の</td><td align="left">名词 + の</td></tr></tbody></table><table><thead><tr><th>形</th><th>一类形容词和二类形容词</th></tr></thead><tbody><tr><td>一类形</td><td>一类形容词</td></tr><tr><td>二类形</td><td>二类形容词</td></tr></tbody></table><table><thead><tr><th>动</th><th>动词</th></tr></thead><tbody><tr><td>一类动</td><td>一类动词</td></tr><tr><td>二类动</td><td></td></tr><tr><td>三类动</td><td></td></tr><tr><td>自动</td><td>自动词</td></tr><tr><td>他动</td><td>他动词</td></tr><tr><td>动(基本形)</td><td>动词的基本形</td></tr><tr><td>动(た形)</td><td></td></tr><tr><td>动(て形)</td><td></td></tr><tr><td>动(ば形)</td><td></td></tr><tr><td>动(意志形)</td><td></td></tr><tr><td>动(基本形/ない形)</td><td></td></tr><tr><td>动(否定)</td><td></td></tr><tr><td>动(简体形)</td><td></td></tr></tbody></table><table><thead><tr><th>小句</th><th>复句中的小句</th></tr></thead><tbody><tr><td>疑问词小句</td><td>包含疑问词的小句</td></tr><tr><td>小句(简体形)</td><td>以简体形结尾的小句</td></tr><tr><td>小句(动词简体形)</td><td>以动词简体形结尾的小句</td></tr><tr><td>小句(一类形/二类形/名)</td><td></td></tr><tr><td>小句(动词基本形/ない形)</td><td></td></tr><tr><td>小句(动词た形/ない形)</td><td></td></tr></tbody></table></li><li><p>表达及词语讲解</p><ul><li>对基本课文及应用课文中出现的需要注意的表达方式、词汇的用法进行讲解说明。应用课文中的有关项目用[人物]表示。讲解说明的原则是密切结合课文的具体内容进行，而不包罗该项目的全部意义和内容。另外，讲解时充分照顾到文化方面的因素。<br>所有例句中的日语汉字都注假名，附汉语翻译。例句当中重要的部分用黑体标出。</li></ul></li></ol></li><li><p>练习</p><ol><li>替换\改变说法等练习巩固基本功. 不设答案</li><li>听解\读解\填空\中译日. 有答案</li></ol></li><li><p>生词表</p><ul><li>生词的选择与排列：<ul><li>除独立词外，寒暄表达、惯用短语以及量词等附属词也一并列出。排列顺序是先将<strong>独立词</strong>按照词类集中排列，然后是<strong>寒暄表达</strong>、<strong>惯用短语</strong>以及<strong>量词</strong>等<strong>附属词</strong>。二者之间用虚线隔开。</li><li>独立词依据<strong>词类集中排列</strong>，词类相同的尽量将意思相近以及有关联的单词集中处理，以利于学习者联想、记忆。专有名词按照人名、地名、公司名称的顺序排列。</li></ul></li><li><strong>标出项目</strong>：<ul><li>独立词以“读法、声调、书写法、词类、汉语翻译”的形式标出。寒暄表达、惯用短语除不标词类一项之外，标出方式和独立词相同。</li></ul></li><li><strong>声调</strong>：<ul><li>如上所示，声调用线条表示。（参照：上册“人门单元”D.14）。</li><li>声调的标注方法参考了NK放送文化研究所幅《NHK日本語凳音了夕七&gt;卜辞典》。</li></ul></li><li><strong>书写法</strong>：生词的书写法在（）内给出。<ul><li>整个单词全部可以用汉字标出的在（）里标出汉字，如上面的“（社員）”。生词的一部分为汉字，一部分为平假名时在（）内两者一起标出，如“（书母）”。另外，“勉強L主寸”等三类动词，用“八老上5L主寸（勉強~）”的形式表示。</li></ul></li><li><strong>词类</strong>：词类及其缩略语如下。<ul><li>名词=名，代词=代，疑问词=疑，一类动词=动1，二类动词=动2，三类动词=动3，一类形容词=形1，二类形容词=形2，副词=副，连体词=连体，连词=连，叹词=叹，专有名词=专</li></ul></li><li><strong>汉语翻译</strong>：对于多义词一般只给出与课文内容相应的译词。</li></ul></li></ol><h3 id="语法体系"><a href="#语法体系" class="headerlink" title="语法体系"></a>语法体系</h3><ol><li><p>与¨学校语法”的对应</p><p>本书采用了不同于“学校语法”的语法体系，以下归纳本书使用的语法术语。</p><p>[动词活用对照表]</p></li></ol><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>关于书写</p><ul><li>上册采用分写的方式，下册采用一般的方式。</li><li>因日文正式书写规则不用”？”“！”，本书也尽量避免使用该类符号，疑问句后面一般也使用“。”。但在一部分简体句中，为了有效地体现说话人的情感、感觉，也有使用了“?”“！”的地方。</li></ul><h2 id="日语语法-附录"><a href="#日语语法-附录" class="headerlink" title="日语语法 附录"></a>日语语法 附录</h2><p>在整个日语体系当中，按单词的<strong>意义，形态或职能</strong>加以分类，大体上被划分为<strong>十二品词类型</strong>，即名词、数词、代名词、动词、形容词、形容动词、连体词、副词、接续词、感叹词、助动词和助词。<br>按语言结构特点分类，日本语属于黏着语，阿尔泰语系。在语言表达上分为<strong>简体和敬体</strong>，另外有发达的敬语体系。</p><h3 id="语法特点"><a href="#语法特点" class="headerlink" title="语法特点"></a>语法特点</h3><ol><li><p>作为一种基本的结构，典型的日本句子的句式是<strong>主语－宾语－谓语</strong>。</p><ul><li>例如，太郎がりんごを食べた（Tarou ga ringo wo tabeta） 照字面直接的意思是”太郎一个苹果吃了”。</li></ul></li><li><p>当日本人觉着从语境中听者能理解，也就是谈话者或作者自信谈话对象对所谈及的情况有一定了解时，<strong>经常会省略主语或宾语</strong>。</p><ul><li>在这种情况下，上面所讲的那个句子可能会变成，りんごを食べた（ringo wo tabeta）（”吃了一个苹果”）或仅为：食べた（tabeta）（”吃了”）。</li></ul></li><li><p>日语不同于英语中，<strong>词序并不能表明名词在一个句子中的语法作用</strong>。</p><ul><li><p>名词也不像有些语言那样，会因语法需要加以变化。代之，<strong>语法作用是通过名词后面的虚词来表示的</strong>。</p></li><li><p>较重要的是<strong>が（ga）, は（wa）,お（o）,に（ni）和の（no）</strong>。虚词は（wa）特别重要，因为它标志着一个句子的话题或主题。</p></li></ul></li><li><p>日语中的<strong>动词变格不能反映出人称和单复数</strong>。</p><ul><li>在现代语中，所有<strong>动词</strong>在字典中的形式都是<strong>以元音u结尾</strong>。这样，动词“食べる”（taberu）就象英语中”吃”的动词原形”to eat”，尽管它本身实际上是现在时，意思是”eat（吃的动词原形）/eats（吃的第三人称单数）”或者 “will eat”（ 将吃，吃的将来时）。 其它的一些变格形式是“食べない”（tabenai）(“does not eat” or “will not eat”，英语的现在时不吃或将来时不会吃), “食べよう”（tabeyou）(“let‘s eat”or “someone may eat”英语的祈使句让我们吃或某人可吃) “食べたい”（tabetai）(“want/wants to eat”，想吃或单数人称的想吃), “食べた”（tabeta）(“ate”，英语中的过去时，吃过), “食べれば”（tabereba）(if someone eats”，英语的假设句，如果某人吃) 和“食べろ”（tabero） (“eat!”，英语中的命令句吃！) 。</li></ul></li></ol><h3 id="日语的时态"><a href="#日语的时态" class="headerlink" title="日语的时态"></a>日语的时态</h3><p>日语中主要有3种时态：过去时、现在时、将来时。其中，现在时和将来时没有明显的时态标记（即都采用动词原形），要靠动词的种类和上下文的关系区别。因此，从形态上说，我们也可以认为日语的时态分为过去时和非过去时两种。<br>例如：</p><ol><li><strong>过去时：（即带有时态标记“た”）</strong><ol><li>①読んだ（已经完成）对应的英语为“he read” ；<br>②読んでいた（尚未完成）“読んでいた”对应的英语为 “he was reading”（可以这么理解，但不完全是这样。这个更像西班牙语的过去未完成时。）</li></ol></li><li><strong>非过去时：（即不带时态标记“た”）</strong><ol><li>①読む（将要进行/反复恒常的动作） 对应的英语为“he is going to read /he reads”；</li><li>②読んでいる（正在进行）对应的英语为“he is reading”（这种形式用在像“読む”这样的表动作的词上时，可以认为正在进行，用于状态性动词时应该认为是一种已经结束的动作所造成的结果的存续。）</li></ol></li></ol><h3 id="书写"><a href="#书写" class="headerlink" title="书写"></a>书写</h3><p>通常情况下，日语是竖着书写的。不过随着电脑的普及，日语也出现了横向的写法。在书写中，遇到有汉字的词就要写汉字，横写时把对应假名写在汉字上边，竖写时写在汉字右边（日本汉字可不一定全是繁体字，即旧时或现在港台地区所说的“正体字”）。</p><h3 id="标点"><a href="#标点" class="headerlink" title="标点"></a>标点</h3><p>在标点方面，日语的句号、感叹号和省略号与汉语一样，逗号有“，”和“、”两种（同一段话只能用一种）。</p><p>引号使用规则也与汉语一样。</p><p>日语中有问号，不过一般几乎很少使用，使用时一般为简体表现。</p><p>通常情况表示疑问需要在句末加か，句尾仍用句号。</p><p>除逗号、句号外，现代日本还使用以下符号。</p><ol><li>引号「 」 引用句子和书写会话时使用，称作单引号，相当于汉语的引号，日语中不使用“”。</li><li>双引号『 』 在引用句中再次引用时使用，相当于汉语的双引号。</li></ol><h3 id="符号-1"><a href="#符号-1" class="headerlink" title="符号"></a>符号</h3><ol><li>々 — 重叠字符号<br>例：人々、国々、佐々木<br>注：过去中国大陆颁布的第二版简化汉字方案（已废止）也有采用々作为重叠字符号这样的语法。</li><li>~ — 波浪线符号，表示“从……到……”的意思。<br>例：东京<del>大阪 三月</del>五月</li></ol><p>作者：清水君SHIMIZU<br>链接：<a href="https://www.zhihu.com/question/341798682/answer/796392455" target="_blank" rel="noopener">https://www.zhihu.com/question/341798682/answer/796392455</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>一，日语语法结构是“主宾谓”。</p><p>わたし<strong>は</strong>りんご<strong>を</strong>食べます。</p><p>（每个词直接落下就是：我 苹果 吃）</p><p>（わたし＝我，りんご＝苹果，食べます＝吃，其他成分则是助词。）</p><p>标黑的部分，就是日语语法的重点“助词”。</p><p>句子被助词分成了三段，每个助词有每个助词的语法意义，但大致分出了主语，宾语和谓语。</p><p>所以日语的一大特点就是动词后置。</p><p>（助词は表示主语，を在动词前使用表示动作的对象宾语）</p><p>二，日语时态问题</p><p>日语时态很简单，不像英语那么复杂。</p><p>按照日本语法的划分，日语动词的时态有“过去”、“现在/未来”两种。</p><p>这里表现为动词本身的变化，如：“する”、“した”（做）</p><p>除此之外所说的各种时态，是借助英语的时态说法来表现，都需要+其他的词汇，</p><p>如：している=して+いる（正在做）</p><p>一般、 将来时：する （做）</p><p>进行时：している （正在做）</p><p>过去时、完成时：した（做过，做完）</p><p>三，黏着问题</p><p>以第一个句子为例：</p><p>わたしはりんごを<strong>食べます</strong>。</p><p>（我吃苹果。）</p><p>加黑部分是动词。</p><p>让我们来变化一下。</p><p>わたしはりんごを（<strong>食べ</strong>る）。</p><p>（我吃苹果。   简体形）</p><p>わたしはりんごを（<strong>食べ</strong>ています）。</p><p>（我正在吃苹果。）</p><p>わたしはりんごを（<strong>食べ</strong>ている）。</p><p>（我正在吃苹果。）简体形</p><p>わたしはりんごを（<strong>食べ</strong>ません）。</p><p>（我没吃苹果）</p><p>わたしはりんごを（<strong>食べ</strong>ない）。</p><p>（我没吃苹果）简体形</p><p>わたしはりんごを（<strong>食べ</strong>ました）。</p><p>（我吃了苹果）</p><p>わたしはりんごを（<strong>食べ</strong>た）。</p><p>（我吃了苹果）简体形</p><p>りんごを（<strong>食べ</strong>てください）。</p><p>（请你吃苹果。）</p><p>词头都没变，就是词尾变了，也就是所谓的黏上去。</p><h2 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h2><p>书单说明：列出了对我来说肥肠有用的书，其中红色为我觉得必备的<br><strong>1.</strong>《新版中日交流标准日本语初级上、下》人民教育出版社<br><strong>2.</strong>《新版中日交流标准日本语中级上》人民教育出版社<br>3从零快乐学日语语法下/（日）藤井麻里编著<br>4新日本语能力考试N4语法详解附练习解析文照海老原博编著<br><strong>5</strong>新日本语能力测试全力出击N2文字词汇HOLD住芝麻门外语，洪洁编著<br><strong>6</strong>新日本语能力测试全力出击N2语法HOLD住芦芝麻门外语，李占军编著<br>7新日语能力考试全真模拟试题解析版/（日）小池多津著<br>8新日语能力测试N2听力深度解密/总主编刘桂云主编金青华<br><strong>9</strong>新完全掌握日语能力考试N2级阅读/北京语言大学出版社<br><strong>10</strong>新完全掌握日语能力考试N2级听力/北京语言大学出版社<br><strong>11</strong>.历年真题09-16闲鱼购入10元<br>12新日本语能力考试完全解析&amp;模拟试题N2语言知识文字词汇语法/金基范编著<br>13最好考前做过这些题新日语能力考试N2语言知识（文字词汇语法）/（韩李钟权编</p><ul><li>启动阶段五十音背的滚瓜烂熟<br>（必须平假名+片假名一起）<br>了解一些基本的概念<br>比如音读训读，汉字词和语词<br>3.5开始看叶子老师在b站的初级标日课<br>1做随堂笔记<br>2每天复习前一天的笔记和语法<br>3走路听头天的课文和单词（喜马拉雅）<br>4期间还把新东方的教材<br>《从零快乐学日语语法》下册过了一<br>查缺补漏<br>5花一下午边剧剧边过了一遍N4语法书<br>发现自己敬语部分薄弱，恶补加深印象</li><li>4.3学完标日初级，开始自学标日中级<br>4.14放弃课本，开始石语法书、词汇书<br>比较后选择《全力出击》词汇、语法<br>语法200个必背，词汇6000个尽量<br>每天看一篇语法，一篇词汇，并复习下<br>前一天的内容做练习题<br>接续连体词&gt;动词&gt;形容词&gt;名词外来<br>走路听语法（莜）单词（黑皮）<br>选看《完全解析》填补基础沟壑，注重<br>复合词接头接尾多义词<br>515考试周开始日语份额缩水<br>522做了第一套完整题，被血虐<br>《全真模拟试题解析版》<br>发现差距：听力阅读<br>时间紧一不熟练/不集中</li><li>523阅读听力训练兼顾语法词汇<br>《新完全掌握》阅读、听力<br>《听力深度解密》<br>先熟悉题型（了如指掌），再提升素养<br>只做了例题，没有管练习<br>快速形成应试思维方式<br>6.5完成所有196个语法<br>专业课考试瑞不过气暂时放下日语<br>考完一科的当晚做一套真题（2）<br>挤出少量时间做听力训练<br>走路听音频，零碎时间看小D收藏</li><li>630下午四点考完最后一门专业课<br>当晚：一套真题井订正<br>复习《完全解析》<br>7.1下午：复习196个语法（看目录）<br>复习系统性笔记<br>晚上：一套真题并订正<br>《最好考前做过这些题》<br>顺序：副词复合动词其他<br>动词形容词名词<br>72中午进考场前<br>继续看《最好考前做过这些题》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 语言学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王菲英语语法</title>
      <link href="/2021/06/07/wang-fei-ying-yu-yu-fa/"/>
      <url>/2021/06/07/wang-fei-ying-yu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="王菲英语语法-第十四季"><a href="#王菲英语语法-第十四季" class="headerlink" title="王菲英语语法 第十四季"></a>王菲英语语法 第十四季</h1><blockquote><p>完整版笔记地址:  <a href="https://github.com/Eished/wfyyyf_notes" target="_blank" rel="noopener">https://github.com/Eished/wfyyyf_notes</a></p></blockquote><h2 id="语法基础概念（10-9-8完美语法体系）"><a href="#语法基础概念（10-9-8完美语法体系）" class="headerlink" title="语法基础概念（10+9+8完美语法体系）"></a>语法基础概念（10+9+8完美语法体系）</h2><h3 id="十种词性"><a href="#十种词性" class="headerlink" title="十种词性"></a><u>十种</u>词性</h3><ol><li>介词 Prepositions</li><li>冠词 Articles</li><li>名词 Nouns</li><li>代词 Pronouns</li><li>数词 Numerals</li><li>副词 Adverbs</li><li>形容词 Adjectives</li><li>动词 Verbs</li><li>连词 Conjunctions</li><li>感叹词（只有叹词没有语法内容）</li></ol><h3 id="九种句子成分"><a href="#九种句子成分" class="headerlink" title="九种句子成分"></a><u>九种</u>句子成分</h3><ol><li>主语 Subject</li><li>谓语 Predicate Verb</li><li>宾语 Object</li><li>表语 Predicative（主语补语）</li><li>双宾 </li><li>宾补 Object Complement</li><li>定语 Attributive</li><li>状语 Adverbial</li><li>同位语 Appositive<h3 id="八种句式"><a href="#八种句式" class="headerlink" title="八种句式"></a><u>八种</u>句式</h3></li></ol><p><strong>五种基本句型源于动词性质</strong></p><ul><li><strong><u>五种</u>基础简单句</strong> Simple Sentence<ol><li>主 + 谓 + 宾</li><li>主 + 系 + 表</li><li>主 + 谓 + 双宾</li><li>主 + 谓 + 宾补</li><li>主 + 谓</li></ol></li><li><strong><u>三种</u>高级复合句</strong> Complex Sentence 复杂句<ol><li>名词性从句<ol><li>主语从句</li><li>宾语从句</li><li>表语从句</li><li>同位语从句</li></ol></li><li>定语从句</li><li>状语从句</li></ol></li></ul><h3 id="王菲语法树"><a href="#王菲语法树" class="headerlink" title="王菲语法树"></a>王菲语法树</h3><ol><li><strong>名词</strong>：<ol><li>单复数 </li><li>所有格 </li><li>主谓一致</li></ol></li><li><strong>代词</strong>：<ol><li>形式 </li><li>含义 </li><li>用法</li></ol></li><li><strong>数词</strong>： <ol><li>基数词 </li><li>序数词</li></ol></li><li><strong>冠词</strong>：<ol><li>定冠词 </li><li>不定冠词 </li><li>零冠词</li></ol></li><li><strong>形容词，副词</strong>：<ol><li>三级 </li><li>固定句型</li></ol></li><li><strong>介词</strong>：<ol><li>用法 </li><li>分类 </li><li>功能 </li><li>固定搭配</li></ol></li><li><strong>动词</strong>：<ol><li>时态 </li><li>语态 </li><li>非谓语动词</li><li>虚拟语气</li><li>独立主格结构</li></ol></li><li><strong>连词</strong>：<ol><li>并列连词</li><li>从属连词（三大从句）</li></ol></li><li><strong>其它</strong>：<ol><li>强调句 </li><li>倒装句 </li><li>反义疑问句</li></ol></li></ol><h3 id="基本概念-简单句（重要）"><a href="#基本概念-简单句（重要）" class="headerlink" title="基本概念 - 简单句（重要）"></a>基本概念 - 简单句（重要）</h3><ol><li><p><strong>陈述句（五种句型）</strong></p><ol><li><strong>主语 + 系动词 + 表语</strong>（系动词后面叫表语）<ul><li>London is the capital of England.</li><li>系动词: <ul><li>be 动词 </li><li>感官动词（与五官相关单词）</li></ul></li></ul></li><li><strong>主语 + 谓语</strong>（动词是<strong>不及物动词</strong>，不能加宾语）<ul><li>I get up early in the morning.</li></ul></li><li><strong>主语 + 谓语 + 宾语</strong><ul><li>I love watermelon.</li><li>表语/宾语本质相同<ul><li><strong>动词后面叫宾语</strong></li><li>两种特殊动词后面叫表语</li></ul></li></ul></li><li><strong>主 + 谓 + 双宾</strong>（直接宾语+间接宾语）<ul><li>The rabbit showed <em>us</em> a <em>carrot</em>.</li><li>改成被动句，会出现两个被动句<ul><li>us 和 carrot 都可以做被动语态的主语</li></ul></li></ul></li><li><strong>主 + 谓 + 宾语 + 宾补</strong><ul><li>They elected <em>Martin</em> their monitor.</li><li>改成被动句只有一个被动句<ul><li>只有 Martin 能做被动语态主语</li></ul></li></ul></li></ol></li><li><p><strong>陈述句形式</strong></p><ol><li><strong>肯定式</strong><ul><li>Honesty is the best policy.</li></ul></li><li><strong>否定式</strong><ul><li>She will not listen to me.</li><li>l don’ t think it right.</li><li>在助动词后面加 not , 不能直接加动词后面</li></ul></li></ol></li><li><p><strong>一般疑问句</strong></p><ul><li>可以用 yes/no 回答</li><li>陈述句变一般疑问句有<strong>三种类型</strong><ol><li><strong>提前系动词</strong><ul><li>陈述句: 主语 + 系动词 + 表语</li><li>疑问句: 系动词 + 主语 + 表语</li><li>You were coming with us. </li><li>Were you coming with us？ -Yes</li></ul></li><li><strong>提前助动词</strong><ul><li>陈述句: 主语 + 谓语 + (宾语)</li><li>疑问句: 助动词 + 主语 + 动词原形 + 其它<ul><li><strong>助动词</strong>: 帮助动词的动词 (完成<strong>语态/时态/疑问/否定</strong>) 无词义</li></ul></li><li>You <em>have found</em> a new job. </li><li><em>Have</em> you <em>found</em> a new job yet？<ul><li>Yes, I have/No, I haven ‘t.</li></ul></li></ul></li><li><strong>提前情态动词</strong><ul><li>陈述句: 主语 + 情态动词 + 动词原形 + 其它</li><li>疑问句: 情态动词 + 主语 + 动词原形 + 其它<ul><li><strong>情态动词</strong>和<strong>助动词</strong>都<strong>不能</strong>单独充当<strong>谓语</strong>, 必须和动词放在一起充当谓语</li><li><strong>情态动词</strong>: 有词义; <strong>助动词</strong>: 无词义</li></ul></li><li>You <em>can solve</em> this problem </li><li><em>Can</em> you <em>solve</em> this problem？<ul><li>Yes I can/No, l can’t.</li></ul></li></ul></li></ol></li></ul></li><li><p><strong>特殊疑问句</strong></p><ol><li><p>以特殊疑问词开头；</p></li><li><p>对句中某一成分提问；</p></li><li><p>不能用 Yes/No 进行回答</p><table><thead><tr><th>Who - 提问人</th><th>Where - 提问地点</th></tr></thead><tbody><tr><td>Whose - 提问所属</td><td>Why - 提问原因</td></tr><tr><td>Whom - 提问宾格人</td><td>How - 提问方式或数量</td></tr><tr><td>What - 提问事情或属性</td><td>How much/many - 提问数量</td></tr><tr><td>When - 提问时间</td><td>Which - 提问选择</td></tr></tbody></table><p>特殊疑问句 例句1</p><ul><li>Who were you on the phone with？</li><li>Jim.</li></ul><p>特殊疑问句 例句2</p><ul><li>Whom is he dating？</li><li>He is dating Anna.</li></ul></li></ol></li><li><p><strong>选择疑问句</strong></p><ol><li><p>选择疑问句<strong>用 or 连接</strong>；</p></li><li><p>提出两个或两个以上的句式供选择；</p></li><li><p>选择疑问句不能用 Yes/No 回答。</p><p>选择疑问句 例句1</p><ul><li>Do you like chocolate or vanilla better？</li></ul><p>选择疑问句 例句2</p><ul><li>Are you going to drive or do you want me to？</li></ul></li></ol></li><li><p><strong>反义疑问句</strong></p><ol><li><p>陈述句部分是<strong>肯定句</strong>，疑问句部分用<strong>否定句</strong>；</p></li><li><p>陈述句部分是<strong>否定句</strong>，反意疑问句用<strong>肯定句</strong>。</p><p><strong>前肯后否；前否后肯</strong></p><p><strong>反义疑问句</strong> 例句</p><ul><li>He is your teacher, isn’t he?</li><li>You found the key in the bedroom, didn’t you？</li><li>The boy has to clean his room, doesn’t he?</li></ul></li><li><p><strong>感叹句</strong>的反义疑问句</p><ul><li>一律用<strong>否定式提问</strong></li><li>What a clever boy, isn’t he?</li><li>What a lovely day, isn’t it？</li></ul></li><li><p><strong>祈使句</strong>的反义疑问句</p><ul><li>用 <strong>will you</strong></li><li>Let’s 开始, 用 <strong>shall we</strong></li></ul></li><li><p><strong>含 must</strong> 的反义疑问句</p><ul><li><strong>表“必须”</strong>：反意疑问句为 mustn’t…？/ needn’t…?<ul><li>He <u>must</u> study hard at English, mustn ‘t he？/neednt he?</li></ul></li><li><strong>表推测“一定，肯定”</strong>：反意疑问句与 must 后面的<strong>动词</strong>呼应<ul><li>You <u>must</u> be joking, aren’t you?</li></ul></li></ul></li><li><p><strong>含否定词</strong>的反义疑问句</p><ul><li>常见否定词：hardly; never; seldom; little; few; nowhere; nothing 等</li><li>反意疑问句用<strong>肯定提问</strong>。<ul><li>Frank <u>hardly</u> goes to parties, does he?</li><li>He has <u>few</u> triends, has he?</li></ul></li></ul></li><li><p><strong>复合句</strong>的反义疑问句</p><ul><li>复合句的反意疑问句都<strong>对主句提问</strong>。<ul><li>复合句: 两个以上句子构成, 从句连词的三大从句</li></ul></li><li><u>He was punished</u> <em>because</em> he violated the regulation, wasn ‘t he？</li><li>You never told me <em>that</em> you had been ill, did you?</li></ul></li><li><p><strong>宾语从句</strong>的反义疑问句</p><ul><li>I don’ t think/ suppose/ believe/ imagine 引导的<strong>宾语从句</strong>，反意疑问句应<strong>与从句的主语，谓语部分一致</strong>，用<strong>肯定式的提问</strong>。<ul><li>中英文否定词位置不一致, 否定词转移</li></ul></li><li>I don’ t <u>suppose anyone</u> will volunteer, will they?<ul><li>我相信没人会做 否定词属于后面从句</li></ul></li><li>I don’ t <u>believe she</u> has done it, has she?<ul><li>我相信她没做这件事, 否定词属于后面从句</li></ul></li></ul></li></ol></li><li><p><strong>感叹句</strong></p><ol><li><strong>What 感叹句</strong><ol><li>What + a/an + 形容词 + <strong>可数名词单数</strong> + [主语 + 谓语]！</li><li>What + a/an + <strong>名词</strong> + 主语 + 谓语！</li><li>What + 形容词 + <strong>不可数名词/复数名词</strong> + [主语 + 谓语]！<ul><li>What a marvelous sight!</li></ul></li></ol></li><li><strong>How 感叹句</strong><ol><li>How + <strong>形容词/副词</strong> + [主语 + 谓语]！</li><li>How + <strong>形容词</strong> + a/an + 可数名词单数 + [主语 + 谓语]!<ul><li>How noble of him to do that !</li><li>How intelligent you are！</li></ul></li></ol></li><li><strong>语气词/感叹号</strong><ul><li>Oh, I am depressed!</li><li>I cannot survive without you!</li></ul></li></ol></li><li><p><strong>祈使句</strong></p><p><strong>没有主语, 通常用动词开头</strong></p><ol><li>表示命令<ul><li>Please sit down.</li><li>Leave this place at once.</li></ul></li><li>表示请求或祝愿<ul><li>Have a safe trip！</li><li>Let’s go for a walk.</li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言学习 </tag>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《被讨厌的勇气：自我启发之父 阿德勒的哲学课》读书笔记</title>
      <link href="/2020/06/09/bei-tao-yan-de-yong-qi/"/>
      <url>/2020/06/09/bei-tao-yan-de-yong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、评价与启发"><a href="#一、评价与启发" class="headerlink" title="一、评价与启发"></a>一、评价与启发</h2><h3 id="1）评价"><a href="#1）评价" class="headerlink" title="1）评价"></a>1）评价</h3><p>整本书注重于主观能动性，观点浅显易懂，否定原因论和精神分析，认为意识与过去无关，一切都是人的主观选择。</p><p>我觉得应该原因论与目的论相结合，书中理论逻辑才能自洽，肯定客观世界影响的同时，进行积极的自我暗示增强自信，然后做出行动得到认可获得更多自信，从而改变自己。</p><p>书的标题也可以验证这一说法：”被讨厌的勇气“，翻译过来就是”不求所有人认可的自信“。假设存在一个不被任何人认可的人，那么他必须先有自信（被认可），才能有”不求所有人认可的自信“。</p><p>原因论分析自我后能更好的接纳自我，本来自信的人刚好不需要这个过程，所以书的受众是本来自信的人。其它人则需要原因论分析自我后，先接纳自我、建立自信。</p><p>就像这位豆瓣网友所说，</p><blockquote><p>豆瓣网友：有评价说这种理论的局限性之一，就是“并非所有有缺陷的人都能得到积极的补偿。其补偿作用只适合用在缺陷者本身有足够的自信，并有外在支持的力量，才能发生理想的‘优越感’”，并且“解释太过消极，忽略了人尚有积极的支配欲”。</p><p>所以平日就活得很丧的人看完还是会很丧，但是对于正在积极建设自己心理的我来说，的确帮助很大。</p></blockquote><h3 id="2）启发"><a href="#2）启发" class="headerlink" title="2）启发"></a>2）启发</h3><p>最重要的启发在自信与人际关系的联系。</p><p>人想要改变就要获得自信，获得自信要获得他人认同、对他人有价值，让自己的价值在社会流通，从而获得更多的认同。</p><p>所以人际关系是人想要改变的充要条件，也是人能够改变的充要条件。</p><p><strong>不能逃避人际关系，想要改变就要接受更多的人际关系。</strong></p><p>人际关系的本质是认同感的交流、价值的交流。</p><h2 id="二、原文和想法"><a href="#二、原文和想法" class="headerlink" title="二、原文和想法"></a>二、原文和想法</h2><blockquote><p>原文：决定我们自身的不是过去的经历，而是我们自己赋予经历的意义</p></blockquote><p>想法：人的自我是由过去和环境所决定的，经历的意义是环境决定的。同一件事所处环境不同，意义便不同。主观能动可以影响自身而不能决定。</p><blockquote><p>原文：所谓愤怒其实只是可放可收的一种“手段”而已。</p></blockquote><p>想法：所有的情绪都是达成目的手段？婴儿有没有愤怒这种手段？愤怒是后天学习的表达方式，不属于先天性情绪。愤怒源于对事物或自我不可控的恐惧。恐惧=&gt;愤怒。例如动物对入侵者的威慑，入侵者危害到自身安全出于生存本能恐惧，从而做出威慑来自我保护。</p><blockquote><p>原文：青年：总而言之，您的主张还是以“人是可以改变的”为前提的吧？哲人：当然。否定我们人类的自由意志、把人看作机器一样的存在，这是弗洛伊德式的原因论</p></blockquote><p>想法：人的自由意志来自于人类自身，人类自身的自我意识来自于社会，自由意志不能脱离人类社会而存在。也就是说，人无法没有原因的改变。</p><blockquote><p> 原文：我们“并不是为了满足别人的期待而活着“</p></blockquote><p>想法：不要过于追求认可欲求</p><blockquote><p> 原文：阿德勒心理学认为“一切烦恼皆源于人际关系”。也就是说，我们都在追求从人际关系中解放出来的自由。但是，一个人在宇宙中生存之类的事情根本不可能。</p></blockquote><p>想法：不可能从人际关系解放</p><blockquote><p>原文：“自由就是被别人讨厌”。</p></blockquote><p>想法：自由=否定（认可欲求=不想被任何人讨厌），课题分离，分解扬弃人际关系。</p><blockquote><p>原文：“认可欲求”这个词，总而言之就是不想被任何人讨厌。</p></blockquote><p>想法：认可=不讨厌，不认可=讨厌，认可欲求=不想被任何人讨厌</p><blockquote><p>原文：阿德勒反对把精神和身体、理性和感情以及意识和无意识等分开考虑的一切二元论的价值观。</p></blockquote><p>想法：混沌的说法就无法验证。</p><blockquote><p>原文：把他人看作伙伴并能够从中感到“自己有位置”的状态，就叫共同体感觉。</p></blockquote><p>想法：有归属感的集体=&gt;共同体感觉</p><blockquote><p>原文：归属感不是生来就有的东西，要靠自己的手去获得。</p></blockquote><p>想法：归属感=认同自己并对自己有价值的集体</p><p>主动去寻找认同自己并对自己有价值的集体=获得共同体感觉 </p><blockquote><p>原文：活在害怕关系破裂的恐惧之中，那是为他人而活的一种不自由的生活方式</p></blockquote><p>想法：人是社会关系的总和，人无法脱离社会关系，不存在绝对自由的生活方式，只存在相对自由的生活方式，因此为他人而活也是一种自由，活在恐惧之中也是一种自由。 人为什么会寻求改变？寻求改变的源动力来自于社会关系。</p><blockquote><p>原文：阿德勒心理学反对一切“纵向关系”，提倡把所有的人际关系都看作“横向关系”。在某种意义上，这可以说是阿德勒心理学的基本原理。</p></blockquote><p>想法：人人平等 相互尊重，人的认知不同就不会平等，相互尊重的共同认知可以做到。相互尊重可以减少认可欲求</p><blockquote><p>原文：表扬这种行为含有“有能力者对没能力者所做的评价”这方面的特点。</p></blockquote><p>想法：赞扬和批评的定义过于模糊。如果不能批评不能赞扬如何分辨客观是非对错。</p><blockquote><p>原文：人只有在能够感觉自己有价值的时候才可以获得勇气。</p></blockquote><p>想法：勇气=自信，自信来自于价值，价值来自于他人的认同，人只有在被认同时才可以获得自信。</p><p>被表扬或批评会影响价值从而影响自信，因为价值来自于他人的认同。他人的认同来自于共同体，共同体是让自己有归属感的集体，归属感是自己认同的集体，所以共同体=对自己有价值的集体。</p><p>推导出=&gt;人只有在被对自己有价值的集体肯定时才可以获得自信。</p><blockquote><p>原文：按照存在标准来考虑的话，我们仅仅因为“存在于这里”，就已经对他人有用、有价值了，这是不容怀疑的事实。</p></blockquote><p>想法：存在只有使用价值，并不会带来商品的价值，而是过去的劳动创造了自己商品的价值。婴儿的存在是否有价值，父母的劳动创造了婴儿的价值。婴儿不是自然独立的存在，而是人类的产物。对于婴儿的自我感知，婴儿会因他人的认可而认为自己有价值，得不到认可则会认为自己没有价值。而人是社会关系的总和，对于社会任何人都有价值。</p><blockquote><p>原文：只要存在着，就有价值</p></blockquote><p>想法：商品的二重性（注释1），有使用价值，没有价值，不是商品。不是商品，对他人没有价值。对他人没有价值，不属于他人的共同体。不属于他人的共同体，无法获得认同就无法获得自信（勇气）。</p><p>人想要改变就要获得自信，获得自信要获得他人认同、对他人有价值，让自己的价值在社会流通，从而获得更多的肯定。</p><p>人际关系是人想要改变的充要条件，也是人能够改变的充要条件。</p><blockquote><p>注释1：马哲对商品价值的定义   </p><ol><li>使用价值是一种物品能够满足人们某种需要的属性，即物品的有用性。使用价值是商品的自然属性，它是由物品的物理、化学、生物等特性所决定的。  </li><li>价值是无差别的一般人类劳动的凝结，形成商品的价值。商品的价值在质上是相同的，只有量的差别，因而可以相互比较。价值反映商品生产者之间的关系，是商品的社会属性。</li></ol></blockquote><blockquote><p>原文：并不是说将任何人都变成朋友或者像对待朋友一样去对待每一个人，不是这样的，重要的是意识上的平等以及坚持自己应有的主张</p></blockquote><p>想法：平等是相对的、相互的；意识上完全人人平等很难到，意识上相互尊重容易做到。</p><blockquote><p>原文：接受不能更换的事物，接受现实的“这个我”，然后，关于那些可以改变的事情，拿出改变的“勇气”。这就是自我接纳。</p></blockquote><p>想法：如何确定不能更换的事物和现实的我，这个“不能更换”、“现实”都是由自我定义的，人类自身的自我意识来自于社会，自信来自于社会对自己有价值的集体肯定，形成社会决定论闭环。主观能动让自我有了全新的认知，这是不接受现实的结果。这句话表达自我范围内的接纳，但起决定作用的是社会。</p><blockquote><p>原文：在相信他人的时候不附加任何条件。即使没有足以构成信用的客观依据也依然相信，不考虑抵押之类的事情，无条件地相信。这就是信赖。</p></blockquote><p>想法：不存在无条件的相信，相信都存在原因。他者信赖不存在。</p><blockquote><p>原文：青年：信赖的反义词？……哎哎，这个……</p><p>哲人：是怀疑。假设你把人际关系的基础建立在“怀疑”之上。怀疑他人、怀疑朋友、甚至怀疑家人或恋人，生活中处处充满怀疑。那么，这样究竟会产生什么样的关系呢？对方也能够瞬时感觉到你怀疑的目光，会凭直觉认为“这个人不信赖我”。你认为这样还能建立起什么积极的关系吗？只有我们选择了无条件的信赖，才可以构筑更加深厚的关系。</p></blockquote><p>想法：没有怀疑哪有信赖。怀疑是生存本能恐惧的表现。</p><blockquote><p>原文：如果不敢去信赖别人，那最终就会与任何人都建立不了深厚的关系</p></blockquote><p>想法：怀疑到信赖是一个必然的获得信赖的过程</p><blockquote><p>原文：对作为伙伴的他人给予影响、作出贡献，这就是他者贡献。</p></blockquote><blockquote><p>原文：他者贡献并不是舍弃“我”而为他人效劳，它反而是为了能够体会到“我”的价值而采取的一种手段。</p></blockquote><blockquote><p>原文：青年：您是说工作的本质是对他人的贡献？</p><p>哲人：当然，赚钱也是一个重大要素。正如你之前查到的陀思妥耶夫斯基所说的“被铸造的自由”一样。但是，有些富豪已经拥有了一生也花不完的巨额财产，但他们中的多数人至今依然继续忙碌工作着。为什么要工作呢？是因为无底的欲望吗？不是。这是为了他者贡献继而获得“可以在这里的”归属感。获得巨额财富之后便致力于参加慈善活动的富豪们，也为了能够体会自我价值、确认“可以在这里”的归属感而进行着各种各样的活动。</p></blockquote><p>想法：利他的本质是利己</p><blockquote><p>原文：</p><p>哲人：为了方便起见，前面我一直按照自我接纳、他者信赖、他者贡献这种顺序来进行说明。</p><p>但是，这三者是缺一不可的整体。正因为接受了真实的自我——也就是“自我接纳”——才能够不惧背叛地做到“他者信赖”；</p><p>而且，正因为对他人给予无条件的信赖并能够视他人为自己的伙伴，才能够做到“他者贡献”；</p><p>同时，正因为对他人有所贡献，才能够体会到“我对他人有用”进而接受真实的自己，做到“自我接纳”。</p><p>你前些天做的笔记还带着吗？</p><p>青年：啊，是那个关于阿德勒心理学所提出的目标的笔记吧。自那天之后我就一直随身携带。</p><p>在这里。</p><p>行为方面的目标：①自立。②与社会和谐共处。</p><p>支撑这种行为的心理方面的目标：①“我有能力”的意识。②“人人都是我的伙伴”的意识。</p><p>哲人：如果把这个笔记与刚才的话结合起来看，应该能够理解得更加深刻。</p><p>也就是说，①所说的“自立”与“我有能力的意识”是关于自我接纳的话题。</p><p>另一方面，②所说的“与社会和谐共处”和“人人都是我的伙伴的意识”则与他者信赖和他者贡献有关。</p></blockquote><p>想法：融入社会</p><blockquote><p>原文：哲人：对人而言，最大的不幸就是不喜欢自己。对于这种现实，阿德勒准备了极其简单的回答——“我对共同体有益”或者“我对他人有用”这种想法就足以让人体会到自己的价值。</p></blockquote><p>想法：对于社会每个人都有价值</p><blockquote><p>原文：哲人：因为过去和未来根本不存在，所以才要谈现在。起决定作用的既不是昨天也不是明天，而是“此时此刻”。</p></blockquote><p>想法：活在当下</p><blockquote><p>原文：哲人：所以阿德勒在说了“并不存在普遍性的人生意义”之后还说：“人生意义是自己赋予自己的。”</p></blockquote><p>想法：不要活在别人的期待中，为自己而活</p><blockquote><p>原文：“我的力量无穷大”。</p></blockquote><blockquote><p>原文：如果“我”改变，“世界”就会改变。世界不是靠他人改变而只能靠“我”来改变。</p></blockquote><p>想法：自我暗示，加强自信心</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哲学 </tag>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5与CSS3实现动态网页</title>
      <link href="/2020/06/08/html5-yu-css3-shi-xian-dong-tai-wang-ye/"/>
      <url>/2020/06/08/html5-yu-css3-shi-xian-dong-tai-wang-ye/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5与CSS3实现动态网页"><a href="#HTML5与CSS3实现动态网页" class="headerlink" title="HTML5与CSS3实现动态网页"></a>HTML5与CSS3实现动态网页</h1><h2 id="步骤1-初识HTML5"><a href="#步骤1-初识HTML5" class="headerlink" title="步骤1: 初识HTML5"></a>步骤1: 初识HTML5</h2><pre><code>本阶段内容主要涵盖H5新增、删除标签、标签属性变化以及HTML5布局知识。通过本阶段学习，大家可以运用HTML5标签轻松实现网页音乐播放器和视频播放器，熟练运用HTML5的语义化标签进行静态网页的开发。</code></pre><ul><li><p>HTML5 ≈ HTML + CSS + JS + API</p></li><li><h4 id="学前准备："><a href="#学前准备：" class="headerlink" title="学前准备："></a>学前准备：</h4><p>​    了解HTML基本知识<br>​    具备CSS基础<br>​    熟练使用JavaScript</p></li><li><h4 id="移动互联网-HTML5-的优势"><a href="#移动互联网-HTML5-的优势" class="headerlink" title="移动互联网 HTML5 的优势"></a>移动互联网 HTML5 的优势</h4><ul><li>跨平台<ul><li>HTML5 是唯一通吃PC、Mac、iPhone、Android等主流平台的语言</li></ul></li><li>快速迭代<ul><li>互联网产品大多免费、且有网络效应，后来者抢夺用户难度非常大</li></ul></li><li>减低成本<ul><li>HTML5 开发比原生APP开发成本低一半</li></ul></li><li>导流入口多<ul><li>HTML5 应用导流非常容易</li></ul></li></ul></li><li><h4 id="Web-改变趋势"><a href="#Web-改变趋势" class="headerlink" title="Web 改变趋势"></a>Web 改变趋势</h4><ul><li>Native APP → WebApp → Hybrid App</li><li>PC → 移动 → 智慧互联</li></ul></li><li><h4 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h4><ul><li>掌握新标签以及新属性的功能特点，并熟练应用</li><li>了解HTML5的前景及学习展望</li><li>明确未来的学习目标和深入学习的方向</li><li>为移动前端打好基础</li></ul></li></ul><h3 id="第1课-HTML5标签变化"><a href="#第1课-HTML5标签变化" class="headerlink" title="第1课 HTML5标签变化"></a>第1课 HTML5标签变化</h3><pre><code>    HTML5标签变化    HTML5文档类型如何定义，有哪些标签，以及如何使用，从整体认识HTML5    DTD、新增的标签、删除的标签、重定义标签</code></pre><ul><li><p>HTML <code>&lt;!DOCTYPE&gt;</code> 标签</p><ul><li><p>定义和用法：</p><ul><li>版本声明，在文档的第一行</li></ul></li><li><p>不是 HTML 标签</p></li><li><p>常用声明：</p><blockquote><h3 id="HTML-4-01-Strict"><a href="#HTML-4-01-Strict" class="headerlink" title="HTML 4.01 Strict"></a>HTML 4.01 Strict</h3><p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p><pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code></pre><h3 id="HTML-4-01-Transitional"><a href="#HTML-4-01-Transitional" class="headerlink" title="HTML 4.01 Transitional"></a>HTML 4.01 Transitional</h3><p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。</p><pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code></pre><h3 id="HTML-4-01-Frameset"><a href="#HTML-4-01-Frameset" class="headerlink" title="HTML 4.01 Frameset"></a>HTML 4.01 Frameset</h3><p>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。</p><pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</code></pre></blockquote></li></ul></li><li><p>文档类型定义（DTD)</p><ul><li>DTD：定义合法的 XML 文档构建模块，它使用一系列合法元素来定义文档结构</li><li>HTML 中的 DTD：规定了标记语言的规则，浏览器才能正确的显示内容</li><li>HTML5 中的 DTD：HTML5 不基于 SGML，所以不需要引用 DTD</li><li>HTML 元素和文档类型：<a href="http://www.w3school.com.cn/tags/html_ref_dtd.asp" target="_blank" rel="noopener">www.w3school.com.cn/tags/html_ref_dtd.asp</a></li></ul></li></ul><h4 id="新增的标签"><a href="#新增的标签" class="headerlink" title="新增的标签"></a>新增的标签</h4><h5 id="结构标签"><a href="#结构标签" class="headerlink" title="结构标签"></a>结构标签</h5><ul><li>块状元素，有意义的 div</li></ul><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;header&gt;</code></td><td>定义了一个页面或一个头部区域</td></tr><tr><td><code>&lt;nav&gt;</code></td><td>定义导航栏链接</td></tr><tr><td><code>&lt;section&gt;</code></td><td>定义一个区域</td></tr><tr><td><code>&lt;aside&gt;</code></td><td>定义页面内容部分的侧边栏</td></tr><tr><td><code>&lt;hgroup&gt;</code></td><td>定义文件中一个区块的相关信息</td></tr><tr><td><code>&lt;figure&gt;</code></td><td>定义一组媒体内容以及他们的标题</td></tr><tr><td><code>&lt;figcaption&gt;</code></td><td>定义 figure 元素的标题</td></tr><tr><td><code>&lt;footer&gt;</code></td><td>定义一个页面或一个区域的底部</td></tr><tr><td><code>&lt;article&gt;</code></td><td>定义一篇文章</td></tr><tr><td><code>&lt;dialog&gt;</code></td><td>定义一个会话框，类似微信</td></tr></tbody></table><ul><li>标签嵌套级别：header / section / footer &gt; aside / article / figure / hgroup / nav &gt; div / figcaption</li></ul><h5 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h5><ul><li>三类媒体标签</li></ul><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;video&gt;</code></td><td>定义一个视频</td></tr><tr><td><code>&lt;audio&gt;</code></td><td>定义音频内容</td></tr><tr><td><code>&lt;source&gt;</code></td><td>定义媒体资源</td></tr><tr><td><code>&lt;canvas&gt;</code></td><td>定义画布</td></tr><tr><td><code>&lt;embed&gt;</code></td><td>定义外部的可交互的内容或插件，如：flash</td></tr></tbody></table><ul><li>默认属性：<code>controls=&quot;controls&quot; width=&quot;200px&quot; autoplay=&quot;autoplay&quot; loop=&quot;-1&quot;</code></li><li>标签的意义：多媒体标签的出现意味着富媒体的发展以及支持不使用插件的情况下操作媒体文件，极大的提高可用户体验</li></ul><h5 id="Web-应用标签"><a href="#Web-应用标签" class="headerlink" title="Web 应用标签"></a>Web 应用标签</h5><ul><li><h5 id="状态标签："><a href="#状态标签：" class="headerlink" title="状态标签："></a>状态标签：</h5><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;meter&gt;</code></td><td>状态标签（实时状态显示：气压、气温）</td></tr><tr><td><code>&lt;progress&gt;</code></td><td>状态标签（任务过程：安装、加载）</td></tr></tbody></table><ul><li>浏览器兼容：</li></ul><table><thead><tr><th>标签</th><th>兼容性</th></tr></thead><tbody><tr><td><code>&lt;meter&gt;</code></td><td>Chrome、Opera</td></tr><tr><td><code>&lt;progress&gt;</code></td><td>Chrome、FireFox、Opera</td></tr></tbody></table></li><li><h5 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h5><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;datalist&gt;</code></td><td>为 <code>input</code> 标记定义一个下拉列表，配合 <code>option</code></td></tr><tr><td><code>&lt;details&gt;</code></td><td>标记定义一个元素的详细内容，配合 <code>summary</code></td></tr></tbody></table><ul><li>浏览器兼容</li></ul><table><thead><tr><th>标签</th><th>兼容性</th></tr></thead><tbody><tr><td><code>&lt;datalist&gt;</code></td><td>FireFox、Opera</td></tr><tr><td><code>&lt;datails&gt;</code></td><td>Chrome</td></tr></tbody></table></li><li><h5 id="Menu-标签"><a href="#Menu-标签" class="headerlink" title="Menu 标签"></a>Menu 标签</h5><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;menu&gt;</code></td><td>命令列表（<strong>目前所有浏览器不支持</strong>）</td></tr><tr><td><code>&lt;menuitem&gt;</code></td><td>menu 命令列表标签（只有 FireFox8.0+ 支持）</td></tr><tr><td><code>&lt;command&gt;</code></td><td>menu 标记定义一个命令按钮（只有 IE9 支持）</td></tr></tbody></table></li></ul><h5 id="其它标签"><a href="#其它标签" class="headerlink" title="其它标签"></a>其它标签</h5><ul><li><p>注释标签</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;ruby&gt;</code></td><td>定义注释或音标</td></tr><tr><td><code>&lt;rt&gt;</code></td><td>定义对ruby的注释内容文本</td></tr><tr><td><code>&lt;rp&gt;</code></td><td>告诉不支持的浏览器如何去显示</td></tr></tbody></table></li><li><p><code>&lt;mark&gt;</code> ：定义有标记的文本（黄色选中显示）</p><ul><li>兼容IE9以上所有浏览器</li></ul></li><li><p><code>&lt;output&gt;</code> ：定义一些输出类型，计算表单结果配合 <code>oninput</code> 事件</p></li><li><p><code>&lt;keygen&gt;</code> ：定义表单里一个生成的键值（加密信息传送）</p></li><li><p><code>&lt;time&gt;</code> ：定义一个日期/事件，目前所有主流浏览器都不支持</p></li></ul><h4 id="删除的标签"><a href="#删除的标签" class="headerlink" title="删除的标签"></a>删除的标签</h4><ul><li>纯表现的元素<ul><li>basefont、big、center、font、s、strike、tt、u</li></ul></li><li>对可用性产生负面影响的元素<ul><li>frame、frameset、noframes</li></ul></li><li>产生混淆的元素<ul><li>acronym、applet、isindex、dir</li></ul></li></ul><h4 id="重定义标签"><a href="#重定义标签" class="headerlink" title="重定义标签"></a>重定义标签</h4><ul><li><p>显示不变，表达的含义进行了重新定义的标签</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;b&gt;</code></td><td>代表内联文本，通常是粗体，没有传递表示重要的意思</td></tr><tr><td><code>&lt;i&gt;</code></td><td>代表内联文本，通常是斜体，没有传递表示重要的意思</td></tr><tr><td><code>&lt;dd&gt;</code></td><td>可以同details于figure以前使用，定义包含文本，dialog也可以用</td></tr><tr><td><code>&lt;dt&gt;</code></td><td>可以同details于figure以前使用，汇总细节，dialog也可以用</td></tr><tr><td><code>&lt;hr&gt;</code></td><td>表示主题结束，而不是水平线，虽然显示相同</td></tr><tr><td><code>&lt;menu&gt;</code></td><td>重新定义用户界面菜单，配合commond或者menitem使用</td></tr><tr><td><code>&lt;small&gt;</code></td><td>表示小字体，例如打印注释或者法律条款</td></tr><tr><td><code>&lt;strong&gt;</code></td><td>表示重要性而不是强调符号</td></tr></tbody></table></li></ul><h3 id="第2课-HTML5网页布局"><a href="#第2课-HTML5网页布局" class="headerlink" title="第2课 HTML5网页布局"></a>第2课 HTML5网页布局</h3><pre><code>    HTML5网页布局    传统布局与HTML5网页布局的区别和意义，通过案例讲解如何使用HTML5搭建网页</code></pre><h4 id="传统布局与HTML5布局"><a href="#传统布局与HTML5布局" class="headerlink" title="传统布局与HTML5布局"></a>传统布局与HTML5布局</h4><h4 id="新布局的意义"><a href="#新布局的意义" class="headerlink" title="新布局的意义"></a>新布局的意义</h4><ul><li>语义化<ul><li>HTML5 可以让更语义化的结构化代码标签代替大量的无意义的 div 标签<ul><li>这种语义化特性提升了网页的质量和语义</li><li>减少了以前用于 CSS 调用的 class 和 id 属性</li></ul></li><li>对搜索引擎更友好<ul><li>新的架构标签带来的是网页布局的改变，即提升搜索引擎的友好</li></ul></li></ul></li></ul><h3 id="第3课-HTML5属性变化"><a href="#第3课-HTML5属性变化" class="headerlink" title="第3课 HTML5属性变化"></a>第3课 HTML5属性变化</h3><pre><code>    HTML5属性变化    了解这些属性带来的好处，加深对标签的认识，将提高以后的开发效率    input、表单属性、链接属性、其它属性 </code></pre><h4 id="input-属性"><a href="#input-属性" class="headerlink" title="input 属性"></a>input 属性</h4><ul><li>email 、url、number、tel ：手机端输入法有效果</li><li>Date picker 类型：<ul><li>Date：选取日、月、年</li><li>Mouth：选取月、年</li><li>Week：选取周、年</li><li>Time：选取时间（小时、分钟）</li><li>Datetime：选取时间、日、月、年（utc时间），safari opera兼容</li><li>Datetime-local：选取使时间、日、月、年（本地时间）chrome safari opera兼容</li></ul></li><li>range 类型：取值范围，<code>&lt;input type=&quot;range&quot; name=&quot;range&quot; min=&quot;1&quot; max=&quot;10&quot;&gt;</code></li><li>search 类型：带清空的输入框，<code>&lt;input type=&quot;search&quot; name=&quot;search&quot;&gt;</code></li><li>color 类型：取色器，<code>&lt;input type=&quot;color&quot; name=&quot;color&quot;&gt;</code></li></ul><h4 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h4><ul><li>autocomplete 属性：<ul><li><code>form</code> 或 <code>input</code> 域应该拥有自动完成功能</li><li><code>&lt;form autocomplete=&quot;on&quot;&gt;&lt;/form&gt;</code></li><li>autocomplete 适用于 <code>&lt;form&gt;</code> 标签，以及以下类型的 <code>&lt;input&gt;</code> 标签：<ul><li>text、search、url、telephone、email、password、datepickers、range、color</li></ul></li></ul></li><li><code>autofocus=&quot;autofocus&quot;</code> 属性：<ul><li>页面加载时，域自动获得焦点</li><li><code>&lt;input type=&quot;text autofocus=&quot;autofocus&quot;&gt;</code></li><li>适用于所有 input 标签</li></ul></li><li>multiple 属性：<ul><li>规定输入域中可以选择多个值</li><li><code>&lt;input type=&quot;text multiple=&quot;multiple&quot;&gt;</code></li><li>适用于email、file类型 input标签</li></ul></li><li>placeholder 属性：<ul><li>提供一种提示（hint），描述输入域所期待的值</li><li><code>&lt;input type=&quot;search&quot; placeholder=&quot;Search Content&quot;</code></li><li>适用于 input 标签 type 属性为：<ul><li>text、search、url、telephone、email、password</li></ul></li></ul></li><li>required 属性：<ul><li>规定必须在提交之前填写输入域（不能为空）</li><li><code>&lt;input type=&quot;text&quot; required=&quot;required&quot;&gt;</code></li><li>适用于 input 标签 type 属性为：<ul><li>text、search、url、telephone、email、password、date pinckers、number、checkbox、radio、file</li></ul></li></ul></li></ul><h4 id="链接属性"><a href="#链接属性" class="headerlink" title="链接属性"></a>链接属性</h4><ul><li><code>&lt;link&gt;</code> 的 <code>sizes</code> 属性：<ul><li><code>&lt;link rel=&quot;icon&quot; href=&quot;icon.gif&quot; type=&quot;image/gif&quot; sizes=&quot;16x16&quot;&gt;</code></li></ul></li><li><code>&lt;base&gt;</code> 的 <code>target</code> 属性 ：<ul><li><code>&lt;base href=&quot;http://localhost/&quot; target=&quot;_blank&quot;&gt;</code></li></ul></li><li>超链接<code>&lt;a&gt;</code> 属性：<ul><li><code>a:meida=&quot;&quot;</code>：表示对设备进行优化，<code>handhelp</code> 对手持设备支持，<code>tv</code> 对电视设备支持</li><li><code>a:hreflang=&quot;zh&quot;</code>：设置语言，这里表示中文</li><li><code>a:rel=&quot;external&quot;</code>：设置超链接的引用，这里表示外部链接</li></ul></li></ul><h4 id="其它属性"><a href="#其它属性" class="headerlink" title="其它属性"></a>其它属性</h4><ul><li>script 标签<ul><li>defer：加载完脚本后并不执行，而是等整个页面加载完之后再执行<ul><li><code>&lt;script defer src=&quot;url&quot;&gt;&lt;/script&gt;</code></li><li>原来只兼容IE，现在已经兼容所有浏览器</li></ul></li><li>async：加载完脚本后立即执行，不用等整个页面加载完，属于异步执行<ul><li><code>&lt;script async src=&quot;url&quot;&gt;&lt;/script&gt;</code></li><li>兼容所有浏览器</li></ul></li></ul></li><li>ol 标签<ul><li>Start：有序列表起始位置</li><li>Reserved：有序列表倒叙</li></ul></li><li>html 标签<ul><li>manifest=”cache.manifest” <ul><li>定义页面离线应用文件</li><li><code>&lt;html manifest=&quot;cache.manifest&quot;</code></li></ul></li></ul></li><li>style 标签<ul><li>scoped：内嵌 CSS</li><li><code>&lt;style scoped&gt; &lt;/style&gt;</code></li></ul></li></ul><h2 id="步骤2-搞懂CSS3"><a href="#步骤2-搞懂CSS3" class="headerlink" title="步骤2: 搞懂CSS3"></a>步骤2: 搞懂CSS3</h2><pre><code>本阶段内容主要涵盖CSS3选择器、边框、圆角、背景、渐变、转换、过渡、动画等知识。通过本阶段学习，大家将能够更加准确的控制页面的布局等样式效果，实现非常炫酷的CSS3动画特效，让网页丰富多彩。</code></pre><h3 id="点击去GitHub查看完整版"><a href="#点击去GitHub查看完整版" class="headerlink" title="点击去GitHub查看完整版"></a><a href="https://github.com/Eished/HTML5-CSS-JS-BS-jQ-CJS-TS_notes/blob/master/HTML5-imooc.md" target="_blank" rel="noopener">点击去GitHub查看完整版</a></h3><h2 id="步骤5-项目实战"><a href="#步骤5-项目实战" class="headerlink" title="步骤5: 项目实战"></a>步骤5: 项目实战</h2><pre><code>    光学不练假把式，实践是巩固知识最好的方法，本环节，将带领大家一步步开发出炫酷的动态网页，让大家能够从实践中总结经验，并且提升解决问题的能力。</code></pre><h3 id="点击去GitHub查看完整版-1"><a href="#点击去GitHub查看完整版-1" class="headerlink" title="点击去GitHub查看完整版"></a><a href="https://github.com/Eished/HTML5-CSS-JS-BS-jQ-CJS-TS_notes/blob/master/HTML5-imooc.md" target="_blank" rel="noopener">点击去GitHub查看完整版</a></h3>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js从零开发web server博客项目</title>
      <link href="/2020/06/03/node-js-da-jian-bo-ke/"/>
      <url>/2020/06/03/node-js-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js从零开发web-server博客项目"><a href="#Node-js从零开发web-server博客项目" class="headerlink" title="Node.js从零开发web server博客项目"></a>Node.js从零开发web server博客项目</h1><blockquote><p><strong>篇幅过长, 仅展示目录和部分代码</strong></p></blockquote><h1 id="点击去GitHub查看完整版"><a href="#点击去GitHub查看完整版" class="headerlink" title="点击去GitHub查看完整版"></a><a href="https://github.com/Eished/node_blog_notes" target="_blank" rel="noopener">点击去GitHub查看完整版</a></h1><h2 id="开发接口（不用框架）"><a href="#开发接口（不用框架）" class="headerlink" title="开发接口（不用框架）"></a>开发接口（不用框架）</h2><h3 id="http请求概述"><a href="#http请求概述" class="headerlink" title="http请求概述"></a>http请求概述</h3><ul><li>DNS 解析，建立 TCP 连接，发送 http 请求</li><li>server 接收到 http 请求，处理并返回数据</li><li>客户端接收到返回数据，处理数据（例如渲染、执行JS）</li></ul><h3 id="Node-js-处理http-请求"><a href="#Node-js-处理http-请求" class="headerlink" title="Node.js 处理http 请求"></a>Node.js 处理http 请求</h3><ul><li>get 请求和 querystring</li><li>post 请求和 postdata</li><li>路由（接口、地址）</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浏览器访问 http://localhost:8000/</span></code></pre><h4 id="Node-js-处理-get-请求"><a href="#Node-js-处理-get-请求" class="headerlink" title="Node.js 处理 get 请求"></a>Node.js 处理 get 请求</h4><ul><li>get  请求，客户端向 server 端获取数据，如查询博客列表</li><li>通过 querystring 来传递数据，如 a.html?a=100&amp;b=200</li><li>浏览器直接访问，发送 get 请求</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//GET</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url <span class="token comment" spellcheck="true">//获取请求的完整 URL</span>    <span class="token comment" spellcheck="true">//关键解析[0]是'?'前的内容, [1]是'?'后内容</span>    req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将 querystring 返回</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浏览器访问 http://localhost:8000/</span></code></pre><h4 id="Node-js-处理-post-请求"><a href="#Node-js-处理-post-请求" class="headerlink" title="Node.js 处理 post 请求"></a>Node.js 处理 post 请求</h4><ul><li>post 请求，即客户端要像服务端传递数据，如新建博客</li><li>通过 post data 传递数据，后面解释</li><li>浏览器无法直接模拟，需要手写JS，或者使用 postman app</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// POST 必须大写</span>        <span class="token comment" spellcheck="true">//数据格式</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'content-type: '</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//接收数据</span>        <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">//开始接收数据</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//结束数据接收</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span>， <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'postData:'</span><span class="token punctuation">,</span> postData<span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在这里返回，因为是异步</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span></code></pre><h4 id="Node-js-处理路由"><a href="#Node-js-处理路由" class="headerlink" title="Node.js 处理路由"></a>Node.js 处理路由</h4><ul><li><code>https://github.com/username/xxx</code> 每个斜线后面的唯一标识就是路由</li></ul><h4 id="Node-js-综合应用"><a href="#Node-js-综合应用" class="headerlink" title="Node.js 综合应用"></a>Node.js 综合应用</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    <span class="token keyword">const</span> path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//重点：split('?'[0])语法弄清楚</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//设置返回值格式为 JSON</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回的数据</span>    <span class="token keyword">const</span> resData <span class="token operator">=</span> <span class="token punctuation">{</span>        method<span class="token punctuation">,</span>        url<span class="token punctuation">,</span>        path<span class="token punctuation">,</span>        query    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">//res.on('data')指每次发送的数据</span>        <span class="token comment" spellcheck="true">//chunk 逐步接收数据 req绑定一个data方法 chunk是变量</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//req.on(end)数据发送完成；</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'postData:'</span><span class="token punctuation">,</span> postData<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resData:'</span><span class="token punctuation">,</span> resData<span class="token punctuation">)</span>            resData<span class="token punctuation">.</span>postData <span class="token operator">=</span> postData            <span class="token comment" spellcheck="true">//返回</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span></code></pre><h3 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h3><ul><li>从零搭建，不使用框架</li><li>使用 nodemon 监测文件变化，自动重启 node</li><li>使用 cross-env 设置环境变量，兼容Mac Linux 和 Windows</li><li>配置完后使用 <code>$ npm run dev</code> 命令启动项目</li></ul><h4 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h4><p><strong>使用npm安装上述插件，设置npm镜像源</strong></p><ol><li><p>查看npm源地址<br> <code>npm config list</code></p></li><li><p>结果:<br> <code>metrics-registry = &quot;http://registry.npm.taobao.org/&quot;</code></p></li><li><p>修改registry地址，比如修改为淘宝镜像源。<br> <code>npm set registry https://registry.npm.taobao.org/</code><br> 如果有一天你肉身FQ到国外，用不上了，用rm命令删掉它<br> <code>npm config rm registry</code></p></li><li><p><code>npm install -g nodemon</code></p></li><li><p><code>npm install -g cross-env</code></p></li></ol><p><strong>新建文件夹blog_1，在里面新建bin文件夹和app.js，在bin里面新建<a href="http://www.js文件" target="_blank" rel="noopener">www.js文件</a></strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// package.json 代码 注意： =不能有空格</span><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"blog_1"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"www.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NODE_ENV=dev nodemon ./bin/www.js"</span><span class="token punctuation">,</span>    <span class="token string">"prd"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NODE_ENV=production nodemon ./bin/www.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./bin/www.js 代码</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> PORT <span class="token operator">=</span> <span class="token number">300</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../app'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>serverHandle<span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js 代码</span><span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/user'</span><span class="token punctuation">)</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置返回值格式 JSON</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// const resData = {</span>    <span class="token comment" spellcheck="true">//     name: 'zhang',</span>    <span class="token comment" spellcheck="true">//     site: 'imooc',</span>    <span class="token comment" spellcheck="true">//     env: process.env.NODE_ENV</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// res.end(</span>    <span class="token comment" spellcheck="true">//     JSON.stringify(resData)</span>    <span class="token comment" spellcheck="true">// )</span>    <span class="token comment" spellcheck="true">//处理 blog 路由</span>    <span class="token keyword">const</span> blogData <span class="token operator">=</span> <span class="token function">handleBlogRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>blogData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>blogData<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理 user 路由</span>    <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token function">handleUserRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//未命中路由，返回404</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found\n"</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> serverHandle</code></pre><h3 id="开发接口"><a href="#开发接口" class="headerlink" title="开发接口"></a>开发接口</h3><h4 id="初始化路由"><a href="#初始化路由" class="headerlink" title="初始化路由"></a>初始化路由</h4><ul><li>初始化路由：根据之前设计方案，做出路由</li><li>返回假数据：将路由和数据处理分离，以符合设计原则</li></ul><h4 id="接口设计方案"><a href="#接口设计方案" class="headerlink" title="接口设计方案"></a>接口设计方案</h4><table><thead><tr><th>描述</th><th>接口</th><th>方法</th><th>url参数</th><th>备注</th></tr></thead><tbody><tr><td>获取博客列表</td><td>/api/blog/list</td><td>get</td><td>author 作者，keyword 搜索关键字</td><td>参数为空则不进行查询过滤</td></tr><tr><td>获取一篇博客的内容</td><td>/api/blog/detail</td><td>get</td><td>id</td><td></td></tr><tr><td>新增一篇博客</td><td>/api/blog/new</td><td>post</td><td></td><td>post 中有新增的信息</td></tr><tr><td>更新一篇博客</td><td>/api/blog/update</td><td>post</td><td>id</td><td>postData 中有更新信息</td></tr><tr><td>删除一篇博客</td><td>/api/blog/del</td><td>post</td><td>id</td><td></td></tr><tr><td>登录</td><td>/api/user/login</td><td>post</td><td></td><td>postData 中有用户名和密码</td></tr></tbody></table><p>具体代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/router/user.js</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token comment" spellcheck="true">//登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'这是登录的接口'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleUserRouter<span class="token comment" spellcheck="true">// ./src/router/blog.js</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token comment" spellcheck="true">//登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'这是登录的接口'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleUserRouter</code></pre><h4 id="开发路由-博客列表"><a href="#开发路由-博客列表" class="headerlink" title="开发路由 博客列表"></a>开发路由 博客列表</h4><ol><li><p>业务分层 拆分业务</p><ul><li>createServer 业务单独放在 <code>./bin/www.js</code></li><li>系统基本设置、基本信息 <code>app.js</code> 放在根目录</li><li>路由功能 <code>./src/router/xxx.js</code></li><li>数据管理 <code>./src/contoller/xxx.js</code></li><li>数据处理</li></ul></li><li><p>博客列表代码</p></li></ol><h4 id="开发路由-博客详情"><a href="#开发路由-博客详情" class="headerlink" title="开发路由 博客详情"></a>开发路由 博客详情</h4><ul><li><p>博客代码同上一章</p></li><li><p>使用 promise 读取文件，避免 callback-hell</p></li></ul><h4 id="开发路由-（处理POSTData）"><a href="#开发路由-（处理POSTData）" class="headerlink" title="开发路由 （处理POSTData）"></a>开发路由 （处理POSTData）</h4><h4 id="开发路由-（新建和更新博客路由）"><a href="#开发路由-（新建和更新博客路由）" class="headerlink" title="开发路由 （新建和更新博客路由）"></a>开发路由 （新建和更新博客路由）</h4><h4 id="开发路由-（删除博客路由和登录博客路由）"><a href="#开发路由-（删除博客路由和登录博客路由）" class="headerlink" title="开发路由 （删除博客路由和登录博客路由）"></a>开发路由 （删除博客路由和登录博客路由）</h4><ul><li><p><strong>删除博客</strong></p></li><li><p><strong>登录博客</strong></p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>node.js 处理 http 请求的常用技能，postman 的使用</p></li><li><p>node.js 开发博客项目的接口（未连接数据库，未登录使用）</p></li><li><p>为何要将 router 和 controller 分开？</p></li><li><p>路由和  API 区别：</p><ul><li>API ：前后端、不同端（子系统）之间对接的通用术语</li><li>路由：系统内部的接口定义，是 API 的一部分</li></ul></li></ul><h2 id="使用MySQL数据库"><a href="#使用MySQL数据库" class="headerlink" title="使用MySQL数据库"></a>使用MySQL数据库</h2><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><p><strong>讲解步骤：</strong></p><ol><li><p>MySQL 的介绍、安装和使用</p></li><li><p>node.js 连接 MySQL</p></li><li><p>API 连接 MySQL</p></li></ol><p>为什么使用MySQL？</p><ul><li>MySQL 最常用，有专人运维</li><li>MySQL 有问题可以随时查到</li><li>MySQL 本身是复杂的，本课只讲使用</li></ul><h4 id="MySQL-介绍："><a href="#MySQL-介绍：" class="headerlink" title="MySQL 介绍："></a>MySQL 介绍：</h4><ul><li>web server 中最流行的关系型数据库</li><li>免费下载学习</li><li>轻量级，易学易用</li></ul><p>MySQL 下载： <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a> </p><h4 id="MySQL-安装："><a href="#MySQL-安装：" class="headerlink" title="MySQL 安装："></a>MySQL 安装：</h4><ul><li>解压，打开根目录初始化<code>my.ini</code> 文件， 自行创建在安装根目录下创建<code>my.ini</code></li></ul><pre class=" language-ini"><code class="language-ini"><span class="token selector">  [mysqld]</span>  # 设置3306端口<span class="token constant">  port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span>  # 设置mysql的安装目录<span class="token constant">  basedir</span><span class="token attr-value"><span class="token punctuation">=</span>C:\Program Files\MySQL</span>  # 设置mysql数据库的数据的存放目录<span class="token constant">  datadir</span><span class="token attr-value"><span class="token punctuation">=</span>C:\Program Files\MySQL\Data</span>  # 允许最大连接数<span class="token constant">  max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span>  # 允许连接失败的次数。<span class="token constant">  max_connect_errors</span><span class="token attr-value"><span class="token punctuation">=</span>10</span>  # 服务端使用的字符集默认为utf8mb4<span class="token constant">  character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8mb4</span>  # 创建新表时将使用的默认存储引擎<span class="token constant">  default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span>  # 默认使用“mysql_native_password”插件认证  #mysql_native_password<span class="token constant">  default_authentication_plugin</span><span class="token attr-value"><span class="token punctuation">=</span>mysql_native_password</span><span class="token selector">  [mysql]</span>  # 设置mysql客户端默认字符集<span class="token constant">  default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8mb4</span><span class="token selector">  [client]</span>  # 设置mysql客户端连接服务端时默认使用的端口<span class="token constant">  port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span><span class="token constant">  default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8mb4</span></code></pre><p>   配置文件中的路径要和实际存放的路径一致（要手动创建Data文件夹） </p><ul><li><p>打开系统设置，配置环境变量 ` Path = ‘解压目录’\bin</p></li><li><p>初始化安装：<code>mysqld --initialize --console</code></p><p>注意输出信息：<code>root @ localhost：后面是初始密码（不含首位空格）</code>，后续登录需要用到，复制密码先保存起来</p></li><li><p>安装MySQL 服务：<code>mysqld --install[服务名]</code> 不填默认<code>mysql</code></p></li><li><p>启动MySQL：<code>net start mysql</code></p></li></ul><h4 id="使用官方客户端管理mysql"><a href="#使用官方客户端管理mysql" class="headerlink" title="使用官方客户端管理mysql"></a>使用官方客户端管理mysql</h4><ul><li><p>Wrokbench 下载地址：<a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/</a></p></li><li><p>默认安装，打开后输入之前保存的默认密码登录</p></li><li><p>弹出修改密码界面，修改密码再登录</p></li></ul><h3 id="MySQL基本使用"><a href="#MySQL基本使用" class="headerlink" title="MySQL基本使用"></a>MySQL基本使用</h3><h4 id="根据需求设计表"><a href="#根据需求设计表" class="headerlink" title="根据需求设计表"></a>根据需求设计表</h4><p>users：</p><table><thead><tr><th align="center">id</th><th align="center">username</th><th align="center">password</th><th align="center">realname</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">zhangsan</td><td align="center">123</td><td align="center">张三</td></tr><tr><td align="center">2</td><td align="center">lisi</td><td align="center">1234</td><td align="center">李四</td></tr></tbody></table><p>blogs：</p><table><thead><tr><th align="center">id</th><th align="center">title</th><th align="center">content</th><th align="center">createtime</th><th align="center">author</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">标题A</td><td align="center">内容A</td><td align="center">1573989043149</td><td align="center">zhangsan</td></tr><tr><td align="center">2</td><td align="center">标题B</td><td align="center">内容B</td><td align="center">1573989111301</td><td align="center">lisi</td></tr></tbody></table><h4 id="MySQL语法和操作"><a href="#MySQL语法和操作" class="headerlink" title="MySQL语法和操作"></a>MySQL语法和操作</h4><p>右键表 <code>Drop table</code> 删除</p><p>右键表 <code>Alter table</code> 修改</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>如何建库、如何建表</li><li>建表时常用数据类型（ int bigint varchar longtext）</li><li>SQL 语句实现增删改查</li></ul><h3 id="Node-js-操作-MySQL"><a href="#Node-js-操作-MySQL" class="headerlink" title="Node.js 操作 MySQL"></a>Node.js 操作 MySQL</h3><ol><li><p>示例：用 demo 演示 Node.js 操作 MySQL</p></li><li><p>封装：将其封装为系统可用的工具</p></li><li><p>使用：让 API 直接操作 MySQL</p></li></ol><h4 id="Node-js-操作-MySQL-demo"><a href="#Node-js-操作-MySQL-demo" class="headerlink" title="Node.js 操作 MySQL demo"></a>Node.js 操作 MySQL demo</h4><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li>Node.js 连接 MySQL，如何执行 sql 语句</li><li>根据 NODE_ENV 区分设置</li><li>封装 exec 函数，API 使用 exec 操作数据库</li></ul><h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><ul><li>核心：登录校验 &amp; 登录信息存储</li><li>为何只讲登录，不讲注册？<ul><li>注册复杂程度低，涉及内容少</li><li>登录有统一解决方案</li></ul></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li>什么是 Cookie</li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul><li>Cookie 存放信息非常危险</li><li>如何解决：cookie 中存储 userId， server 端对应 username</li><li>解决方案：session ，即 server 端储存用户信息</li></ul><p><strong>当前代码 session 代码的问题</strong></p><ul><li>session 是 JS 变量，放在 Node.js 进程内存中</li><li>进程内存有限，访问量过大，内存暴增怎么办？</li><li>正式上线是多进程，进程之间内存无法共享</li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="Redis-特点"><a href="#Redis-特点" class="headerlink" title="Redis 特点"></a>Redis 特点</h4><ul><li>Web Server 最常用的缓存数据库，数据储存在内存中</li><li>相比于 MySQL ，访问速度极快</li><li>成本更高，储存空间小</li><li>将 Web Server 和 Redis 拆分为两个单独服务</li><li>双方独立，可扩展</li><li>像 MySQL 一样</li></ul><h4 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h4><ul><li>Windows <a href="http://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-install.html</a></li><li>Mac 使用 brew install redis</li></ul><p>打开系统设置，配置环境变量  <code>Path = C:\Program Files\Redis</code></p><h3 id="开发登录-前端联调"><a href="#开发登录-前端联调" class="headerlink" title="开发登录 前端联调"></a>开发登录 前端联调</h3><ul><li>登录依赖 Cookie，必须用浏览器</li><li>Cookie 跨域不共享，前端和 server 端必须同域</li><li>需要用到 Nginx 做代理，让前后端共域</li></ul><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><ul><li>IO 操作的性能瓶颈<ul><li>IO 包括 “网络 IO” 和 “文件 IO”</li><li>相对于 CPU 计算和内存读写， IO 的突出特点就是：慢</li><li>如何在有限的硬件资源下提高 IO 的操作效率</li></ul></li></ul><h3 id="写日志"><a href="#写日志" class="headerlink" title="写日志"></a>写日志</h3><h3 id="日志拆分"><a href="#日志拆分" class="headerlink" title="日志拆分"></a>日志拆分</h3><ul><li>日志内容会慢慢积累，放在一个文件中不好处理</li><li>按时间划分日志文件，如 2019-02-10.access.log</li><li>实现方式：Linux 的 crontab 命令，即定时任务</li></ul><h4 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab"></a>Crontab</h4><ul><li><p>设置定时任务，格式：<code>***** command</code> </p><pre><code>  *分钟*小时*天*月*星期 command脚本命令</code></pre><pre><code></code></pre></li><li><p>将 access.log 拷贝并重命名为 2019-02-10.access.log </p><ul><li>清空 access.log 文件，继续积累日志<pre><code></code></pre></li></ul></li></ul><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li>日志对 server 的重要性</li><li>IO 性能瓶颈，使用 stream 提高性能， node.js 中如何操作</li><li>使用 Crontab 拆分日志，使用 readline 分析日志内容</li></ul><h2 id="Web-安全"><a href="#Web-安全" class="headerlink" title="Web 安全"></a>Web 安全</h2><h3 id="常见安全问题和解决方案"><a href="#常见安全问题和解决方案" class="headerlink" title="常见安全问题和解决方案"></a>常见安全问题和解决方案</h3><ul><li>SQL 注入：窃取数据库内容</li><li>XSS攻击：窃取前端的 Cookie 内容</li><li>密码加密：保障用户信息安全（重要）</li><li>Server 端攻击方式非常多，预防手段也非常多</li><li>本科只讲常见的、能通过 Web Server ( Node.js ) 层面预防的</li><li>有些攻击需要<strong>硬件和服务</strong>来支持（需要 OP 支持），如 DDOS</li></ul><h4 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h4><ul><li>最原始、最简单的攻击，从有了 Web2.0 就有了 SQL 注入攻击</li><li>攻击方式：输入一个 SQL 片段，最终拼接成一段攻击代码</li><li>预防措施：使用 MySQL　的 escape 函数处理输入数据内容即可</li></ul><h3 id="不用框架开发博客总结"><a href="#不用框架开发博客总结" class="headerlink" title="不用框架开发博客总结"></a>不用框架开发博客总结</h3><h4 id="主要课程"><a href="#主要课程" class="headerlink" title="主要课程"></a>主要课程</h4><ol><li>处理 Http 接口</li><li>连接数据库</li><li>实现登录</li><li>安全</li><li>日志</li><li>上线（最后一起讲）</li></ol><h4 id="Server-和前端区别"><a href="#Server-和前端区别" class="headerlink" title="Server 和前端区别"></a>Server 和前端区别</h4><ul><li>服务稳定性（zui后讲）</li><li>内存 CPU （优化 扩展）</li><li>日志记录</li><li>安全（包括登录验证）</li><li>集群和服务拆分</li></ul><h4 id="下一步要怎么做"><a href="#下一步要怎么做" class="headerlink" title="下一步要怎么做"></a>下一步要怎么做</h4><ul><li>不使用框架开发，从零开始，关注底层 API</li><li>很琐碎、复杂，没有标准，很容易写乱</li><li>适合学习，但不适合应用，接下来开始 Express 和 Koa2</li></ul><h2 id="Express-框架"><a href="#Express-框架" class="headerlink" title="Express 框架"></a>Express 框架</h2><h3 id="Express-介绍"><a href="#Express-介绍" class="headerlink" title="Express 介绍"></a>Express 介绍</h3><ul><li>Express 是 Node.js 最常用的 Web Server 框架</li><li>什么是框架？</li><li>不要以为 Express 框架过时了</li></ul><p>目录</p><ul><li>Express 下载、安装和使用，了解 Express 中间件机制</li><li>开发接口、连接数据库、实现登录、记录日志</li><li>分析 Express 中间件原理</li></ul><p>介绍 Express </p><ul><li>安装（使用脚手架 Express-grnerator）</li><li>初始化代码介绍，处理路由</li><li>使用中间件</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><ul><li>使用框架开发的好处（相比之前不使用框架）</li><li>express 的使用和路由处理，以及操作 session redis 日志等</li><li>express 中间件的使用和原理</li></ul><h4 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h4><ul><li>JS 的异步回调带来了很多问题，Promise 也不能解决所有</li><li>Node.js 已经支持 async/await 语法，要用起来</li><li>Ko2 也已经原生支持 async/await 语法，接下来讲解</li></ul><h2 id="Koa2-框架"><a href="#Koa2-框架" class="headerlink" title="Koa2 框架"></a>Koa2 框架</h2><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><ul><li>使用 async/await 的好处</li><li>koa2 的使用，以及如何操作 session redis 日志</li><li>koa2 中间件的使用和原理</li></ul><p>下一步：</p><ul><li>一直处于开发环境，和前端联调过，但从未上线</li><li>如何实现线上服务稳定性？PM2 是什么？</li><li>nginx 在线上环境扮演了什么重要作用？</li></ul><h2 id="线上环境"><a href="#线上环境" class="headerlink" title="线上环境"></a>线上环境</h2><ul><li>服务器稳定性</li><li>充分利用服务器硬件资源，以便提高性能</li><li>线上日志记录</li></ul><p>PM2 功能：</p><ul><li>进程守护，系统崩溃自动重启</li><li>启动多进程，充分利用 CPU 和内存</li><li>自带日志记录功能</li></ul><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><ul><li>为何使用多进程？<ul><li>回顾之前讲 session 时说过， 操作系统限制一个进程的内存</li><li>内存：无法充分利用机器全部内存</li><li>CPU：无法充分利用多核CPU</li></ul></li><li>多进程和 redis<ul><li>多进程之间，内存无法共享</li><li>多进程访问一个 redis ，实现数据共享</li></ul></li></ul><h4 id="关于服务器运维"><a href="#关于服务器运维" class="headerlink" title="关于服务器运维"></a>关于服务器运维</h4><ul><li>服务器运维，一般都由专业的 OP 人员和部门来处理</li><li>大公司都有自己的运维团队</li><li>中小型工期推荐使用一些云服务，如阿里云的 node 平台</li></ul><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><ul><li>PM2 的核心价值</li><li>PM2 的常用命令和配置，日志记录</li><li>多进程</li></ul><h2 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h2>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.5从零基础入门到实战项目开发去哪儿网App</title>
      <link href="/2020/06/02/vue2-5-cong-ling-ji-chu-ru-men-dao-shi-zhan-xiang-mu-kai-fa-qu-na-er-wang-app/"/>
      <url>/2020/06/02/vue2-5-cong-ling-ji-chu-ru-men-dao-shi-zhan-xiang-mu-kai-fa-qu-na-er-wang-app/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Eished/vue-travel" target="_blank" rel="noopener">项目代码</a></p><h1 id="第1章-课程介绍"><a href="#第1章-课程介绍" class="headerlink" title="第1章 课程介绍"></a>第1章 课程介绍</h1><pre><code>本章主要介绍课程的知识大纲，学习前提，讲授方式及预期收获。</code></pre><h2 id="1-1-课程简介"><a href="#1-1-课程简介" class="headerlink" title="1-1 课程简介"></a>1-1 课程简介</h2><h3 id="课程流程"><a href="#课程流程" class="headerlink" title="课程流程"></a>课程流程</h3><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128143531674.png" alt="image-20200128143518066"></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128143531674.png" alt="image-20200128143531674"></p><h3 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h3><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128143728763.png" alt="image-20200128143728763"></p><h3 id="学习前提"><a href="#学习前提" class="headerlink" title="学习前提"></a>学习前提</h3><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128143807549.png" alt="image-20200128143807549"></p><h3 id="讲授方式"><a href="#讲授方式" class="headerlink" title="讲授方式"></a>讲授方式</h3><ol><li>通俗易懂的案例讲解</li><li>借助基础知识实现项目</li><li>带着你编写每一行代码</li><li>图文讲解复杂知识点</li></ol><h3 id="课程收获"><a href="#课程收获" class="headerlink" title="课程收获"></a>课程收获</h3><ol><li>彻底入门Vue的使用</li><li>理解整个Vue项目的开发流程</li><li>移动端页面布局技巧</li><li>上手中型Vue项目的开发</li><li>规范的代码编写</li></ol><h1 id="第2章-Vue-起步"><a href="#第2章-Vue-起步" class="headerlink" title="第2章 Vue 起步"></a>第2章 Vue 起步</h1><pre><code>本章将快速讲解部分 Vue 基础语法，通过 TodoList 功能的编写，在熟悉基础语法的基础上，扩展解析 MVVM 模式及前端组件化的概念及优势。</code></pre><h2 id="2-1-课程学习方法"><a href="#2-1-课程学习方法" class="headerlink" title="2-1 课程学习方法"></a>2-1 课程学习方法</h2><blockquote><p>官方文档:</p><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p></blockquote><ul><li>基于官方文档<ul><li>视频学习后看官方文档</li></ul></li></ul><h2 id="2-2-hello-world"><a href="#2-2-hello-world" class="headerlink" title="2-2 hello world"></a>2-2 hello world</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// document.getElementById('app').innerHTML = 'Hello world'</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">'Hello world'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      app<span class="token punctuation">.</span>$data<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">'hi bye'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-3-开发TodoList（v-model、v-for、v-on）"><a href="#2-3-开发TodoList（v-model、v-for、v-on）" class="headerlink" title="2-3 开发TodoList（v-model、v-for、v-on）"></a>2-3 开发TodoList（v-model、v-for、v-on）</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleBtnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'第一课的内容'</span><span class="token punctuation">,</span> <span class="token string">'第二课的内容'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        inputValue<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-4-MVVM模式"><a href="#2-4-MVVM模式" class="headerlink" title="2-4 MVVM模式"></a>2-4 MVVM模式</h2><p><strong>传统的 MVP 设计模式</strong></p><ul><li>Model : 数据层</li><li>Presenter : 呈现层, 业务逻辑</li><li>View : 视图层, DOM 展示</li></ul><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128165658026.png" alt="image-20200128165658026"></p><ul><li><p>实例: </p><ul><li>80% 代码在操作 DOM</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TodoList JQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./jquery1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// M (模型层) V 视图 P(控制器)</span>    <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Page<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>      init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bindEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      bindEvents<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span>        btn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> $<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      handleBtnClick<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> inputElm <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#input"</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> inputValue <span class="token operator">=</span> inputElm<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> ulElem <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span>        ulElem<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;li>'</span> <span class="token operator">+</span> inputValue <span class="token operator">+</span> <span class="token string">'&lt;/li>'</span><span class="token punctuation">)</span>        inputElm<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    page<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><p><strong>MVVM 设计模式</strong></p><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128172339251.png" alt="image-20200128172339251"></p><ul><li>只要操作 Model 层和 View 层</li><li>Vue 自动帮我们操作 ViewModel 层<ul><li>通过 Object.defineProperties 和 虚拟 DOM 实现</li></ul></li></ul><h2 id="2-5-前端组件化"><a href="#2-5-前端组件化" class="headerlink" title="2-5 前端组件化"></a>2-5 前端组件化</h2><ul><li>每个组件就是页面的一个区域</li></ul><h2 id="2-6-使用组件改造TodoList"><a href="#2-6-使用组件改造TodoList" class="headerlink" title="2-6 使用组件改造TodoList"></a>2-6 使用组件改造TodoList</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleBtnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- &lt;li v-for="item in list">{{item}}&lt;/li> --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// // 全局组件</span>    <span class="token comment" spellcheck="true">// Vue.component("TodoItem", {</span>    <span class="token comment" spellcheck="true">//   props: ['content'], // 接收 v-bind:content 传递的值</span>    <span class="token comment" spellcheck="true">//   template: "&lt;li>{{content}}&lt;/li>" // 模板内使用字符串</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token keyword">var</span> TodoItem <span class="token operator">=</span> <span class="token punctuation">{</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">"&lt;li>{{content}}&lt;/li>"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        TodoItem<span class="token punctuation">:</span> TodoItem <span class="token comment" spellcheck="true">// 注册局部组件</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'第一课的内容'</span><span class="token punctuation">,</span> <span class="token string">'第二课的内容'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        inputValue<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-7-简单的组件间传值"><a href="#2-7-简单的组件间传值" class="headerlink" title="2-7 简单的组件间传值"></a>2-7 简单的组件间传值</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleBtnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- &lt;li v-for="item in list">{{item}}&lt;/li> --></span>      <span class="token comment" spellcheck="true">&lt;!-- v-bind: 可以简写为: --></span>      <span class="token comment" spellcheck="true">&lt;!-- v-on: 可以简写为@ --></span>      <span class="token comment" spellcheck="true">&lt;!-- @delete="handleItemDelete" 监听 $emit 传递的 delete 事件 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">@delete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleItemDelete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// // 全局组件</span>    <span class="token comment" spellcheck="true">// Vue.component("TodoItem", {</span>    <span class="token comment" spellcheck="true">//   props: ['content'], // 接收 v-bind:content 传递的值</span>    <span class="token comment" spellcheck="true">//   template: "&lt;li>{{content}}&lt;/li>" // 模板内使用字符串</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token keyword">var</span> TodoItem <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 父组件向子组件传值, v-bind: 发送和 props 接收</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">"&lt;li @click='handleItemClick'>{{content}}&lt;/li>"</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handleItemClick<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// $emit 向外触发事件; 父组件监听此事件传值</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        TodoItem<span class="token punctuation">:</span> TodoItem <span class="token comment" spellcheck="true">// 注册局部组件</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'第一课的内容'</span><span class="token punctuation">,</span> <span class="token string">'第二课的内容'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        inputValue<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handleBtnClick<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        handleItemDelete<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-8-章节小结"><a href="#2-8-章节小结" class="headerlink" title="2-8 章节小结"></a>2-8 章节小结</h2><p>作业: 仔细阅读Vue介绍部分文档, 查漏补缺</p><ol><li><p><code>v-bind</code> attribute 被称为<strong>指令</strong></p></li><li><p><code>app3.seen = false</code> : 显示或隐藏元素</p></li><li><p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表</p><ul><li><code>v-for=&quot;todo in todos&quot;</code></li></ul></li><li><p><code>v-on</code> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法</p><ul><li><code>v-on:click=&quot;reverseMessage&quot;</code></li></ul></li><li><p><code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> app6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app-6'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>组件系统允许我们使用小型、独立和通常可复用的组件构建大型应用。几乎任意类型的应用界面都可以抽象为一个组件树：</p><ul><li><p>一个组件本质上是一个拥有预定义选项的一个 Vue 实例。</p></li><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义名为 todo-item 的新组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;li>这是个待办项&lt;/li>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul></li></ol><p>   <img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/components.png" alt="Component Tree"></p><ol start="7"><li>子单元通过 prop 接口与父单元进行了良好的解耦。</li></ol><h1 id="点击去GitHub查看完整版"><a href="#点击去GitHub查看完整版" class="headerlink" title="点击去GitHub查看完整版"></a><a href="https://github.com/Eished/Vue_notes" target="_blank" rel="noopener">点击去GitHub查看完整版</a></h1>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ES6-10语法</title>
      <link href="/2020/06/02/javascript-es6-10/"/>
      <url>/2020/06/02/javascript-es6-10/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-课程介绍与环境搭建"><a href="#第1章-课程介绍与环境搭建" class="headerlink" title="第1章 课程介绍与环境搭建"></a>第1章 课程介绍与环境搭建</h1><p>  JS作为前端的立身之本，让大家了解学习这门课的必要性。考虑到很多同学刚刚接触前端或者对工程化方法不太了解，为了快速进入到学习状态，我们提供了极其简单的方式帮大家准备好学习环境。</p><h2 id="1-1-课程导学-试看"><a href="#1-1-课程导学-试看" class="headerlink" title="1-1 课程导学 试看"></a>1-1 课程导学 试看</h2><h3 id="怎么学？"><a href="#怎么学？" class="headerlink" title="怎么学？"></a>怎么学？</h3><ol><li>一天后：体验乐趣</li><li>十天后：进入状态</li><li>一个月后：养成习惯</li><li>三个月后：收获知识</li><li>五个月后：形成思维习惯</li></ol><h3 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h3><ol><li>快速搭建开发环境</li><li>学习语法</li><li>推荐阅读材料</li><li>练习题</li><li>Vue 框架内实战</li><li>学习开发环境如何构建</li></ol><h3 id="适用人群"><a href="#适用人群" class="headerlink" title="适用人群"></a>适用人群</h3><ol><li>拥有 JavaScript ES3 以上基础</li><li>会编程，有编程思维</li><li>有耐心</li><li>求上进</li></ol><p>1-2 电子书位置</p><h2 id="1-3-环境准备"><a href="#1-3-环境准备" class="headerlink" title="1-3 环境准备"></a>1-3 环境准备</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><p>原理</p><ol><li>ES6-10 ：原生代码</li><li>Babel→Webpack ：构建转换</li><li>ES5 ：浏览器可以识别的代码</li></ol></li><li><p>开发环境</p><ul><li>Chrome和Node环境</li><li>自动刷新 自动编译</li><li>格式化编写代码</li></ul></li></ul><h2 id="1-4-Node-安装"><a href="#1-4-Node-安装" class="headerlink" title="1-4 Node 安装"></a>1-4 Node 安装</h2><ul><li>Node 安装：-v 12.2.0<ul><li>npm</li><li>npx</li></ul></li></ul><h2 id="1-5-初始化项目"><a href="#1-5-初始化项目" class="headerlink" title="1-5 初始化项目"></a>1-5 初始化项目</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><pre><code>npx es10-cli create projectName // 创建模板文件命令</code></pre><p>启动项目</p><pre><code>cd projectNamenpm installnpm starttouch static/lesson2-1.js // 新建文件命令</code></pre><h2 id="1-6-编辑器配置"><a href="#1-6-编辑器配置" class="headerlink" title="1-6 编辑器配置"></a>1-6 编辑器配置</h2><p>VS code 插件 beautify 和 ESLint</p><h1 id="第2章-ES6基础知识"><a href="#第2章-ES6基础知识" class="headerlink" title="第2章 ES6基础知识"></a>第2章 ES6基础知识</h1><p>  ES6语法相对于ES5有了非常大的改变，让原生 JavaScript 能力再上一个台阶，这个章节会分门别类进行讲述，单纯讲语法既乏味也不利于记忆更不知道如何运用，我们以应用场景开场分别给出ES5和ES6两种不同的解决方案，循序渐进剖析语法…</p><h2 id="Let-amp-Const"><a href="#Let-amp-Const" class="headerlink" title="Let &amp; Const"></a>Let &amp; Const</h2><h3 id="2-1-作用域（1）"><a href="#2-1-作用域（1）" class="headerlink" title="2-1 作用域（1）"></a>2-1 作用域（1）</h3><ol><li>var 声明的全局变量相当于 window 的属性，但无法删除，属性可以删除</li><li>没有var 定义的变量是作为 window 的属性定义的，是全局属性</li><li>在函数内部没有 var 定义的变量是window 的属性，是全局属性</li></ol><h3 id="2-2-作用域（2）"><a href="#2-2-作用域（2）" class="headerlink" title="2-2 作用域（2）"></a>2-2 作用域（2）</h3><ul><li>函数作用域 = 局部作用域</li><li>var 定义的变量会变量提升</li><li>let 定义的变量具有块状作用域</li></ul><h4 id="this-与-动态作用域-的关系"><a href="#this-与-动态作用域-的关系" class="headerlink" title="this 与 动态作用域 的关系"></a>this 与 动态作用域 的关系</h4><ul><li>this 具有动态指向</li></ul><h4 id="四种作用域"><a href="#四种作用域" class="headerlink" title="四种作用域"></a>四种作用域</h4><ol><li>全局作用域</li><li>函数作用域</li><li>块状作用域 ，配合 let 和 const 使用</li><li>动态作用域</li></ol><h3 id="2-3-什么是作用域"><a href="#2-3-什么是作用域" class="headerlink" title="2-3 什么是作用域"></a>2-3 什么是作用域</h3><p>几乎所有编程语言就是在变量中储存值，并且能够读取和修改这些值。事实上在变量中储存和取出值得能力，给程序赋予了状态。</p><p>如果没有这样的概念，一个程序虽然可以执行一些任务，但是它们将会受到极大的限制而且不会非常有趣。</p><p>但是这些变量该储存在哪？又如何读取？为了完成这个目标需要制定一些规则，规则就是：作用域。</p><ul><li><h4 id="四种常见作用域类型："><a href="#四种常见作用域类型：" class="headerlink" title="四种常见作用域类型："></a>四种常见作用域类型：</h4><table><thead><tr><th>对象</th><th>类型</th></tr></thead><tbody><tr><td>global</td><td>全局作用域</td></tr><tr><td>function</td><td>函数作用域（局部作用域）</td></tr><tr><td>{}</td><td>块状作用域</td></tr><tr><td>this</td><td>动态作用域</td></tr></tbody></table></li><li><blockquote><p>如果一个变量 或者其它表达式不在“当前得作用域”，那么JavaScript机制会继续沿着作用域链上查找直到找到全局作用域，通常是指沿着链式得作用域查找，而不能从父作用域引用子作用域中的变量和引用</p></blockquote></li></ul><h3 id="2-4-let-amp-const"><a href="#2-4-let-amp-const" class="headerlink" title="2-4 let&amp;const"></a>2-4 let&amp;const</h3><ul><li>let 声明的特点<ul><li>块状作用域</li><li>不能用用全局变量的属性访问</li><li>不能重复定义</li><li>不会变量提升</li></ul></li><li>const 声明的特点<ul><li><strong>只能赋值一次</strong></li><li><strong>初始化时一定要赋值</strong></li><li>块状作用域</li><li>不能用用全局变量的属性访问</li><li>不能重复定义</li><li>不会变量提升</li></ul></li><li>阅读<ol><li>什么是作用域</li><li>JavaScript深入之词法作用域和动态作用域</li><li>深入理解JS中声明提升、作用域（链）和 this 关键字</li></ol></li></ul><h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 - Array"></a>数组 - Array</h2><h3 id="2-6-ES5中数组有多少种遍历的方法？"><a href="#2-6-ES5中数组有多少种遍历的方法？" class="headerlink" title="2-6 ES5中数组有多少种遍历的方法？"></a>2-6 ES5中数组有多少种遍历的方法？</h3><p>他们有什么优势和缺点？</p><ol><li><p>for 循环</p></li><li><p>forEach ：<code>arr.forEach(funciton (item) {console.log(item)})</code></p><blockquote><p>不支持 <code>break</code> 和 <code>continue</code></p><p>return false 相当于 continue</p><p>隐式索引</p></blockquote></li><li><p>every ：<code>arr.every(funciton (item) {console.log(item)})</code></p><blockquote><p>是否继续执行取决于函数返回值 true 、false</p><p>如果数组中检测到有一个元素不满足，则整个表达式返回 <em>false</em> ，且剩余的元素不会再进行检测。</p><p>如果所有元素都满足条件，则返回 true。</p></blockquote></li><li><p>some：依次执行数组的每个元素：</p><blockquote><p>如果有一个元素满足条件，则表达式返回<em>true</em> , 剩余的元素不会再执行检测。</p><p>如果没有满足条件的元素，则返回false。</p></blockquote></li><li><p>for in ：<code>for ( let index in Object) {console.log(Object[index])}</code></p><blockquote><p>为对象设计的，数组的属性和下标作为字符串遍历</p><p>支持 continue 和 break</p></blockquote></li></ol><h3 id="2-7-ES6中数组有多少种遍历的方法？"><a href="#2-7-ES6中数组有多少种遍历的方法？" class="headerlink" title="2-7 ES6中数组有多少种遍历的方法？"></a>2-7 ES6中数组有多少种遍历的方法？</h3><ol><li><p>for of ：<code>for (let item of arr) { console.log(item)}</code></p><blockquote><p>不仅可以遍历数组和对象</p><p>可以遍历自定义数据结构</p></blockquote></li><li><p>map()</p><blockquote><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p>这种方式也是用的比较广泛的，虽然用起来比较优雅，但实际效率还比不上foreach</p></blockquote></li></ol><h3 id="2-8-Array-from（如何将伪数组转换成数组？）"><a href="#2-8-Array-from（如何将伪数组转换成数组？）" class="headerlink" title="2-8 Array.from（如何将伪数组转换成数组？）"></a>2-8 Array.from（如何将伪数组转换成数组？）</h3><h4 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// collection</span><span class="token keyword">let</span> imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>doncument<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NodeList</span></code></pre><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><ul><li><p>Array.from(arrayLike, mapFn, thisArg)</p><blockquote><p>ES6 新增方法，专门转换伪数组到数组，也可用于生成数组</p></blockquote></li></ul><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token comment" spellcheck="true">// ES6 新增方法</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> mapFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 语法 伪数组，函数返回值，this指向</span><span class="token keyword">let</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span></code></pre><h4 id="什么叫伪数组"><a href="#什么叫伪数组" class="headerlink" title="什么叫伪数组"></a>什么叫伪数组</h4><ol><li>按照索引方式存储数据</li><li>具有 length 属性</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="2-9-Array-of-fill（如何生成新数组？）"><a href="#2-9-Array-of-fill（如何生成新数组？）" class="headerlink" title="2-9 Array.of-fill（如何生成新数组？）"></a>2-9 Array.of-fill（如何生成新数组？）</h3><p>ES6 新方法</p><ul><li><p>Array(5) ：初始化长度为5的数组</p></li><li><p>new Array(1,2,3)：初始化数组，同时生成数据</p></li><li><p>Array.of(1,2,3)：初始化数组，同时生成数据</p></li><li><p>Array.fill(value,start,end)：填充数据</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Array.prototype.of</span><span class="token keyword">let</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Array.prototype.fill</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Array<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 语法 填充值，起始位，截止值。 默认填充所有元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-10-Find-amp-FindIndex（如何查找数组？）"><a href="#2-10-Find-amp-FindIndex（如何查找数组？）" class="headerlink" title="2-10 Find&amp;FindIndex（如何查找数组？）"></a>2-10 Find&amp;FindIndex（如何查找数组？）</h3><ul><li><p>array.filter(fn)：ES5，返回符合fn 条件的所有值，没有则为空</p></li><li><p>Array.find(fn)：ES6，查找数组中符合fn 条件的第一个值，并返回，没有则为 undefined</p></li><li><p>Array.findIndex()：ES6，返回位置，未找到则-1</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token keyword">let</span> find <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 查找下标</span><span class="token keyword">let</span> find <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Class-Update"><a href="#Class-Update" class="headerlink" title="Class Update"></a>Class Update</h2><h3 id="2-12-Class基础语法（怎么声明一个类？）"><a href="#2-12-Class基础语法（怎么声明一个类？）" class="headerlink" title="2-12 Class基础语法（怎么声明一个类？）"></a>2-12 Class基础语法（怎么声明一个类？）</h3><h4 id="ES5中怎么声明一个类"><a href="#ES5中怎么声明一个类" class="headerlink" title="ES5中怎么声明一个类"></a>ES5中怎么声明一个类</h4><ul><li><pre class=" language-JS"><code class="language-JS">let Animal = function (type) {  this.type = type}Animal.prototype.eat = function () {  console.log('you are eatting food hello');}let dog = new Animal('food')let cat = new Animal('fish')console.log(dog)console.log(cat)// 修改实例对象原型链上的方法cat.constructor.prototype.eat = function () {  console.log('error')}dog.eat()cat.eat()</code></pre></li></ul><h4 id="ES6中声明一个类"><a href="#ES6中声明一个类" class="headerlink" title="ES6中声明一个类"></a>ES6中声明一个类</h4><ul><li><pre class=" language-JS"><code class="language-JS">class Animal {  constructor(type) {    this.type = type  }  eat() {    console.log('i am food')  }}let dog = new Animal('food')let cat = new Animal('fish')console.log(dog)console.log(cat)// 修改实例对象原型链上的方法cat.constructor.prototype.eat = function () {  console.log('error')}dog.eat()cat.eat()console.log(typeof Animal);</code></pre></li></ul><h3 id="点击去GitHub查看完整版"><a href="#点击去GitHub查看完整版" class="headerlink" title="点击去GitHub查看完整版"></a><a href="https://github.com/Eished/JavaScript_notes/blob/master/JavaScriptES6-10_notes/JavaScriptES6-10.md" target="_blank" rel="noopener">点击去GitHub查看完整版</a></h3>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript从入门到精通</title>
      <link href="/2020/06/02/javascript-cong-ru-men-dao-jing-tong/"/>
      <url>/2020/06/02/javascript-cong-ru-men-dao-jing-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript从入门到精通"><a href="#JavaScript从入门到精通" class="headerlink" title="JavaScript从入门到精通"></a><a href="https://www.bilibili.com/video/av29885002" target="_blank" rel="noopener">JavaScript从入门到精通</a></h1><h2 id="初探-JavaScript-魅力"><a href="#初探-JavaScript-魅力" class="headerlink" title="初探 JavaScript 魅力"></a>初探 JavaScript 魅力</h2><h3 id="JavsScript-是什么"><a href="#JavsScript-是什么" class="headerlink" title="JavsScript 是什么"></a>JavsScript 是什么</h3><ul><li>网页特效原理<ul><li>JavaScript 就是修改样式（文档）</li></ul></li><li>编写 JS 的流程<ul><li>布局：HTML + CSS </li><li>属性：确定要修改的属性</li><li>事件： 确定用户 做哪些操作（产品设计）</li><li>编写 JS ：在事件中，用 JS 来修改页面元素的样式</li></ul></li></ul><h3 id="第一个-JS-特效：鼠标提示框"><a href="#第一个-JS-特效：鼠标提示框" class="headerlink" title="第一个 JS 特效：鼠标提示框"></a>第一个 JS 特效：鼠标提示框</h3><ul><li><p>分析效果实现原理</p><ul><li>样式：<code>div</code> 的 <code>display / none</code></li><li>事件：<code>onmouseover / onmouseout</code></li><li>动手编写效果</li></ul></li><li><p>特效基础</p><ul><li>事件驱动：<code>onmouseover</code></li><li>元素属性操作：<code>obj.style.[...]</code></li><li>特效实现原理概括：响应式用户操作，对页面元素样式修改</li></ul></li><li><p>兼容性问题 </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// div2.style.display='block'; // 部分浏览器不兼容</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">'block'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所有浏览器兼容</span></code></pre></li><li><p>函数</p><ul><li>制作更复杂的效果</li><li>直接在事件内写代码会很乱<ul><li>引入 <code>function()</code> 函数的基本形式</li><li>把 JS 标签里放入到函数里，类似于 css 里的 <code>class</code></li><li>变量的使用：别名</li></ul></li><li>定义和调用<ul><li>函数定义：告诉系统有这个函数，不会执行</li><li>函数调用：执行函数里面的代码</li><li>关系和区别</li></ul></li></ul></li><li><p>代码</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>第一个JS效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector"><span class="token id">#div2</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>         <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token id">#div1</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 封装 getElementById 函数</span>    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 显示 div2</span>    <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// div2.style.display='block'; // 部分浏览器不兼容</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">'block'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 隐藏 div2</span>    <span class="token keyword">function</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// div2.style.display='none'; // 部分浏览器不兼容</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变绿</span>    <span class="token keyword">function</span> <span class="token function">toGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变蓝</span>    <span class="token keyword">function</span> <span class="token function">toblue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变红</span>    <span class="token keyword">function</span> <span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 点击循环变色</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toblue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 调用页内函数修改样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeColor()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 行内 JS 修改样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseover</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2.style.display<span class="token punctuation">=</span><span class="token punctuation">'</span>block<span class="token punctuation">'</span>;<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2.style.display<span class="token punctuation">=</span><span class="token punctuation">'</span>none<span class="token punctuation">'</span>;<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>文字2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="网页换肤和-if-判断"><a href="#网页换肤和-if-判断" class="headerlink" title="网页换肤和 if 判断"></a>网页换肤和 if 判断</h3><ul><li><p>网页换肤</p><ul><li>土豆网 “开灯” “关灯效果”</li><li>任何标签都可以加 ID ，包括 link</li><li>任何标签的属性，都可以修改</li><li>HTML 里面怎么写，JS 里面就怎么写</li></ul></li><li><p>if 判断</p><ul><li>特效实现原理</li><li>if 基本形式</li><li>JS 里面 <code>= 赋值， == 判断</code></li><li>为 a 链接添加 JS <ul><li><code>&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;</code></li></ul></li><li>className  的使用<ul><li><code>class</code> 是关键字，所以用 <code>className</code> 代替</li><li>其它 HTML 里面怎么写，JS 里面就怎么写</li></ul></li></ul></li><li><p>代码</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link1<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/grey.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">'关灯'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'link1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'css/black.css'</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'开灯'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'link1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'css/grey.css'</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'关灯'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bl2:'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'link1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">changeText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'456'</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'文字1'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">showHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> div2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">==</span> <span class="token string">'block'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>        div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'display:'</span><span class="token punctuation">,</span> div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">class1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      div<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'div5'</span><span class="token punctuation">;</span>      div<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token string">'div5'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 换肤 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeColor()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关灯<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>显示隐藏div2<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showHide()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- HTMl 里面怎么写，JS 里面就怎么写 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>改文字<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeText()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- a 链接的使用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>javascript:;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- className 的使用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>className<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>class1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><ul><li><p>改变背景颜色</p><ul><li>函数传参：参数就是占位符<ul><li>函数里面变量用传参</li></ul></li></ul></li><li><p>改变 div 的任意样式</p><ul><li>操纵属性的第二种方式<ul><li>要修改的属性不确定时：<code>元素.style[ 变量/字符串 ] = 变量/字符串</code></li><li>JS 中用 <code>.</code> 的地方都可以用 <code>[]</code> 代替;</li><li>字符串变量区别和关系 ：带引号是字符串，不带是变量</li></ul></li><li>将属性名作为参数传递</li></ul></li><li><p>style 与 className </p><ul><li><code>元素.style.属性 = 变量/字符串</code> <ul><li>style 是修改行内样式</li></ul></li><li>行内样式优先级最高，之后再修改 className 不会有效果</li><li>建议：只操作一种样式，要么只操作 style ，要么只操作 className</li></ul></li><li><p>代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>函数传参<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 封装 getElementById 函数</span>    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变绿</span>    <span class="token keyword">function</span> <span class="token function">toGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变蓝</span>    <span class="token keyword">function</span> <span class="token function">toblue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变红</span>    <span class="token keyword">function</span> <span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 点击循环变色</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toblue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 函数传参</span>    <span class="token keyword">function</span> <span class="token function">toColor</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> color<span class="token punctuation">;</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将属性名作为参数传递</span>    <span class="token keyword">function</span> <span class="token function">chgName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// get('div1').style.name = width; // name 会被当作属性赋值</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'style'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组 可以加字符串或者变量</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 样式优先级</span>    <span class="token keyword">function</span> <span class="token function">chgClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className <span class="token operator">=</span>  className<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 调用页内函数修改样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeColor()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>循环<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 函数传参 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toColor(<span class="token punctuation">'</span>green<span class="token punctuation">'</span>, <span class="token punctuation">'</span>200px<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变绿<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toColor(<span class="token punctuation">'</span>blue<span class="token punctuation">'</span>, <span class="token punctuation">'</span>300px<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变蓝<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toColor(<span class="token punctuation">'</span>red<span class="token punctuation">'</span>, <span class="token punctuation">'</span>400px<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变红<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chgName(<span class="token punctuation">'</span>height<span class="token punctuation">'</span>, <span class="token punctuation">'</span>200px<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变高<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chgClass(<span class="token punctuation">'</span>div2<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>class变灰<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="提取行间事件"><a href="#提取行间事件" class="headerlink" title="提取行间事件"></a>提取行间事件</h3><ul><li>提取事件<ul><li>为元素添加事件<ul><li>事件和其它属性一样，可以用 JS 添加：<code>元素.事件 = 函数名/函数;</code><ul><li>不能加括号，加括号直接执行函数</li></ul></li><li><code>window.onload</code> 的意义：等待页面加载完成再执行 JS</li><li>行为( js )、样式( css )、结构( html ) 三者分离</li></ul></li></ul></li><li>获取一组元素<ul><li><code>元素.getElementsByTagName(&#39;标签名&#39;)</code><ul><li>数组的使用</li><li>数组的属性</li></ul></li><li>全选的实现</li></ul></li><li>代码: 同下</li></ul><h3 id="循环-while-和-for"><a href="#循环-while-和-for" class="headerlink" title="循环 while 和 for"></a>循环 while 和 for</h3><ul><li><p>用 while 引入 循环的概念</p><ul><li>while 循环语法<ul><li>自增的意义</li><li>循环的构成：初始化、条件、语句、自增</li></ul></li></ul></li><li><p>for 循环</p><ul><li>用 for 代替 while 循环<ul><li>用 for 循环为一组元素甜腻骄傲事件</li><li>什么时候用循环—-一组元素</li></ul></li><li>例子<ul><li>全选—- checked 属性</li><li>反选—- for 循环配合 if 判断</li></ul></li></ul></li><li><p>代码:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>提取行间事件和循环<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 封装 getElementById 函数</span>        <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 封装 getElementsByTagName</span>        <span class="token keyword">function</span> <span class="token function">gets</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 提取行间样式</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'提取成功'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 修改一组元素中的某一个元素</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 修改一组元素- while 循环</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// for</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn4'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 全选的实现 if 判断 无需div</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">'checkbox'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 元素.getElementsByTagName 方法 单个div</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn6'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> div2 <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> inp <span class="token operator">=</span> div2<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(inp);</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              inp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              inp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 元素.getElementsByTagName 方法 多个div</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn7'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> div2 <span class="token operator">=</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> div2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> inps <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> inps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>inps<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                inps<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                inps<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 提取行间样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 修改一组元素中的某一个元素 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>改第三个元素<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 修改一组元素-循环 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>while循环改一组元素<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn4<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>for循环改一组元素<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn5<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全选<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn6<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全选2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn7<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全选3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="导航栏选项卡"><a href="#导航栏选项卡" class="headerlink" title="导航栏选项卡"></a>导航栏选项卡</h3><ul><li><p>按钮的实现</p><ul><li>添加事件<ul><li>this 的使用: 指当前发生事件的元素</li></ul></li><li>先清空所有按钮，再选中当前按钮</li></ul></li><li><p>内容的实现（ul）</p><ul><li>先隐藏所有 ul，再显示当前 ul<ul><li>索引值的使用：什么时候用索引值</li><li>HTML 添加 index 会被 FireFox 过滤</li><li>JS 添加 index</li></ul></li></ul></li><li><p>代码:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>导航选项卡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token id">#div2</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token id">#div1</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">ul </span><span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">157</span>, <span class="token number">234</span>, <span class="token number">253</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.ul</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">a </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">49</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">7</span>, <span class="token number">184</span>, <span class="token number">253</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">0</span>, <span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.a</span> </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">32</span>, <span class="token number">108</span>, <span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 封装 getElementById 函数</span>        <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 封装 getElementsByTagName</span>        <span class="token keyword">function</span> <span class="token function">gets</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 显示第一个元素</span>        <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'ul'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当鼠标覆盖某个标签时 显示对应元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>          <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>              <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(this);</span>            <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'ul'</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="JavaScript-基础-点击去Github查看完整版"><a href="#JavaScript-基础-点击去Github查看完整版" class="headerlink" title="JavaScript 基础 点击去Github查看完整版"></a><a href="https://github.com/Eished/JavaScript_notes" target="_blank" rel="noopener">JavaScript 基础 点击去Github查看完整版</a></h2>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Front-matter 介绍</title>
      <link href="/2020/06/02/hexo-front-matter-jie-shao/"/>
      <url>/2020/06/02/hexo-front-matter-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h1><h2 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h2><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h2 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h2><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><h2 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h2><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h1 id="Hexo-指令"><a href="#Hexo-指令" class="headerlink" title="Hexo 指令"></a>Hexo 指令</h1><iframe src="https://www.youtube.com/embed/mgdXi5npArQ" frameborder="0" loading="lazy" allowfullscreen="" style="box-sizing: inherit; margin: 1em 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 15px; vertical-align: baseline;"></iframe><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><pre><code>$ hexo init [folder]</code></pre><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><pre><code>$ hexo new [layout] &lt;title&gt;</code></pre><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre><code>$ hexo new &quot;post title with whitespace&quot;</code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><pre><code>hexo new page --path about/me &quot;About me&quot;</code></pre><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><pre><code>hexo new page --path about/me</code></pre><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><pre><code>$ hexo generate</code></pre><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><pre><code>$ hexo g</code></pre><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><pre><code>$ hexo publish [layout] &lt;filename&gt;</code></pre><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><pre><code>$ hexo server</code></pre><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><pre><code>$ hexo deploy</code></pre><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><pre><code>$ hexo d</code></pre><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><pre><code>$ hexo render &lt;file1&gt; [file2] ...</code></pre><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><pre><code>$ hexo migrate &lt;type&gt;</code></pre><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><pre><code>$ hexo clean</code></pre><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><pre><code>$ hexo list &lt;type&gt;</code></pre><p>列出网站资料。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><pre><code>$ hexo version</code></pre><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><pre><code>$ hexo --safe</code></pre><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><pre><code>$ hexo --debug</code></pre><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="noopener">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><pre><code>$ hexo --silent</code></pre><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><pre><code># 使用 custom.yml 代替默认的 _config.yml$ hexo server --config custom.yml# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高$ hexo generate --config custom.yml,custom2.json,custom3.yml</code></pre><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><pre><code># 使用 custom.yml 代替默认的 _config.yml$ hexo server --config custom.yml# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json$ hexo generate --config custom.yml,custom2.json,custom3.yml</code></pre><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><pre><code>$ hexo --draft</code></pre><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><pre><code>$ hexo --cwd /path/to/cwd</code></pre><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git和GitHub详解</title>
      <link href="/2020/06/02/git-he-github-xiang-jie/"/>
      <url>/2020/06/02/git-he-github-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Git和GitHub详解"><a href="#Git和GitHub详解" class="headerlink" title="Git和GitHub详解"></a><a href="https://github.com/Eished/git_notes" target="_blank" rel="noopener">Git和GitHub详解</a></h1><h2 id="（一）Git基础"><a href="#（一）Git基础" class="headerlink" title="（一）Git基础"></a>（一）Git基础</h2><h3 id="Git-下载和安装"><a href="#Git-下载和安装" class="headerlink" title="Git 下载和安装"></a>Git 下载和安装</h3><ul><li>下载地址： <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></li><li>使用默认值安装</li><li>资源管理器内单击鼠标右键选择 <code>Git Bash Here</code></li><li>输入<code>git --version</code> 检查是否安装成功</li></ul><h3 id="Git-基本工作流程"><a href="#Git-基本工作流程" class="headerlink" title="Git 基本工作流程"></a>Git 基本工作流程</h3><blockquote><p><a href="https://camo.githubusercontent.com/b3a8463c493afefb96ed483106ceea6966782b27/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32352f313632666363303938376266316330613f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/b3a8463c493afefb96ed483106ceea6966782b27/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32352f313632666363303938376266316330613f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31" alt="git操作通用流程"></a></p><p>主要涉及到四个关键点：</p><ol><li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li><li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li><li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li><li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li></ol><p>更细节的来看：</p><p><a href="https://camo.githubusercontent.com/9d199e09df4405718621937e8798cba7cf1964fb/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32352f313632666363306537653731316463373f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/9d199e09df4405718621937e8798cba7cf1964fb/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32352f313632666363306537653731316463373f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31" alt="git几个核心区域间的关系"></a></p><p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p><p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p><ol><li><p>git管理配置的命令；</p><p><strong>几个核心存储区的交互命令：</strong></p></li><li><p>工作区与暂存区的交互；</p></li><li><p>暂存区与本地仓库（分支）上的交互；</p></li><li><p>本地仓库与远程仓库的交互。</p></li></ol><p>作者：你听___ 链接：<a href="https://juejin.im/post/5ae072906fb9a07a9e4ce596" target="_blank" rel="noopener">https://juejin.im/post/5ae072906fb9a07a9e4ce596</a> 来源：掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><table><thead><tr><th>工作目录</th><th>暂存区</th><th>git 仓库</th><th>远程仓库</th></tr></thead><tbody><tr><td>被Git管理的项目</td><td>临时存放被修改的文件</td><td>目录用于存放提交记录</td><td>远程代码仓库</td></tr><tr><td><code>git init</code></td><td><code>git add</code></td><td><code>git commit</code></td><td><code>git push</code></td></tr></tbody></table><h3 id="Git使用前的配置命令"><a href="#Git使用前的配置命令" class="headerlink" title="Git使用前的配置命令"></a>Git使用前的配置命令</h3><p>在使用前告诉git你是谁：</p><ol><li><p>第一次使用git，配置用户信息</p><ol><li>配置用户名：<code>git config --global user.name &quot;your name&quot;</code>;</li><li>配置用户邮箱：<code>git config --global user.email &quot;youremail@github.com&quot;</code>;</li></ol></li><li><blockquote><p>查询配置信息</p></blockquote><ol><li>列出当前配置：<code>git config --list</code>;</li><li>列出repository配置：<code>git config --local --list</code>;</li><li>列出全局配置：<code>git config --global --list</code>;</li><li>列出系统配置：<code>git config --system --list</code>;</li></ol></li><li><blockquote><p>其他配置</p></blockquote><ol><li>配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff：<code>git config --global merge.tool vimdiff</code>;</li><li>配置git命令输出为彩色的：<code>git config --global color.ui auto</code>;</li><li>配置git使用的文本编辑器：<code>git config --global core.editor vi</code>;</li></ol></li><li><blockquote><p>注：</p></blockquote><ol><li>更改–&gt;重复上述命令</li><li>也可直接修改 <code>C:\Users\用户\.gitconfig</code></li></ol></li></ol><h3 id="工作区上的操作命令"><a href="#工作区上的操作命令" class="headerlink" title="工作区上的操作命令"></a>工作区上的操作命令</h3><h4 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h4><ol><li><p><code>git init</code> 初始化git仓库</p><blockquote><blockquote><p>新建仓库</p></blockquote><ol><li>将工作区中的项目文件使用git进行管理，即创建一个新的本地仓库：<code>git init</code>；</li><li>从远程git仓库复制项目：<code>git clone</code>; 克隆项目时如果想定义新的项目名，可以在clone命令后指定新的项目名：<code>git clone git://github.com/wasd/example.git NewName</code>；</li></ol></blockquote></li><li><p><code>git status</code> 查看文件状态</p><blockquote><blockquote><p>查新信息</p></blockquote><ol><li>查询当前工作区所有文件的状态：<code>git status</code>;</li><li>比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：<code>git diff</code>;</li></ol></blockquote></li><li><p><code>git add 文件/文件列表</code> 提交到暂存区</p><blockquote><blockquote><p>提交</p></blockquote><ol><li>提交工作区所有文件到暂存区：<code>git add .</code></li><li>提交工作区中指定文件到暂存区：<code>git add ...</code>;</li><li>提交工作区中某个文件夹中所有文件到暂存区：<code>git add [dir]</code>;</li></ol></blockquote></li><li><p><code>git commit -m 提交信息</code> 向仓库提交代码</p><blockquote><blockquote><p>提交文件到版本库</p></blockquote><ol><li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git commit -m &quot;commit_info&quot;</code>;</li><li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：<code>git commit -a -m &quot;commit_info&quot;</code>;</li><li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git commit --amend</code>;</li></ol></blockquote></li><li><p><code>git log</code> 查看提交记录</p><blockquote><blockquote><p>查看信息</p></blockquote><ol><li>比较暂存区与上一版本的差异：<code>git diff --cached</code>;</li><li>指定文件在暂存区和本地仓库的不同：<code>git diff --cached</code>;</li><li>查看提交历史：git log；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git log -p -2</code>;</li></ol></blockquote></li></ol><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><ul><li><p>用暂存区中的文件覆盖工作目录中的文件：<code>git checkout -- 文件名</code> 不加 <code>-- 文件名</code>则覆盖全部文件</p></li><li><p>将文件从暂存区中删除：<code>git rm --cached 文件名</code></p></li><li><p>将git仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git reset --hard commitID</code></p></li><li><blockquote><blockquote><p>撤销</p></blockquote><ol><li>删除工作区文件，并且也从暂存区删除对应文件的记录：<code>git rm</code>;</li><li>从暂存区中删除文件，但是工作区依然还有该文件:<code>git rm --cached</code>;</li><li>取消暂存区已经暂存的文件：<code>git reset HEAD ...</code>;</li><li>撤销上一次对文件的操作：<code>git checkout --</code>。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用stashing和分支来处理；</li><li>隐藏当前变更，以便能够切换分支：<code>git stash</code>；</li><li>查看当前所有的储藏：<code>git stash list</code>；</li><li>应用最新的储藏：<code>git stash apply</code>，如果想应用更早的储藏：<code>git stash apply stash@{2}</code>；重新应用被暂存的变更，需要加上<code>--index</code>参数：<code>git stash apply --index</code>;</li><li>使用apply命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：<code>git stash drop stash{0}</code>；如果使用pop命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：<code>git stash pop</code>;</li><li>在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：<code>git stash show -p stash@{0} | git apply -R</code>；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：<code>git stash show -p | git apply -R</code>；</li></ol><blockquote><p>更新文件</p></blockquote><ol><li>重命名文件，并将已改名文件提交到暂存区：<code>git mv [file-original] [file-renamed]</code>;</li></ol></blockquote></li></ul><h2 id="点击去GitHub查看完整版"><a href="#点击去GitHub查看完整版" class="headerlink" title="点击去GitHub查看完整版"></a><a href="https://github.com/Eished/git_notes" target="_blank" rel="noopener">点击去GitHub查看完整版</a></h2>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
