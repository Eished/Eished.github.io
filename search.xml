<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js搭建博客</title>
      <link href="/2020/06/03/node-js-da-jian-bo-ke/"/>
      <url>/2020/06/03/node-js-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js搭建博客"><a href="#Node-js搭建博客" class="headerlink" title="Node.js搭建博客"></a><a href="https://github.com/Eished/node_blog_notes" target="_blank" rel="noopener">Node.js搭建博客</a></h1><h2 id="开发接口（不用框架）"><a href="#开发接口（不用框架）" class="headerlink" title="开发接口（不用框架）"></a>开发接口（不用框架）</h2><h3 id="http请求概述"><a href="#http请求概述" class="headerlink" title="http请求概述"></a>http请求概述</h3><ul><li>DNS 解析，建立 TCP 连接，发送 http 请求</li><li>server 接收到 http 请求，处理并返回数据</li><li>客户端接收到返回数据，处理数据（例如渲染、执行JS）</li></ul><h3 id="Node-js-处理http-请求"><a href="#Node-js-处理http-请求" class="headerlink" title="Node.js 处理http 请求"></a>Node.js 处理http 请求</h3><ul><li>get 请求和 querystring</li><li>post 请求和 postdata</li><li>路由（接口、地址）</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浏览器访问 http://localhost:8000/</span></code></pre><h4 id="Node-js-处理-get-请求"><a href="#Node-js-处理-get-请求" class="headerlink" title="Node.js 处理 get 请求"></a>Node.js 处理 get 请求</h4><ul><li>get  请求，客户端向 server 端获取数据，如查询博客列表</li><li>通过 querystring 来传递数据，如 a.html?a=100&amp;b=200</li><li>浏览器直接访问，发送 get 请求</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//GET</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url <span class="token comment" spellcheck="true">//获取请求的完整 URL</span>    <span class="token comment" spellcheck="true">//关键解析[0]是'?'前的内容, [1]是'?'后内容</span>    req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将 querystring 返回</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浏览器访问 http://localhost:8000/</span></code></pre><h4 id="Node-js-处理-post-请求"><a href="#Node-js-处理-post-请求" class="headerlink" title="Node.js 处理 post 请求"></a>Node.js 处理 post 请求</h4><ul><li>post 请求，即客户端要像服务端传递数据，如新建博客</li><li>通过 post data 传递数据，后面解释</li><li>浏览器无法直接模拟，需要手写JS，或者使用 postman app</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// POST 必须大写</span>        <span class="token comment" spellcheck="true">//数据格式</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'content-type: '</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//接收数据</span>        <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">//开始接收数据</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//结束数据接收</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span>， <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'postData:'</span><span class="token punctuation">,</span> postData<span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在这里返回，因为是异步</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span></code></pre><h4 id="Node-js-处理路由"><a href="#Node-js-处理路由" class="headerlink" title="Node.js 处理路由"></a>Node.js 处理路由</h4><ul><li><code>https://github.com/username/xxx</code> 每个斜线后面的唯一标识就是路由</li></ul><h4 id="Node-js-综合应用"><a href="#Node-js-综合应用" class="headerlink" title="Node.js 综合应用"></a>Node.js 综合应用</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    <span class="token keyword">const</span> path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//重点：split('?'[0])语法弄清楚</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//设置返回值格式为 JSON</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回的数据</span>    <span class="token keyword">const</span> resData <span class="token operator">=</span> <span class="token punctuation">{</span>        method<span class="token punctuation">,</span>        url<span class="token punctuation">,</span>        path<span class="token punctuation">,</span>        query    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">//res.on('data')指每次发送的数据</span>        <span class="token comment" spellcheck="true">//chunk 逐步接收数据 req绑定一个data方法 chunk是变量</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//req.on(end)数据发送完成；</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'postData:'</span><span class="token punctuation">,</span> postData<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resData:'</span><span class="token punctuation">,</span> resData<span class="token punctuation">)</span>            resData<span class="token punctuation">.</span>postData <span class="token operator">=</span> postData            <span class="token comment" spellcheck="true">//返回</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>resData<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span></code></pre><h3 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h3><ul><li>从零搭建，不使用框架</li><li>使用 nodemon 监测文件变化，自动重启 node</li><li>使用 cross-env 设置环境变量，兼容Mac Linux 和 Windows</li><li>配置完后使用 <code>$ npm run dev</code> 命令启动项目</li></ul><h4 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h4><p><strong>使用npm安装上述插件，设置npm镜像源</strong></p><ol><li><p>查看npm源地址<br> <code>npm config list</code></p></li><li><p>结果:<br> <code>metrics-registry = &quot;http://registry.npm.taobao.org/&quot;</code></p></li><li><p>修改registry地址，比如修改为淘宝镜像源。<br> <code>npm set registry https://registry.npm.taobao.org/</code><br> 如果有一天你肉身FQ到国外，用不上了，用rm命令删掉它<br> <code>npm config rm registry</code></p></li><li><p><code>npm install -g nodemon</code></p></li><li><p><code>npm install -g cross-env</code></p></li></ol><p><strong>新建文件夹blog_1，在里面新建bin文件夹和app.js，在bin里面新建<a href="http://www.js文件" target="_blank" rel="noopener">www.js文件</a></strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// package.json 代码 注意： =不能有空格</span><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"blog_1"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"www.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NODE_ENV=dev nodemon ./bin/www.js"</span><span class="token punctuation">,</span>    <span class="token string">"prd"</span><span class="token punctuation">:</span> <span class="token string">"cross-env NODE_ENV=production nodemon ./bin/www.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./bin/www.js 代码</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> PORT <span class="token operator">=</span> <span class="token number">300</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../app'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>serverHandle<span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js 代码</span><span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/user'</span><span class="token punctuation">)</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置返回值格式 JSON</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// const resData = {</span>    <span class="token comment" spellcheck="true">//     name: 'zhang',</span>    <span class="token comment" spellcheck="true">//     site: 'imooc',</span>    <span class="token comment" spellcheck="true">//     env: process.env.NODE_ENV</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// res.end(</span>    <span class="token comment" spellcheck="true">//     JSON.stringify(resData)</span>    <span class="token comment" spellcheck="true">// )</span>    <span class="token comment" spellcheck="true">//处理 blog 路由</span>    <span class="token keyword">const</span> blogData <span class="token operator">=</span> <span class="token function">handleBlogRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>blogData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>blogData<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理 user 路由</span>    <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token function">handleUserRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//未命中路由，返回404</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found\n"</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> serverHandle</code></pre><h3 id="开发接口"><a href="#开发接口" class="headerlink" title="开发接口"></a>开发接口</h3><h4 id="初始化路由"><a href="#初始化路由" class="headerlink" title="初始化路由"></a>初始化路由</h4><ul><li>初始化路由：根据之前设计方案，做出路由</li><li>返回假数据：将路由和数据处理分离，以符合设计原则</li></ul><h4 id="接口设计方案"><a href="#接口设计方案" class="headerlink" title="接口设计方案"></a>接口设计方案</h4><table><thead><tr><th>描述</th><th>接口</th><th>方法</th><th>url参数</th><th>备注</th></tr></thead><tbody><tr><td>获取博客列表</td><td>/api/blog/list</td><td>get</td><td>author 作者，keyword 搜索关键字</td><td>参数为空则不进行查询过滤</td></tr><tr><td>获取一篇博客的内容</td><td>/api/blog/detail</td><td>get</td><td>id</td><td></td></tr><tr><td>新增一篇博客</td><td>/api/blog/new</td><td>post</td><td></td><td>post 中有新增的信息</td></tr><tr><td>更新一篇博客</td><td>/api/blog/update</td><td>post</td><td>id</td><td>postData 中有更新信息</td></tr><tr><td>删除一篇博客</td><td>/api/blog/del</td><td>post</td><td>id</td><td></td></tr><tr><td>登录</td><td>/api/user/login</td><td>post</td><td></td><td>postData 中有用户名和密码</td></tr></tbody></table><p>具体代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/router/user.js</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token comment" spellcheck="true">//登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'这是登录的接口'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleUserRouter<span class="token comment" spellcheck="true">// ./src/router/blog.js</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token comment" spellcheck="true">//登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'这是登录的接口'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleUserRouter</code></pre><h4 id="开发路由-博客列表"><a href="#开发路由-博客列表" class="headerlink" title="开发路由 博客列表"></a>开发路由 博客列表</h4><ol><li><p>业务分层 拆分业务</p><ul><li>createServer 业务单独放在 <code>./bin/www.js</code></li><li>系统基本设置、基本信息 <code>app.js</code> 放在根目录</li><li>路由功能 <code>./src/router/xxx.js</code></li><li>数据管理 <code>./src/contoller/xxx.js</code></li><li>数据处理</li></ul></li><li><p>博客列表代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./app.js </span><span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/user'</span><span class="token punctuation">)</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置返回值格式 JSON</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取 path</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    req<span class="token punctuation">.</span>path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//解析 query</span>    req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// const resData = {</span>    <span class="token comment" spellcheck="true">//     name: 'zhang',</span>    <span class="token comment" spellcheck="true">//     site: 'imooc',</span>    <span class="token comment" spellcheck="true">//     env: process.env.NODE_ENV</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// res.end(</span>    <span class="token comment" spellcheck="true">//     JSON.stringify(resData)</span>    <span class="token comment" spellcheck="true">// )</span>    <span class="token comment" spellcheck="true">//处理 blog 路由</span>    <span class="token keyword">const</span> blogData <span class="token operator">=</span> <span class="token function">handleBlogRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>blogData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>blogData<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// JSON.stringify({</span>            <span class="token comment" spellcheck="true">//     errno: -1,</span>            <span class="token comment" spellcheck="true">//     message: '传输失败'</span>            <span class="token comment" spellcheck="true">// })</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理 user 路由</span>    <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token function">handleUserRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//未命中路由，返回404</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found\n"</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> serverHandle</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/controller/blog.js</span><span class="token keyword">const</span> getList <span class="token operator">=</span> <span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先返回假数据(格式正确)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">'标题A'</span><span class="token punctuation">,</span>            content<span class="token punctuation">:</span> <span class="token string">'内容A'</span><span class="token punctuation">,</span>            createTime<span class="token punctuation">:</span> <span class="token number">20191101</span><span class="token punctuation">,</span>            author<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">'标题2'</span><span class="token punctuation">,</span>            content<span class="token punctuation">:</span> <span class="token string">'内容2'</span><span class="token punctuation">,</span>            createTime<span class="token punctuation">:</span> <span class="token number">20191102</span><span class="token punctuation">,</span>            author<span class="token punctuation">:</span> <span class="token string">'zhangsan2'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">'标题3'</span><span class="token punctuation">,</span>            content<span class="token punctuation">:</span> <span class="token string">'内容3'</span><span class="token punctuation">,</span>            createTime<span class="token punctuation">:</span> <span class="token number">20191103</span><span class="token punctuation">,</span>            author<span class="token punctuation">:</span> <span class="token string">'zhangsan3'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">const</span> getDetail <span class="token operator">=</span> <span class="token punctuation">(</span> id <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先返回假数据(格式正确)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'标题3'</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">'内容3'</span><span class="token punctuation">,</span>        createTime<span class="token punctuation">:</span> <span class="token number">20191103</span><span class="token punctuation">,</span>        author<span class="token punctuation">:</span> <span class="token string">'zhangsan3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getList<span class="token punctuation">,</span>    getDetail<span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/router/blog.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> getList<span class="token punctuation">,</span> getDetail <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token comment" spellcheck="true">//获取博客列表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/list'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>author <span class="token operator">||</span> <span class="token string">''</span>        <span class="token keyword">const</span> keyword <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token string">''</span>        <span class="token keyword">const</span> listData <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// return {</span>        <span class="token comment" spellcheck="true">//     msg: '这是博客列表的接口'</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取博客详情</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span><span class="token string">'/api/blog/detail'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">getDetail</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//新建博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/new'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'这是新建博客的接口'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//更新博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/update'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'这是更新博客的接口'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/del'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'这是删除博客的接口'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleBlogRouter</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/model/resModel.js</span><span class="token keyword">class</span> <span class="token class-name">BaseModel</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> data            data <span class="token operator">=</span> <span class="token keyword">null</span>            message <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SuccessModel</span> <span class="token keyword">extends</span> <span class="token class-name">BaseModel</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> message<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errno <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ErrorModel</span> <span class="token keyword">extends</span> <span class="token class-name">BaseModel</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> message<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errno <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    SuccessModel<span class="token punctuation">,</span>    ErrorModel<span class="token punctuation">}</span></code></pre></li></ol><h4 id="开发路由-博客详情"><a href="#开发路由-博客详情" class="headerlink" title="开发路由 博客详情"></a>开发路由 博客详情</h4><ul><li><p>博客代码同上一章</p></li><li><p>使用 promise 读取文件，避免 callback-hell</p></li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">const</span> fs <span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/*  // callback 方式获取一个文件的内容  function getFileContent(fileName, callback) {      //resolve 方法拼接文件目录，带引号的是字符串，不带的是变量       const fullFileName = path.resolve(__dirname, 'files', fileName)   fs.readFile(fullFileName, (err, data) => {      if (err) {          console.error(err)          return      }      callback(          JSON.parse(data.toString())      )  })  }  //测试 callback-hell  getFileContent('a.json', aData => {      console.log('a data', aData)      getFileContent(aData.next, bData => {          console.log('b data', bData)          getFileContent(bData.next, cData => {          console.log('c data', cData)          })      })  })*/</span>  <span class="token comment" spellcheck="true">//用 promise 获取文件内容</span>  <span class="token keyword">function</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> fullFileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'files'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fullFileName：'</span><span class="token punctuation">,</span> fullFileName<span class="token punctuation">)</span>          fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fullFileName<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span>                  <span class="token keyword">return</span>              <span class="token punctuation">}</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>                  JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> promise  <span class="token punctuation">}</span>  <span class="token function">getFileContent</span><span class="token punctuation">(</span><span class="token string">'a.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>aData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a data'</span><span class="token punctuation">,</span> aData<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//返回文件名 b.json</span>      <span class="token keyword">return</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>aData<span class="token punctuation">.</span>next<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>bData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b Data'</span><span class="token punctuation">,</span> bData<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//返回文件名 c.json</span>      <span class="token keyword">return</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>bData<span class="token punctuation">.</span>next<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>cData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'c Data'</span><span class="token punctuation">,</span> cData<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// async await 获取内容</span>  <span class="token comment" spellcheck="true">// koa2 获取内容</span></code></pre><h4 id="开发路由-（处理POSTData）"><a href="#开发路由-（处理POSTData）" class="headerlink" title="开发路由 （处理POSTData）"></a>开发路由 （处理POSTData）</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// app.js 代码</span><span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/user'</span><span class="token punctuation">)</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//用于处理 post data</span><span class="token keyword">const</span> getPostData <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">//开始接收数据</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//结束接收数据</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postData<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>                JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> promise<span class="token punctuation">}</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置返回值格式 JSON</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取 path</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    req<span class="token punctuation">.</span>path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//解析 query</span>    req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//处理 postData</span>    <span class="token function">getPostData</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>postData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        req<span class="token punctuation">.</span>body <span class="token operator">=</span> postData        <span class="token comment" spellcheck="true">//处理 blog 路由</span>        <span class="token keyword">const</span> blogData <span class="token operator">=</span> <span class="token function">handleBlogRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>blogData<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>blogData<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// JSON.stringify({</span>                <span class="token comment" spellcheck="true">//     errno: -1,</span>                <span class="token comment" spellcheck="true">//     message: '传输失败'</span>                <span class="token comment" spellcheck="true">// })</span>            <span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//处理 user 路由</span>        <span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token function">handleUserRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userData<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//未命中路由，返回404</span>        res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found\n"</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> serverHandle</code></pre><h4 id="开发路由-（新建和更新博客路由）"><a href="#开发路由-（新建和更新博客路由）" class="headerlink" title="开发路由 （新建和更新博客路由）"></a>开发路由 （新建和更新博客路由）</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/router/blog.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span>     getList<span class="token punctuation">,</span>     getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id    <span class="token comment" spellcheck="true">//获取博客列表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/list'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>author <span class="token operator">||</span> <span class="token string">''</span>        <span class="token keyword">const</span> keyword <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token string">''</span>        <span class="token keyword">const</span> listData <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// return {</span>        <span class="token comment" spellcheck="true">//     msg: '这是博客列表的接口'</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取博客详情</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span><span class="token string">'/api/blog/detail'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">getDetail</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//新建博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/new'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">newBlog</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//更新博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/update'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">updateBlog</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token string">'Update Successed!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'Update Failed!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/del'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">:</span> <span class="token string">'这是删除博客的接口'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleBlogRouter</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/controller/blog.js</span><span class="token comment" spellcheck="true">//博客列表</span><span class="token keyword">const</span> getList <span class="token operator">=</span> <span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先返回假数据(格式正确)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">'标题A'</span><span class="token punctuation">,</span>            content<span class="token punctuation">:</span> <span class="token string">'内容A'</span><span class="token punctuation">,</span>            createTime<span class="token punctuation">:</span> <span class="token number">20191101</span><span class="token punctuation">,</span>            author<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">'标题2'</span><span class="token punctuation">,</span>            content<span class="token punctuation">:</span> <span class="token string">'内容2'</span><span class="token punctuation">,</span>            createTime<span class="token punctuation">:</span> <span class="token number">20191102</span><span class="token punctuation">,</span>            author<span class="token punctuation">:</span> <span class="token string">'zhangsan2'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>            title<span class="token punctuation">:</span> <span class="token string">'标题3'</span><span class="token punctuation">,</span>            content<span class="token punctuation">:</span> <span class="token string">'内容3'</span><span class="token punctuation">,</span>            createTime<span class="token punctuation">:</span> <span class="token number">20191103</span><span class="token punctuation">,</span>            author<span class="token punctuation">:</span> <span class="token string">'zhangsan3'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//博客详情</span><span class="token keyword">const</span> getDetail <span class="token operator">=</span> <span class="token punctuation">(</span> id <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先返回假数据(格式正确)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'标题3'</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">'内容3'</span><span class="token punctuation">,</span>        createTime<span class="token punctuation">:</span> <span class="token number">20191103</span><span class="token punctuation">,</span>        author<span class="token punctuation">:</span> <span class="token string">'zhangsan3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//新建博客</span><span class="token keyword">const</span> newBlog <span class="token operator">=</span> <span class="token punctuation">(</span>blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title conten 属性</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">//表示新建博客，插入到数据表里面的 id</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//更新博客</span><span class="token keyword">const</span> updateBlog <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// id 就是要更新的 id</span>    <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 tiltle content 属性</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'updateBlog:'</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> blogData<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getList<span class="token punctuation">,</span>    getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">}</span></code></pre><h4 id="开发路由-（删除博客路由和登录博客路由）"><a href="#开发路由-（删除博客路由和登录博客路由）" class="headerlink" title="开发路由 （删除博客路由和登录博客路由）"></a>开发路由 （删除博客路由和登录博客路由）</h4><ul><li><strong>删除博客</strong></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/controller/blog.js 里面增加下列代码</span><span class="token comment" spellcheck="true">//删除博客</span><span class="token keyword">const</span> delBlog <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// id 就是要删除的博客的 id</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'delBlog:'</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getList<span class="token punctuation">,</span>    getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog<span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  ./src/router/blog.js 里面增加下列代码</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>     getList<span class="token punctuation">,</span>     getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/blog'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//删除博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/del'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">delBlog</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token string">'Delete Successed!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'Delete Failed!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li><strong>登录博客</strong></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/router/user.js 代码</span><span class="token keyword">const</span> <span class="token punctuation">{</span> loginCheck <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/user'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'路径里面不能有空格'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token comment" spellcheck="true">//登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token string">'login successed!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'login failed!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleUserRouter</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/controller/user.js 代码</span><span class="token comment" spellcheck="true">//登录验证</span><span class="token keyword">const</span> loginCheck <span class="token operator">=</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'username:'</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> <span class="token string">'password:'</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">'zhangsan'</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> <span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    loginCheck<span class="token punctuation">}</span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>node.js 处理 http 请求的常用技能，postman 的使用</p></li><li><p>node.js 开发博客项目的接口（未连接数据库，未登录使用）</p></li><li><p>为何要将 router 和 controller 分开？</p></li><li><p>路由和  API 区别：</p><ul><li>API ：前后端、不同端（子系统）之间对接的通用术语</li><li>路由：系统内部的接口定义，是 API 的一部分</li></ul></li></ul><h2 id="使用MySQL数据库"><a href="#使用MySQL数据库" class="headerlink" title="使用MySQL数据库"></a>使用MySQL数据库</h2><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><p><strong>讲解步骤：</strong></p><ol><li><p>MySQL 的介绍、安装和使用</p></li><li><p>node.js 连接 MySQL</p></li><li><p>API 连接 MySQL</p></li></ol><p>为什么使用MySQL？</p><ul><li>MySQL 最常用，有专人运维</li><li>MySQL 有问题可以随时查到</li><li>MySQL 本身是复杂的，本课只讲使用</li></ul><h4 id="MySQL-介绍："><a href="#MySQL-介绍：" class="headerlink" title="MySQL 介绍："></a>MySQL 介绍：</h4><ul><li>web server 中最流行的关系型数据库</li><li>免费下载学习</li><li>轻量级，易学易用</li></ul><p>MySQL 下载： <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a> </p><h4 id="MySQL-安装："><a href="#MySQL-安装：" class="headerlink" title="MySQL 安装："></a>MySQL 安装：</h4><ul><li>解压，打开根目录初始化<code>my.ini</code> 文件， 自行创建在安装根目录下创建<code>my.ini</code></li></ul><pre class=" language-ini"><code class="language-ini"><span class="token selector">  [mysqld]</span>  # 设置3306端口<span class="token constant">  port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span>  # 设置mysql的安装目录<span class="token constant">  basedir</span><span class="token attr-value"><span class="token punctuation">=</span>C:\Program Files\MySQL</span>  # 设置mysql数据库的数据的存放目录<span class="token constant">  datadir</span><span class="token attr-value"><span class="token punctuation">=</span>C:\Program Files\MySQL\Data</span>  # 允许最大连接数<span class="token constant">  max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span>  # 允许连接失败的次数。<span class="token constant">  max_connect_errors</span><span class="token attr-value"><span class="token punctuation">=</span>10</span>  # 服务端使用的字符集默认为utf8mb4<span class="token constant">  character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8mb4</span>  # 创建新表时将使用的默认存储引擎<span class="token constant">  default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span>  # 默认使用“mysql_native_password”插件认证  #mysql_native_password<span class="token constant">  default_authentication_plugin</span><span class="token attr-value"><span class="token punctuation">=</span>mysql_native_password</span><span class="token selector">  [mysql]</span>  # 设置mysql客户端默认字符集<span class="token constant">  default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8mb4</span><span class="token selector">  [client]</span>  # 设置mysql客户端连接服务端时默认使用的端口<span class="token constant">  port</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span><span class="token constant">  default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8mb4</span></code></pre><p>   配置文件中的路径要和实际存放的路径一致（要手动创建Data文件夹） </p><ul><li><p>打开系统设置，配置环境变量 ` Path = ‘解压目录’\bin</p></li><li><p>初始化安装：<code>mysqld --initialize --console</code></p><p>注意输出信息：<code>root @ localhost：后面是初始密码（不含首位空格）</code>，后续登录需要用到，复制密码先保存起来</p></li><li><p>安装MySQL 服务：<code>mysqld --install[服务名]</code> 不填默认<code>mysql</code></p></li><li><p>启动MySQL：<code>net start mysql</code></p></li></ul><h4 id="使用官方客户端管理mysql"><a href="#使用官方客户端管理mysql" class="headerlink" title="使用官方客户端管理mysql"></a>使用官方客户端管理mysql</h4><ul><li><p>Wrokbench 下载地址：<a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/</a></p></li><li><p>默认安装，打开后输入之前保存的默认密码登录</p></li><li><p>弹出修改密码界面，修改密码再登录</p></li></ul><h3 id="MySQL基本使用"><a href="#MySQL基本使用" class="headerlink" title="MySQL基本使用"></a>MySQL基本使用</h3><h4 id="根据需求设计表"><a href="#根据需求设计表" class="headerlink" title="根据需求设计表"></a>根据需求设计表</h4><p>users：</p><table><thead><tr><th align="center">id</th><th align="center">username</th><th align="center">password</th><th align="center">realname</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">zhangsan</td><td align="center">123</td><td align="center">张三</td></tr><tr><td align="center">2</td><td align="center">lisi</td><td align="center">1234</td><td align="center">李四</td></tr></tbody></table><p>blogs：</p><table><thead><tr><th align="center">id</th><th align="center">title</th><th align="center">content</th><th align="center">createtime</th><th align="center">author</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">标题A</td><td align="center">内容A</td><td align="center">1573989043149</td><td align="center">zhangsan</td></tr><tr><td align="center">2</td><td align="center">标题B</td><td align="center">内容B</td><td align="center">1573989111301</td><td align="center">lisi</td></tr></tbody></table><h4 id="MySQL语法和操作"><a href="#MySQL语法和操作" class="headerlink" title="MySQL语法和操作"></a>MySQL语法和操作</h4><p>右键表 <code>Drop table</code> 删除</p><p>右键表 <code>Alter table</code> 修改</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 显示数据库</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建数据库</span> <span class="token keyword">CREATE</span> <span class="token keyword">SCHEMA</span> <span class="token punctuation">`</span>myblog<span class="token punctuation">`</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建users数据表</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>myblog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>users<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>realname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 创建blogs数据表</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>myblog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>blogs<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">LONGTEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>author<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用myblog数据库</span> <span class="token keyword">use</span> myblog<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 显示当前数据库中的表</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 增加数据到指定表内</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> users <span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span>realname<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> users <span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span>realname<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'1234'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 从指定表内 查询数据 '*'代表所有 比较消耗性能</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 从指定表内 查询指定行列数据 </span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>username <span class="token keyword">from</span> users<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 从指定表内 根据条件查询并集或交集</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'zhangsan'</span> <span class="token operator">and</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'zhangsan'</span> <span class="token operator">or</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 从指定表内 根据条件模糊查询</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> username <span class="token operator">like</span> <span class="token string">'%zhang%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 从指定表内 根据条件模糊查询并根据条件倒序</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> password <span class="token operator">like</span> <span class="token string">'%1%'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- Error Code: 1175. 先解除安全模式再更新或删除</span> <span class="token keyword">SET</span> SQL_SAFE_UPDATES<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 从指定表内 更新数据表 </span> <span class="token keyword">update</span> users <span class="token keyword">set</span> realname<span class="token operator">=</span><span class="token string">'李四2'</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'lisi'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 从指定表内 删除数据表</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'lisi'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 软删除，给数据加上删除标记 state='0',通常不使用 delete 语句</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>myblog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>users<span class="token punctuation">`</span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>stats<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AFTER</span> <span class="token punctuation">`</span>realname<span class="token punctuation">`</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> state<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 不等于号 &lt;></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> state<span class="token operator">&lt;></span><span class="token string">'0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 本教程使用真删除，删除 stats</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>myblog<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>users<span class="token punctuation">`</span> <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>stats<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 往 blogs 填充数据方便测试</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> blogs <span class="token punctuation">(</span>title<span class="token punctuation">,</span>content<span class="token punctuation">,</span>createtime<span class="token punctuation">,</span>author<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'标题A'</span><span class="token punctuation">,</span><span class="token string">'内容A'</span><span class="token punctuation">,</span><span class="token string">'1573989043149'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> blogs <span class="token punctuation">(</span>title<span class="token punctuation">,</span>content<span class="token punctuation">,</span>createtime<span class="token punctuation">,</span>author<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'标题B'</span><span class="token punctuation">,</span><span class="token string">'内容B'</span><span class="token punctuation">,</span><span class="token string">'1573989111301'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询 blogs 数据 条件查询 倒叙查询 模糊查询</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> blogs<span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> blogs <span class="token keyword">where</span> author<span class="token operator">=</span><span class="token string">'lisi'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> createtime <span class="token keyword">desc</span><span class="token punctuation">;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> blogs <span class="token keyword">where</span> title <span class="token operator">like</span> <span class="token string">'%A%'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> createtime <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>如何建库、如何建表</li><li>建表时常用数据类型（ int bigint varchar longtext）</li><li>SQL 语句实现增删改查</li></ul><h3 id="Node-js-操作-MySQL"><a href="#Node-js-操作-MySQL" class="headerlink" title="Node.js 操作 MySQL"></a>Node.js 操作 MySQL</h3><ol><li><p>示例：用 demo 演示 Node.js 操作 MySQL</p></li><li><p>封装：将其封装为系统可用的工具</p></li><li><p>使用：让 API 直接操作 MySQL</p></li></ol><h4 id="Node-js-操作-MySQL-demo"><a href="#Node-js-操作-MySQL-demo" class="headerlink" title="Node.js 操作 MySQL demo"></a>Node.js 操作 MySQL demo</h4><p>安装MySQL模块到本目录： <code>npm install mysql</code> </p><pre class=" language-javaScript"><code class="language-javaScript">// 测试demo 文件const mysql = require('mysql')//创建连接对象const con = mysql.createConnection({    host: 'localhost',    user: 'root',    password: 'root2019',    port: '3306',    database: 'myblog'})//开始连接con.connect()// 执行 SQL 语句const sql = `update users set realname='李四二' where username='lisi';`// const sql = `select * from blogs;`// const sql = `insert into blogs (title,content,createtime,author)values('标题A','内容A','1573989043149','zhangsan');`con.query(sql, (err, result) => {    if (err) {        console.log(err)        return    }    console.log(result)})//关闭连接con.end()</code></pre><h4 id="MySQL封装成工具"><a href="#MySQL封装成工具" class="headerlink" title="MySQL封装成工具"></a>MySQL封装成工具</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/conf/db.js</span><span class="token keyword">const</span> env <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token comment" spellcheck="true">//环境参数</span><span class="token comment" spellcheck="true">//配置</span><span class="token keyword">let</span> MYSQL_CONF<span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">'dev'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MYSQL_CONF <span class="token operator">=</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">'root2019'</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>    database<span class="token punctuation">:</span> <span class="token string">'myblog'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MYSQL_CONF <span class="token operator">=</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">'root2019'</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>    database<span class="token punctuation">:</span> <span class="token string">'myblog'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    MYSQL_CONF<span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/db/mysql.js</span><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> MYSQL_CONF <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../conf/db.js'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建链接对象</span><span class="token keyword">const</span> con <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>MYSQL_CONF<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开始连接</span>con<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 统一执行 sql 语句的函数</span><span class="token keyword">function</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        con<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> promise<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    exec<span class="token punctuation">}</span></code></pre><h4 id="API-对接-MySQL"><a href="#API-对接-MySQL" class="headerlink" title="API 对接 MySQL"></a>API 对接 MySQL</h4><ul><li><code>api/blog/xxx</code> 对接 MySQL</li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// app.js 代码</span>  <span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/blog'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/user'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//用于处理 post data</span>  <span class="token keyword">const</span> getPostData <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>          <span class="token comment" spellcheck="true">//开始接收数据</span>          req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//结束接收数据</span>          req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postData<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                  <span class="token keyword">return</span>              <span class="token punctuation">}</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>                  JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>              <span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> promise  <span class="token punctuation">}</span>  <span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//设置返回值格式 JSON</span>      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 获取 path</span>      <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url      req<span class="token punctuation">.</span>path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">//解析 query</span>      req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//处理 postData</span>      <span class="token function">getPostData</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>postData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          req<span class="token punctuation">.</span>body <span class="token operator">=</span> postData          <span class="token comment" spellcheck="true">//处理 blog 路由</span>          <span class="token keyword">const</span> blogResult <span class="token operator">=</span> <span class="token function">handleBlogRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>blogResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  blogResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>blogData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                      JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>blogData<span class="token punctuation">)</span>                  <span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//处理 user 路由</span>          <span class="token keyword">const</span> userResult <span class="token operator">=</span> <span class="token function">handleUserRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>userResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>              userResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>userData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                      JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>                  <span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//未命中路由，返回404</span>          res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>          res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found\n"</span><span class="token punctuation">)</span>          res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> serverHandle  <span class="token comment" spellcheck="true">// ./src/controller/blog.js</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/mysql'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//博客列表</span>  <span class="token keyword">const</span> getList <span class="token operator">=</span> <span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where 1=1 `</span></span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">)</span> <span class="token punctuation">{</span>          sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and author='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' `</span></span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>          sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and title like '%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%' `</span></span>      <span class="token punctuation">}</span>      sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`order by createtime desc;`</span></span>      <span class="token comment" spellcheck="true">//返回 promise</span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//博客详情</span>  <span class="token keyword">const</span> getDetail <span class="token operator">=</span> <span class="token punctuation">(</span> id <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where id='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>rows <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//新建博客</span>  <span class="token keyword">const</span> newBlog <span class="token operator">=</span> <span class="token punctuation">(</span>blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title conten 属性</span>      <span class="token keyword">const</span> title <span class="token operator">=</span> blogData<span class="token punctuation">.</span>title      <span class="token keyword">const</span> content <span class="token operator">=</span> blogData<span class="token punctuation">.</span>content      <span class="token keyword">const</span> author <span class="token operator">=</span> blogData<span class="token punctuation">.</span>author      <span class="token keyword">const</span> createtime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`      insert into blogs (title, content, createtime, author)      values('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>createtime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')      `</span></span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>insertData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>              id<span class="token punctuation">:</span> insertData<span class="token punctuation">.</span>insertId          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//更新博客</span>  <span class="token keyword">const</span> updateBlog <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// id 就是要更新的 id</span>      <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title content 属性</span>      <span class="token keyword">const</span> title <span class="token operator">=</span> blogData<span class="token punctuation">.</span>title      <span class="token keyword">const</span> content <span class="token operator">=</span> blogData<span class="token punctuation">.</span>content      <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`          update blogs set title='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', content='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">      `</span></span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>updateData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>updateData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//删除博客</span>  <span class="token keyword">const</span> delBlog <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// id 就是要删除的博客的 id</span>      <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`delete from blogs where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and author='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>delData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>delData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>      getList<span class="token punctuation">,</span>      getDetail<span class="token punctuation">,</span>      newBlog<span class="token punctuation">,</span>      updateBlog<span class="token punctuation">,</span>      delBlog  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ./src/router/blog.js //</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>       getList<span class="token punctuation">,</span>       getDetail<span class="token punctuation">,</span>      newBlog<span class="token punctuation">,</span>      updateBlog<span class="token punctuation">,</span>      delBlog  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/blog'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>      <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id      <span class="token comment" spellcheck="true">//获取博客列表</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/list'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>author <span class="token operator">||</span> <span class="token string">''</span>          <span class="token keyword">const</span> keyword <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token string">''</span>          <span class="token comment" spellcheck="true">// const listData = getList(author, keyword)</span>          <span class="token comment" spellcheck="true">// return new SuccessModel(listData)</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>listData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//获取博客详情</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span><span class="token string">'/api/blog/detail'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getDetail</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>detailData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>detailData<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//新建博客</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/new'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> author <span class="token operator">=</span><span class="token string">'zhangsan'</span> <span class="token comment" spellcheck="true">//作者假数据，等待登录</span>          req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author <span class="token operator">=</span> author          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">newBlog</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//更新博客</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/update'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">updateBlog</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'Failed!'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//删除博客</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/del'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> author <span class="token operator">=</span><span class="token string">'zhangsan'</span> <span class="token comment" spellcheck="true">//作者假数据，等待登录</span>          req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author <span class="token operator">=</span> author          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">delBlog</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleBlogRouter</code></pre><ul><li><code>api/user/xxx</code> 对接MySQL</li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// ./src/controller/user.js //</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/mysql.js'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//登录验证</span>  <span class="token keyword">const</span> loginCheck <span class="token operator">=</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`          select username from users where username='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' and password='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'      `</span></span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>rows <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>      loginCheck  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ./src/router/user.js //</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> loginCheck <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/user'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'路径里面不能有空格'</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>      <span class="token comment" spellcheck="true">//登录</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'login failed!'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleUserRouter</code></pre><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ul><li>Node.js 连接 MySQL，如何执行 sql 语句</li><li>根据 NODE_ENV 区分设置</li><li>封装 exec 函数，API 使用 exec 操作数据库</li></ul><h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><ul><li>核心：登录校验 &amp; 登录信息存储</li><li>为何只讲登录，不讲注册？<ul><li>注册复杂程度低，涉及内容少</li><li>登录有统一解决方案</li></ul></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li><p>什么是 Cookie</p><ul><li>存储在浏览器的字符串（最大5KB）</li><li>跨域不共享</li><li>格式如 K1=V1;K2=V3;K3=V3; 因此可以存储结构化数据</li><li>每次发送 Http 请求，会将请求域的 Cookie 一起发送给 Server</li><li>Server 可以修改 Cookie 并返回给浏览器</li><li>浏览器也可以通过 JavaScript 修改 Cookie （有限制）</li></ul></li><li><p>JavaScript 操作Cookie，在浏览器中查看 Cookie</p><ul><li><code>document.cookie = &#39;k1=100;&#39;</code> 实现 Cookie 累加</li><li>F12 打开控制台 选择 Application，Storage，Cookie，选择指定 Cookie 按上方的X或delete键删除</li></ul></li><li><p>Server 端操作 Cookie，实现登录验证</p><ul><li>查看 Cookie</li><li>修改 Cookie</li><li>实现登录验证</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// ./src/router/user.js</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> login <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/user'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 路径里面不能有空格</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//获取 cookie 过期时间</span>  <span class="token keyword">const</span> getCookieExpires <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      d<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d.toGMTString() is '</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>      <span class="token comment" spellcheck="true">// 登录</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// const {username, password } = req.body</span>          <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span>req<span class="token punctuation">.</span>query          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 操作 cookie</span>              res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; path=/; httpOnly; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getCookieExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'login failed!'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 登录验证测试</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login-test'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// console.log(req.cookie.username)</span>          <span class="token comment" spellcheck="true">// 只能按顺序读取</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span>          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'未登录'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleUserRouter</code></pre><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// app.js 代码</span>  <span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/blog'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/user'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 用于处理 post data</span>  <span class="token keyword">const</span> getPostData <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>          <span class="token comment" spellcheck="true">// 开始接收数据</span>          req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 结束接收数据</span>          req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postData<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                  <span class="token keyword">return</span>              <span class="token punctuation">}</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>                  JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>              <span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> promise  <span class="token punctuation">}</span>  <span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 设置返回值格式 JSON</span>      res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 获取 path</span>      <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url      req<span class="token punctuation">.</span>path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">// 解析 query</span>      req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 解析 Cookie</span>      req<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">const</span> cookieStr <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie <span class="token operator">||</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// k1=v1;k2=v2</span>      cookieStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token keyword">const</span> arr <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> val <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          req<span class="token punctuation">.</span>cookie<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val      <span class="token punctuation">}</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'req.cookie:'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 处理 postData</span>      <span class="token function">getPostData</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>postData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          req<span class="token punctuation">.</span>body <span class="token operator">=</span> postData          <span class="token comment" spellcheck="true">// 处理 blog 路由</span>          <span class="token keyword">const</span> blogResult <span class="token operator">=</span> <span class="token function">handleBlogRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>blogResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  blogResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>blogData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                      JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>blogData<span class="token punctuation">)</span>                  <span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 处理 user 路由</span>          <span class="token keyword">const</span> userResult <span class="token operator">=</span> <span class="token function">handleUserRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>userResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>              userResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>userData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                      JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>                  <span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 未命中路由，返回404</span>          res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>          res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found\n"</span><span class="token punctuation">)</span>          res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> serverHandle</code></pre><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><ul><li>Cookie 存放信息非常危险</li><li>如何解决：cookie 中存储 userId， server 端对应 username</li><li>解决方案：session ，即 server 端储存用户信息</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/router/user.js</span><span class="token comment" spellcheck="true">// ./src/router/user.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> login <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/user'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'路径里面不能有空格'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取 cookie 过期时间</span><span class="token keyword">const</span> getCookieExpires <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d.toGMTString() is '</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token comment" spellcheck="true">// 登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// const {username, password } = req.body</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span>req<span class="token punctuation">.</span>query        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// // 操作 cookie</span>            <span class="token comment" spellcheck="true">// res.setHeader('Set-Cookie', `username=${data.username}; path=/; httpOnly; expires=${getCookieExpires()}`)</span>                req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> data<span class="token punctuation">.</span>username                req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>realname <span class="token operator">=</span> data<span class="token punctuation">.</span>realname                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'session:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>session<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'login failed!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 登录验证测试</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login-test'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(req.cookie.username)</span>        <span class="token comment" spellcheck="true">// 只能按顺序读取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                session<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'未登录'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleUserRouter</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// app.js 代码</span><span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/router/user'</span><span class="token punctuation">)</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取 cookie 过期时间</span><span class="token keyword">const</span> getCookieExpires <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'d.toGMTString() is '</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> d<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// session 数据</span><span class="token keyword">const</span> SESSION_DATA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用于处理 post data</span><span class="token keyword">const</span> getPostData <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">!==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> postData <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">// 开始接收数据</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            postData <span class="token operator">+</span><span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 结束接收数据</span>        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postData<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>                JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> promise<span class="token punctuation">}</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置返回值格式 JSON</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取 path</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    req<span class="token punctuation">.</span>path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 解析 query</span>    req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 解析 Cookie</span>    req<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> cookieStr <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie <span class="token operator">||</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// k1=v1;k2=v2</span>    cookieStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> val <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span>cookie<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 解析 session </span>    <span class="token keyword">let</span> needSetCookie <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">let</span> userId <span class="token operator">=</span> req<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>userid    <span class="token keyword">if</span> <span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SESSION_DATA<span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SESSION_DATA<span class="token punctuation">[</span>userId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        needSetCookie <span class="token operator">=</span> <span class="token boolean">true</span>        userId <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        SESSION_DATA<span class="token punctuation">[</span>userId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    req<span class="token punctuation">.</span>session <span class="token operator">=</span> SESSION_DATA<span class="token punctuation">[</span>userId<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 处理 postData</span>    <span class="token function">getPostData</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>postData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        req<span class="token punctuation">.</span>body <span class="token operator">=</span> postData        <span class="token comment" spellcheck="true">// 处理 blog 路由</span>        <span class="token keyword">const</span> blogResult <span class="token operator">=</span> <span class="token function">handleBlogRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>blogResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                blogResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>blogData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>needSetCookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 操作 cookie</span>                        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`userid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; path=/; httpOnly; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getCookieExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                    JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>blogData<span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理 user 路由</span>        <span class="token keyword">const</span> userResult <span class="token operator">=</span> <span class="token function">handleUserRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            userResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>userData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needSetCookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 操作 cookie</span>                    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`userid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; path=/; httpOnly; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getCookieExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                    JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 未命中路由，返回404</span>        res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found\n"</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> serverHandle</code></pre><p><strong>当前代码 session 代码的问题</strong></p><ul><li>session 是 JS 变量，放在 Node.js 进程内存中</li><li>进程内存有限，访问量过大，内存暴增怎么办？</li><li>正式上线是多进程，进程之间内存无法共享</li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><h4 id="Redis-特点"><a href="#Redis-特点" class="headerlink" title="Redis 特点"></a>Redis 特点</h4><ul><li>Web Server 最常用的缓存数据库，数据储存在内存中</li><li>相比于 MySQL ，访问速度极快</li><li>成本更高，储存空间小</li><li>将 Web Server 和 Redis 拆分为两个单独服务</li><li>双方独立，可扩展</li><li>像 MySQL 一样</li></ul><h4 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h4><ul><li>Windows <a href="http://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-install.html</a></li><li>Mac 使用 brew install redis</li></ul><p>打开系统设置，配置环境变量  <code>Path = C:\Program Files\Redis</code></p><h4 id="Redis-语法和操作："><a href="#Redis-语法和操作：" class="headerlink" title="Redis 语法和操作："></a>Redis 语法和操作：</h4><ul><li>启动 Redis：</li></ul><pre class=" language-dos"><code class="language-dos">redis-server.exe redis.windows.conf</code></pre><p>​    注意：这时候另启一个 cmd 窗口，原来的不要关闭，不然就无法访问服务端了。</p><ul><li>连接数据库:</li></ul><pre><code>redis-cli.exe -h 127.0.0.1 -p 6379</code></pre><ul><li>设置键值对:</li></ul><pre><code>set myKey abc</code></pre><ul><li>取出键值对:</li></ul><pre><code>get myKey</code></pre><ul><li>查看所有键值对:</li></ul><pre><code>keys *</code></pre><ul><li>标准语法 - 连接数据库并等待执行命令 ：</li></ul><pre><code>$ redis-cli -h host -p port -a password</code></pre><ul><li>停止 Redis：</li></ul><pre><code>redis-cli -h 127.0.0.1 -p 6379 shutdown </code></pre><ul><li>将该程序放到Windows服务中：</li></ul><pre><code>redis-server.exe --service-install redis.conf --loglevel verbose</code></pre><ul><li>卸载Windows服务中的Redis服务：</li></ul><pre><code>redis-server --service-uninstall</code></pre><p><strong>Redis keys 命令</strong></p><p>下表给出了与 Redis 键相关的基本命令：</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/redis/keys-del.html" target="_blank" rel="noopener">DEL key</a> 该命令用于在 key 存在时删除 key。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/redis/keys-dump.html" target="_blank" rel="noopener">DUMP key</a> 序列化给定 key ，并返回被序列化的值。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/keys-exists.html" target="_blank" rel="noopener">EXISTS key</a> 检查给定 key 是否存在。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/keys-expire.html" target="_blank" rel="noopener">EXPIRE key</a> seconds 为给定 key 设置过期时间，以秒计。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/redis/keys-expireat.html" target="_blank" rel="noopener">EXPIREAT key timestamp</a> EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/keys-pexpire.html" target="_blank" rel="noopener">PEXPIRE key milliseconds</a> 设置 key 的过期时间以毫秒计。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/keys-pexpireat.html" target="_blank" rel="noopener">PEXPIREAT key milliseconds-timestamp</a> 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/redis/keys-keys.html" target="_blank" rel="noopener">KEYS pattern</a> 查找所有符合给定模式( pattern)的 key 。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/redis/keys-move.html" target="_blank" rel="noopener">MOVE key db</a> 将当前数据库的 key 移动到给定的数据库 db 当中。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/keys-persist.html" target="_blank" rel="noopener">PERSIST key</a> 移除 key 的过期时间，key 将持久保持。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/redis/keys-pttl.html" target="_blank" rel="noopener">PTTL key</a> 以毫秒为单位返回 key 的剩余的过期时间。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/keys-ttl.html" target="_blank" rel="noopener">TTL key</a> 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/keys-randomkey.html" target="_blank" rel="noopener">RANDOMKEY</a> 从当前数据库中随机返回一个 key 。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/redis/keys-rename.html" target="_blank" rel="noopener">RENAME key newkey</a> 修改 key 的名称</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/redis/keys-renamenx.html" target="_blank" rel="noopener">RENAMENX key newkey</a> 仅当 newkey 不存在时，将 key 改名为 newkey 。</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/redis/keys-type.html" target="_blank" rel="noopener">TYPE key</a> 返回 key 所储存的值的类型。</td></tr></tbody></table><h4 id="Redis-数据持久化"><a href="#Redis-数据持久化" class="headerlink" title="Redis 数据持久化"></a>Redis 数据持久化</h4><pre><code>1. Rdb：快照形式，定期把内存中当前时刻的数据保存到磁盘。Redis默认支持的持久化方案。2. aof形式：append only file。把所有对redis数据库操作的命令，增删改操作的命令，保存到文件中。   如果redis宕机：数据库恢复时把启动命令执行一遍即可。（其实就是直接启动）</code></pre><p>持久化方案在redis.conf 配置文件中配置：</p><p> aof方式（这里直接修改就好）</p><pre><code>appendonly no              -- 默认关闭aof持久化方案， 如果要开启要把 no 修改为 yesappendfilename &quot;appendonly.aof&quot;        -- 设置aof持久化的文件名</code></pre><p>  Rdb方式（默认，这里可以自己修改）： </p><pre><code>save 900 1            -- 900秒存入1条数据，开始持久化数据save 300 10           -- 300秒存入10条数据，开始持久化数据save 60 10000         -- 60秒存入10000条数据，开始持久化数据</code></pre><p><strong>手动输入命令存储到本地： <code>redis-cli bgsave</code></strong></p><p>可能出现的问题：强制关闭Redis快照导致不能持久化。</p><pre><code>TypeError:MISCONF Redis is configured to save RDB snapshots, but is currently not     able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.</code></pre><pre><code>解决方案： 将 stop-writes-on-bgsave-error 设置为 no 输入命令： 127.0.0.1:6379&gt; config set stop-writes-on-bgsave-error no</code></pre><h4 id="Node-js-连接-Redis"><a href="#Node-js-连接-Redis" class="headerlink" title="Node.js 连接 Redis"></a>Node.js 连接 Redis</h4><pre><code> **demo 代码：**</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'redis'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建客户端</span><span class="token keyword">const</span> redisClient <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span>redisClient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 测试</span>redisClient<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'myname2'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan张三'</span><span class="token punctuation">,</span> redis<span class="token punctuation">.</span>print<span class="token punctuation">)</span>redisClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'myname2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'val'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 退出</span>    redisClient<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="Session-存入-Redis"><a href="#Session-存入-Redis" class="headerlink" title="Session 存入 Redis"></a>Session 存入 Redis</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 仅展示有改动的函数</span><span class="token comment" spellcheck="true">// app.js 代码</span><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">,</span> <span class="token keyword">set</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/db/redis'</span><span class="token punctuation">)</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置返回值格式 JSON</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取 path</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    req<span class="token punctuation">.</span>path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 解析 query</span>    req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 解析 Cookie</span>    req<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> cookieStr <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie <span class="token operator">||</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// k1=v1;k2=v2</span>    cookieStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> val <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span>cookie<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 解析 session </span>    <span class="token comment" spellcheck="true">// let needSetCookie = false</span>    <span class="token comment" spellcheck="true">// let userId = req.cookie.userid</span>    <span class="token comment" spellcheck="true">// if (userId) {</span>    <span class="token comment" spellcheck="true">//     if (!SESSION_DATA[userId]) {</span>    <span class="token comment" spellcheck="true">//         SESSION_DATA[userId] = {}</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">// } else {</span>    <span class="token comment" spellcheck="true">//     needSetCookie = true</span>    <span class="token comment" spellcheck="true">//     userId = `${Date.now()}_${Math.random()}`</span>    <span class="token comment" spellcheck="true">//     SESSION_DATA[userId] = {}</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// req.session = SESSION_DATA[userId]</span>    <span class="token comment" spellcheck="true">// 解析 session </span>    <span class="token keyword">let</span> needSetCookie <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">let</span> userId <span class="token operator">=</span> req<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>userid    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        needSetCookie <span class="token operator">=</span> <span class="token boolean">true</span>        userId <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token keyword">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'userId:'</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取session</span>    req<span class="token punctuation">.</span>sessionId <span class="token operator">=</span> userId    <span class="token keyword">get</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>sessionData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化 redis 中的 session 值</span>            <span class="token keyword">set</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>sessionId<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//初始化 session</span>            req<span class="token punctuation">.</span>session <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置 session</span>            req<span class="token punctuation">.</span>session <span class="token operator">=</span> sessionData        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'req.session:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>session<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 处理 postData</span>        <span class="token keyword">return</span> <span class="token function">getPostData</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>postData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        req<span class="token punctuation">.</span>body <span class="token operator">=</span> postData        <span class="token keyword">const</span> blogResult <span class="token operator">=</span> <span class="token function">handleBlogRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>blogResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                blogResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>blogData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>needSetCookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 操作 cookie</span>                        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`userid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; path=/; httpOnly; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getCookieExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                    JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>blogData<span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理 user 路由</span>        <span class="token keyword">const</span> userResult <span class="token operator">=</span> <span class="token function">handleUserRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            userResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>userData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needSetCookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 操作 cookie</span>                    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`userid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; path=/; httpOnly; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getCookieExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                    JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 未命中路由，返回404</span>        res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found\n"</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 仅展示有改动的函数</span><span class="token comment" spellcheck="true">// ../src/router/user.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token keyword">get</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/redis'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token comment" spellcheck="true">// 登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// const {username, password } = req.body</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// // 操作 cookie</span>            <span class="token comment" spellcheck="true">// res.setHeader('Set-Cookie', `username=${data.username}; path=/; httpOnly; expires=${getCookieExpires()}`)</span>                req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> data<span class="token punctuation">.</span>username                req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>realname <span class="token operator">=</span> data<span class="token punctuation">.</span>realname                <span class="token keyword">set</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>sessionId<span class="token punctuation">,</span> req<span class="token punctuation">.</span>session<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token string">'登录成功！'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'login failed!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h4 id="完成-Server-端登录代码"><a href="#完成-Server-端登录代码" class="headerlink" title="完成 Server 端登录代码"></a>完成 Server 端登录代码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ../src/router/user.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> login <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/user'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'路径里面不能有空格'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token keyword">get</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/redis'</span><span class="token punctuation">)</span><span class="token keyword">const</span> handleUserRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token comment" spellcheck="true">// 登录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/user/login'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// const {username, password } = req.body</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// // 操作 cookie</span>            <span class="token comment" spellcheck="true">// res.setHeader('Set-Cookie', `username=${data.username}; path=/; httpOnly; expires=${getCookieExpires()}`)</span>                req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> data<span class="token punctuation">.</span>username                req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>realname <span class="token operator">=</span> data<span class="token punctuation">.</span>realname                <span class="token keyword">set</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>sessionId<span class="token punctuation">,</span> req<span class="token punctuation">.</span>session<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token string">'登录成功！'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'login failed!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*// 登录验证测试    if (method === 'GET' &amp;&amp; req.path === '/api/user/login-test') {        // console.log(req.cookie.username)        // 只能按顺序读取        if (req.session.username) {            return Promise.resolve( new SuccessModel({                session: req.session            }))         }        return Promise.resolve( new ErrorModel('未登录'))    }*/</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleUserRouter</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ./src/router/blog.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span>     getList<span class="token punctuation">,</span>     getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 统一的登录验证函数</span><span class="token keyword">const</span> loginCheck <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>             <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'未登录'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> handleBlogRouter <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method <span class="token comment" spellcheck="true">//GET POST</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id    <span class="token comment" spellcheck="true">//获取博客列表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/list'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>author <span class="token operator">||</span> <span class="token string">''</span>        <span class="token keyword">const</span> keyword <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token string">''</span>        <span class="token comment" spellcheck="true">// const listData = getList(author, keyword)</span>        <span class="token comment" spellcheck="true">// return new SuccessModel(listData)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>isadmin<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 管理员界面</span>            <span class="token keyword">const</span> loginCheckResult <span class="token operator">=</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>loginCheckResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 未登录</span>                <span class="token keyword">return</span> loginCheckResult            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 强制查询自己的博客</span>            author <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username        <span class="token punctuation">}</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>listData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取博客详情</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span><span class="token string">'/api/blog/detail'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getDetail</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>detailData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>detailData<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//新建博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/new'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> loginCheckResult <span class="token operator">=</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginCheckResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 未登录</span>            <span class="token keyword">return</span> loginCheckResult        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// const author ='zhangsan' //作者假数据，等待登录</span>        req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">newBlog</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//更新博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/update'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// const author ='zhangsan' //作者假数据，等待登录</span>        <span class="token keyword">const</span> loginCheckResult <span class="token operator">=</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginCheckResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 未登录</span>            <span class="token keyword">return</span> loginCheckResult        <span class="token punctuation">}</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">updateBlog</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>             <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'Failed!'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除博客</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/del'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// const author ='zhangsan' //作者假数据，等待登录</span>        <span class="token keyword">const</span> loginCheckResult <span class="token operator">=</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginCheckResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 未登录</span>            <span class="token keyword">return</span> loginCheckResult        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// const author ='zhangsan' //作者假数据，等待登录</span>        req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">delBlog</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> handleBlogRouter</code></pre><h3 id="开发登录-前端联调"><a href="#开发登录-前端联调" class="headerlink" title="开发登录 前端联调"></a>开发登录 前端联调</h3><ul><li>登录依赖 Cookie，必须用浏览器</li><li>Cookie 跨域不共享，前端和 server 端必须同域</li><li>需要用到 Nginx 做代理，让前后端共域</li></ul><h4 id="启动-http-server"><a href="#启动-http-server" class="headerlink" title="启动 http-server"></a>启动 http-server</h4><ul><li><code>npm -install http-server</code></li><li><code>http-server -p 301</code></li></ul><h4 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h4><ul><li>高性能的 Web 服务器，开源免费</li><li>一般用于静态服务、负载平衡（本课用不到）</li><li>反向代理（本课用到）</li></ul><p>下载地址：</p><ul><li>Windows: <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></li><li>brew install nginx</li></ul><pre><code>Windows 启动 Nginx 的方法：1.进入Nginx文件夹，打开PowerSheel2.输入：start nginx停止Nginx的方法：nginx -s stop 或 nginx -s quit</code></pre><p><strong>配置方法：</strong> </p><p>修改文件：  <code>..\nginx-1.17.5\conf\nginx.conf</code> </p><pre><code>worker_processes  2; listen       8080;        #location / {        #   root   html;        #    index  index.html index.htm;        #}        location / {        proxy_pass http://localhost:301;        }        location /api/ {        proxy_pass http://localhost:300;        proxy_set_header Host $host;        }</code></pre><p>注意：变更设置后要重启 Nginx ！</p><h4 id="联调测试各个功能"><a href="#联调测试各个功能" class="headerlink" title="联调测试各个功能"></a>联调测试各个功能</h4><p>增加管理页面权限</p><ul><li><code>admin.html</code> 增加一个<code>isadmin=1</code> 参数，使用登录者的用户名，后端也需要修改 </li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 只展示改动代码</span>  <span class="token comment" spellcheck="true">// ../src/router/blog.js</span>      <span class="token comment" spellcheck="true">//获取博客列表</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/list'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>author <span class="token operator">||</span> <span class="token string">''</span>          <span class="token keyword">const</span> keyword <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token string">''</span>          <span class="token comment" spellcheck="true">// const listData = getList(author, keyword)</span>          <span class="token comment" spellcheck="true">// return new SuccessModel(listData)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>isadmin<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 管理员界面</span>              <span class="token keyword">const</span> loginCheckResult <span class="token operator">=</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>loginCheckResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 未登录</span>                  <span class="token keyword">return</span> loginCheckResult              <span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 强制查询自己的博客</span>              author <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username          <span class="token punctuation">}</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>listData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//删除博客</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/api/blog/del'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// const author ='zhangsan' //作者假数据，等待登录</span>          <span class="token keyword">const</span> loginCheckResult <span class="token operator">=</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>loginCheckResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 未登录</span>              <span class="token keyword">return</span> loginCheckResult          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// const author ='zhangsan' //作者假数据，等待登录</span>          <span class="token comment" spellcheck="true">// req.body.author = req.session.username</span>          <span class="token keyword">const</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">delBlog</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span>          <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span></code></pre><pre><code>#### 总结- Cookie 是什么？Session 是什么？如何实现登录？- Redis 扮演什么角色？有什么核心价值？- Nginx 的反向代理配置，联调过程中的作用## 日志- 系统日志记录系统状态  1. 访问日志 access log（ server 端最重要的日志）  2. 自定义日志（包括自定义时间，错误记录等）- Node.js 文件操作，Node.js stream  - 日志储存到文件中成本低方便  - 日志文件文件大，文件单一- 日志功能的开发和使用- 日志文件拆分，日志内容分析### Node.js 操作文件#### 代码演示​```javascriptconst fs = require(&#39;fs&#39;)const path = require(&#39;path&#39;)const fileName = path.resolve(__dirname, &#39;data.txt&#39;)// 读取文件内容fs.readFile(fileName, (err, data) =&gt; {    if (err) {        console.error(err)        return    }    console.log(data.toString())    return })const content = &#39;这是新的内容\n&#39;const opt = {    flag: &#39;a&#39; // 追加写入，覆盖用 W}fs.writeFile(fileName, content, opt, (err) =&gt; {    if (err) {        console.log(err)    }})</code></pre><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><ul><li>IO 操作的性能瓶颈<ul><li>IO 包括 “网络 IO” 和 “文件 IO”</li><li>相对于 CPU 计算和内存读写， IO 的突出特点就是：慢</li><li>如何在有限的硬件资源下提高 IO 的操作效率</li></ul></li></ul><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 标准输入输出</span><span class="token comment" spellcheck="true">// process.stdin.pipe(process.stdout)</span><span class="token comment" spellcheck="true">// const http = require('http')</span><span class="token comment" spellcheck="true">// const server = http.createServer((req, res) => {</span><span class="token comment" spellcheck="true">//     if (req.method === 'POST') {</span><span class="token comment" spellcheck="true">//         req.pipe(res)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// server.listen(8000)</span><span class="token comment" spellcheck="true">// 复制文件</span><span class="token comment" spellcheck="true">// const fs = require('fs')</span><span class="token comment" spellcheck="true">// const path = require('path')</span><span class="token comment" spellcheck="true">// const fileName1 = path.resolve(__dirname, 'data.txt')</span><span class="token comment" spellcheck="true">// const fileName2 = path.resolve(__dirname, 'data-back.txt')</span><span class="token comment" spellcheck="true">// const readStream = fs.createReadStream(fileName1)</span><span class="token comment" spellcheck="true">// const writeStream = fs.createWriteStream(fileName2)</span><span class="token comment" spellcheck="true">// readStream.pipe(writeStream)</span><span class="token comment" spellcheck="true">// readStream.on('data', chunk => {</span><span class="token comment" spellcheck="true">//     console.log(chunk.toString())</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// readStream.on('end', () => {</span><span class="token comment" spellcheck="true">//     console.log('done!')</span><span class="token comment" spellcheck="true">// })</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fileName1 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'data.txt'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>fileName1<span class="token punctuation">)</span>        readStream<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span></code></pre><h3 id="写日志"><a href="#写日志" class="headerlink" title="写日志"></a>写日志</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ../src/utils/log.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 写日志</span><span class="token keyword">function</span> <span class="token function">writeLog</span><span class="token punctuation">(</span>writeStream<span class="token punctuation">,</span> log<span class="token punctuation">)</span> <span class="token punctuation">{</span>    writeStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>log <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//关键代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成 write Stream</span><span class="token keyword">function</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fullFileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">'logs'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>    <span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>fullFileName<span class="token punctuation">,</span> <span class="token punctuation">{</span>        flags<span class="token punctuation">:</span> <span class="token string">'a'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> writeStream<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 写访问日志</span><span class="token keyword">const</span> accessWriteStream <span class="token operator">=</span> <span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'access.log'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">access</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">writeLog</span><span class="token punctuation">(</span>accessWriteStream<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span><span class="token punctuation">{</span>    access<span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js 代码</span><span class="token keyword">const</span> <span class="token punctuation">{</span> access <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/utils/log'</span><span class="token punctuation">)</span><span class="token keyword">const</span> serverHandle <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 写访问日志</span>    <span class="token function">access</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'user-agent'</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置返回值格式 JSON</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获取 path</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    req<span class="token punctuation">.</span>path <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 解析 query</span>    req<span class="token punctuation">.</span>query <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 解析 Cookie</span>    req<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> cookieStr <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie <span class="token operator">||</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// k1=v1;k2=v2</span>    cookieStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> key <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> val <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span>cookie<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 解析 session </span>    <span class="token keyword">let</span> needSetCookie <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">let</span> userId <span class="token operator">=</span> req<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>userid    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        needSetCookie <span class="token operator">=</span> <span class="token boolean">true</span>        userId <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token keyword">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log('userId:', userId)</span>    <span class="token comment" spellcheck="true">// 获取session</span>    req<span class="token punctuation">.</span>sessionId <span class="token operator">=</span> userId    <span class="token keyword">get</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>sessionData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化 redis 中的 session 值</span>            <span class="token keyword">set</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>sessionId<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//初始化 session</span>            req<span class="token punctuation">.</span>session <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置 session</span>            req<span class="token punctuation">.</span>session <span class="token operator">=</span> sessionData        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'req.session:'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>session<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 处理 postData</span>        <span class="token keyword">return</span> <span class="token function">getPostData</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>postData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        req<span class="token punctuation">.</span>body <span class="token operator">=</span> postData        <span class="token keyword">const</span> blogResult <span class="token operator">=</span> <span class="token function">handleBlogRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>blogResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                blogResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>blogData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>needSetCookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 操作 cookie</span>                        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`userid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; path=/; httpOnly; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getCookieExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                    JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>blogData<span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 处理 user 路由</span>        <span class="token keyword">const</span> userResult <span class="token operator">=</span> <span class="token function">handleUserRouter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>            userResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>userData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needSetCookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 操作 cookie</span>                    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`userid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">; path=/; httpOnly; expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getCookieExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                    JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 未命中路由，返回404</span>        res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"Content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found\n"</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> serverHandle</code></pre><h3 id="日志拆分"><a href="#日志拆分" class="headerlink" title="日志拆分"></a>日志拆分</h3><ul><li>日志内容会慢慢积累，放在一个文件中不好处理</li><li>按时间划分日志文件，如 2019-02-10.access.log</li><li>实现方式：Linux 的 crontab 命令，即定时任务</li></ul><h4 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab"></a>Crontab</h4><ul><li><p>设置定时任务，格式：<code>***** command</code> </p><pre><code>  *分钟*小时*天*月*星期 command脚本命令</code></pre><pre><code></code></pre></li><li><p>将 access.log 拷贝并重命名为 2019-02-10.access.log </p><ul><li>清空 access.log 文件，继续积累日志<pre><code></code></pre></li></ul></li></ul><h4 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h4><pre class=" language-sh"><code class="language-sh"># blog-1/src/utils/copy.sh#!/bin/shcd /Users/wfp/Project/video-tutorial/node-tutorial/code-demo/blog-1cp access.log $(date +%Y-%m-%d).access.logecho "" > access.log</code></pre><pre class=" language-sh"><code class="language-sh">命令行输入：crontab -e 输入： *0*** sh /Users/wfp/Project/video-tutorial/node-tutorial/code-demo/blog-1/src/utils/copy.sh输入：crontab -l 查看所有任务</code></pre><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><ul><li>如针对 access.log 日志，分析 chrome 的占比</li><li>日志是按行储存的，一行就是一条日志</li><li>使用 node.js 的 readline （基于 stream ，按行读取，效率高）</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'readline'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 解析文件名</span><span class="token keyword">const</span> fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span><span class="token string">'logs'</span><span class="token punctuation">,</span> <span class="token string">'access.log'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建 readStream </span><span class="token keyword">const</span> readStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建 readline 对象</span><span class="token keyword">const</span> rl <span class="token operator">=</span> readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    input<span class="token punctuation">:</span> readStream<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> chromeNum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">// 逐行读取</span>rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'line'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>lineData<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lineData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    sum<span class="token operator">++</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> lineData<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'--'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Chrome'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 累加 chrome 数量</span>        chromeNum<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听读取完成</span>rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'访问总数: '</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token string">'\nchrome 数量：'</span><span class="token punctuation">,</span> chromeNum<span class="token punctuation">,</span> <span class="token string">'\nchrome 占比：'</span><span class="token punctuation">,</span> chromeNum <span class="token operator">/</span> sum<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li>日志对 server 的重要性</li><li>IO 性能瓶颈，使用 stream 提高性能， node.js 中如何操作</li><li>使用 Crontab 拆分日志，使用 readline 分析日志内容</li></ul><h2 id="Web-安全"><a href="#Web-安全" class="headerlink" title="Web 安全"></a>Web 安全</h2><h3 id="常见安全问题和解决方案"><a href="#常见安全问题和解决方案" class="headerlink" title="常见安全问题和解决方案"></a>常见安全问题和解决方案</h3><ul><li>SQL 注入：窃取数据库内容</li><li>XSS攻击：窃取前端的 Cookie 内容</li><li>密码加密：保障用户信息安全（重要）</li><li>Server 端攻击方式非常多，预防手段也非常多</li><li>本科只讲常见的、能通过 Web Server ( Node.js ) 层面预防的</li><li>有些攻击需要<strong>硬件和服务</strong>来支持（需要 OP 支持），如 DDOS</li></ul><h4 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h4><ul><li>最原始、最简单的攻击，从有了 Web2.0 就有了 SQL 注入攻击</li><li>攻击方式：输入一个 SQL 片段，最终拼接成一段攻击代码</li><li>预防措施：使用 MySQL　的 escape 函数处理输入数据内容即可</li></ul><p>代码演示：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 在login用户名输入：' --  或 ‘；delete from users</span><span class="token comment" spellcheck="true">// 就可以注释掉后续语句或者删掉这个表</span><span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`        select username, realname from users where username='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' and password='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'    `</span></span><span class="token comment" spellcheck="true">// 解决方法</span><span class="token comment" spellcheck="true">// 使用 mysql.escape 函数转义所有数据库输入</span><span class="token comment" spellcheck="true">// ../src/controller/user.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> exec<span class="token punctuation">,</span> escape <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/mysql.js'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 登录验证</span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    username <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>    password <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`        select username, realname from users where username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and password=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    `</span></span>    <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>rows <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    login<span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//../src/controller/blog.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> exec<span class="token punctuation">,</span> escape <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/mysql'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//博客列表</span><span class="token keyword">const</span> getList <span class="token operator">=</span> <span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where 1=1 `</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>        sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and author=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>        keyword <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token string">'%'</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span>        sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and title like </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span>    <span class="token punctuation">}</span>    sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`order by createtime desc;`</span></span>    <span class="token comment" spellcheck="true">// console.log(sql)</span>    <span class="token comment" spellcheck="true">//返回 promise</span>    <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//博客详情</span><span class="token keyword">const</span> getDetail <span class="token operator">=</span> <span class="token punctuation">(</span> id <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>rows <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//新建博客</span><span class="token keyword">const</span> newBlog <span class="token operator">=</span> <span class="token punctuation">(</span>blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title conten 属性</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token keyword">const</span> author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>author<span class="token punctuation">)</span>    <span class="token keyword">const</span> createtime <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`    insert into blogs (title, content, createtime, author)    values(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>createtime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)    `</span></span>    <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>insertData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> insertData<span class="token punctuation">.</span>insertId        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//更新博客</span><span class="token keyword">const</span> updateBlog <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// id 就是要更新的 id</span>    <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title content 属性</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`        update blogs set title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, content=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    `</span></span>    <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>updateData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>updateData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除博客</span><span class="token keyword">const</span> delBlog <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// author 是 session 中的 username 无需转义 但为了保持SQL语句一致也转义</span>    author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// id 就是要删除的博客的 idauthor = escape(author)</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`delete from blogs where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and author=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>delData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getList<span class="token punctuation">,</span>    getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog<span class="token punctuation">}</span></code></pre><h4 id="XSS-攻击"><a href="#XSS-攻击" class="headerlink" title="XSS 攻击"></a>XSS 攻击</h4><ul><li>前端同学熟知的攻击方式，但 Server 端更应该掌握</li><li>攻击方式：在页面展示内容中参杂 JS 代码，以获取网页信息</li><li>预防措施：转换生成 JS 的特殊字符 </li></ul><p>代码演示：</p><pre class=" language-html"><code class="language-html">// 在新建博客 title 或 content 中输入：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>解决方案：引入 xss 库</p><ul><li><p>在文件夹 blog-1 中安装 xss： <code>npm i xss</code></p></li><li><p>代码演示：</p></li></ul><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//../src/controller/blog.js</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> exec<span class="token punctuation">,</span> escape <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/mysql'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> xss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//博客列表</span>  <span class="token keyword">const</span> getList <span class="token operator">=</span> <span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where 1=1 `</span></span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">)</span> <span class="token punctuation">{</span>          author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>          sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and author=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>          keyword <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token string">'%'</span> <span class="token operator">+</span> <span class="token function">xss</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span>          sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and title like </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span>      <span class="token punctuation">}</span>      sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`order by createtime desc;`</span></span>      <span class="token comment" spellcheck="true">// console.log(sql)</span>      <span class="token comment" spellcheck="true">//返回 promise</span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//博客详情</span>  <span class="token keyword">const</span> getDetail <span class="token operator">=</span> <span class="token punctuation">(</span> id <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>rows <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//新建博客</span>  <span class="token keyword">const</span> newBlog <span class="token operator">=</span> <span class="token punctuation">(</span>blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title conten 属性</span>      <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>author<span class="token punctuation">)</span>      <span class="token keyword">const</span> createtime <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`      insert into blogs (title, content, createtime, author)      values(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>createtime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)      `</span></span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>insertData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>              id<span class="token punctuation">:</span> insertData<span class="token punctuation">.</span>insertId          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//更新博客</span>  <span class="token keyword">const</span> updateBlog <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// id 就是要更新的 id</span>      <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title content 属性</span>      <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`          update blogs set title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, content=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">      `</span></span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>updateData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>updateData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//删除博客</span>  <span class="token keyword">const</span> delBlog <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// id 就是要删除的博客的 id </span>      <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`delete from blogs where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and author=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>delData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>delData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>      getList<span class="token punctuation">,</span>      getDetail<span class="token punctuation">,</span>      newBlog<span class="token punctuation">,</span>      updateBlog<span class="token punctuation">,</span>      delBlog  <span class="token punctuation">}</span></code></pre><h4 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h4><ul><li>万一数据库被攻破，避免泄露用户信息</li><li>攻击方式：获取用户名和密码，再去尝试登录其它系统</li><li>预防措施：密码加密，密文储存</li></ul><p>代码演示：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./src/utils/cryp.js</span><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 密钥</span><span class="token keyword">const</span> SECRT_KEY <span class="token operator">=</span> <span class="token string">'ZWiep-2947@.?'</span><span class="token comment" spellcheck="true">// md5 加密</span><span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> md5 <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> md5<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 加密函数</span><span class="token keyword">function</span> <span class="token function">genPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`password=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>SECRT_KEY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">return</span> <span class="token function">md5</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// const result = genPassword('1234')</span><span class="token comment" spellcheck="true">// console.log(result)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    genPassword<span class="token punctuation">}</span></code></pre><h3 id="不用框架开发博客总结"><a href="#不用框架开发博客总结" class="headerlink" title="不用框架开发博客总结"></a>不用框架开发博客总结</h3><h4 id="主要课程"><a href="#主要课程" class="headerlink" title="主要课程"></a>主要课程</h4><ol><li>处理 Http 接口</li><li>连接数据库</li><li>实现登录</li><li>安全</li><li>日志</li><li>上线（最后一起讲）</li></ol><h4 id="Server-和前端区别"><a href="#Server-和前端区别" class="headerlink" title="Server 和前端区别"></a>Server 和前端区别</h4><ul><li>服务稳定性（zui后讲）</li><li>内存 CPU （优化 扩展）</li><li>日志记录</li><li>安全（包括登录验证）</li><li>集群和服务拆分</li></ul><h4 id="下一步要怎么做"><a href="#下一步要怎么做" class="headerlink" title="下一步要怎么做"></a>下一步要怎么做</h4><ul><li>不使用框架开发，从零开始，关注底层 API</li><li>很琐碎、复杂，没有标准，很容易写乱</li><li>适合学习，但不适合应用，接下来开始 Express 和 Koa2</li></ul><h2 id="Express-框架"><a href="#Express-框架" class="headerlink" title="Express 框架"></a>Express 框架</h2><h3 id="Express-介绍"><a href="#Express-介绍" class="headerlink" title="Express 介绍"></a>Express 介绍</h3><ul><li>Express 是 Node.js 最常用的 Web Server 框架</li><li>什么是框架？</li><li>不要以为 Express 框架过时了</li></ul><p>目录</p><ul><li>Express 下载、安装和使用，了解 Express 中间件机制</li><li>开发接口、连接数据库、实现登录、记录日志</li><li>分析 Express 中间件原理</li></ul><p>介绍 Express </p><ul><li>安装（使用脚手架 Express-grnerator）</li><li>初始化代码介绍，处理路由</li><li>使用中间件</li></ul><h4 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h4><ul><li><code>npm install express-generator -g</code></li><li><code>express express-test</code></li><li><code>npm install &amp; npm start</code></li></ul><pre><code>npm install   //默认安装package.json中的所有模块。</code></pre><pre><code>如果只想安装dependencies中的内容，可以使用--dependencies字段：npm install --dependencies  </code></pre><pre><code>同样只想安装devDependencies中的内容，可以使用--devDependencies字段：npm install --devDependencies</code></pre><pre><code>这里安装的package.json中所有依赖的模块，都是package.json中指定的版本。如果需要安装最新的版本则要：npm update &lt;package_name&gt;  //要安装的模块的名字</code></pre><pre><code>npm install -save-dev moduleName 命令:安装模块到项目node_modules目录下。会将模块依赖写入devDependencies 节点。运行 npm install 初始化项目时，会将模块下载到项目目录下。运行npm install --production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。</code></pre><h4 id="Express-的入口代码"><a href="#Express-的入口代码" class="headerlink" title="Express 的入口代码"></a>Express 的入口代码</h4><ul><li>介绍 app.js<ul><li>各个插件的作用</li><li>思考各个插件的实现原理（结合之前学过的知识）</li><li>处理 GET 和 POST 请求</li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> createError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-errors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 处理404 生成错误页 </span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 路径</span><span class="token keyword">var</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解析 Cookie</span><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录日志</span><span class="token keyword">var</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引用路由</span><span class="token keyword">var</span> usersRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引用路由</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生成实例</span><span class="token comment" spellcheck="true">// view engine setup</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前端</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'jade'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前端</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录日志</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等于 getPostData()</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等于 getPostData() 解析其它格式数据</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解析 Cookie</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注册静态文件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> indexRouter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注册路由</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> usersRouter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注册路由</span><span class="token comment" spellcheck="true">// catch 404 and forward to error handler 获取404</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// error handler 处理报错</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// set locals, only providing error in development</span>  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>message <span class="token operator">=</span> err<span class="token punctuation">.</span>message<span class="token punctuation">;</span>  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>error <span class="token operator">=</span> req<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'env'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'dev'</span> <span class="token operator">?</span> err <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// render the error page</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app<span class="token punctuation">;</span></code></pre><h4 id="Express-如何处理路由"><a href="#Express-如何处理路由" class="headerlink" title="Express 如何处理路由"></a>Express 如何处理路由</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js</span><span class="token keyword">const</span> blogRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/blog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> userRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/user'</span><span class="token punctuation">)</span>；app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api/blog'</span><span class="token punctuation">,</span> blogRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api/user'</span><span class="token punctuation">,</span> userRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./routes/blog.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      error<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/detail'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      error<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token string">'ok!'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./routes/user.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      error<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          username<span class="token punctuation">,</span>          password      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><h4 id="Express-中间件"><a href="#Express-中间件" class="headerlink" title="Express 中间件"></a>Express 中间件</h4><ul><li>有很多 app.use</li><li>代码中的 next 参数是什么？</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// express-test/app.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 本次 http 请求实例</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求开始...'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 假设在处理 Cookie</span>    req<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token punctuation">{</span>        userId<span class="token punctuation">:</span> <span class="token string">'asd123'</span>    <span class="token punctuation">}</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 假设处理 postData</span>    <span class="token comment" spellcheck="true">// 异步</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        req<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token number">200</span>        <span class="token punctuation">}</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'处理 api 路由'</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get api 路由'</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'post api 路由'</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 模拟登录验证</span><span class="token keyword">function</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'模拟登陆失败'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            error<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>            msg<span class="token punctuation">:</span> <span class="token string">'登陆失败'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// next()</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/get-cookie'</span><span class="token punctuation">,</span> loginCheck<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get /api/get-cookie'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        error<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> req<span class="token punctuation">.</span>cookie    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/get-post-data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'post /api/get-poat-data'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        error<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'处理 404'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        error<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        msg<span class="token punctuation">:</span> <span class="token string">'404'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is running on port 8000...'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><ul><li>初始化代码中，各个插件的作用</li><li>Express 如何处理路由</li><li>Express 中间件</li></ul><h3 id="Express-开发博客项目"><a href="#Express-开发博客项目" class="headerlink" title="Express 开发博客项目"></a>Express 开发博客项目</h3><ul><li>初始化项目，之前的部分代码可以复用</li><li>开发路由，并实现登录</li><li>记录日志</li></ul><h4 id="初始化开发环境"><a href="#初始化开发环境" class="headerlink" title="初始化开发环境"></a>初始化开发环境</h4><ul><li>安装插件 mysql xss</li><li>controller reModel utils conf db 相关代码可以拷贝过来</li><li>初始化路由</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./routes/blog.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>     getList<span class="token punctuation">,</span>     getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>author <span class="token operator">||</span> <span class="token string">''</span>    <span class="token keyword">const</span> keyword <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true">// const listData = getList(author, keyword)</span>    <span class="token comment" spellcheck="true">// return new SuccessModel(listData)</span>    <span class="token comment" spellcheck="true">// if (req.query.isadmin) {</span>    <span class="token comment" spellcheck="true">//     // 管理员界面</span>    <span class="token comment" spellcheck="true">//     const loginCheckResult = loginCheck(req)</span>    <span class="token comment" spellcheck="true">//     if (loginCheckResult) {</span>    <span class="token comment" spellcheck="true">//         // 未登录</span>    <span class="token comment" spellcheck="true">//         return loginCheckResult</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">//     // 强制查询自己的博客</span>    <span class="token comment" spellcheck="true">//     author = req.session.username</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>listData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/detail'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      error<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token string">'ok!'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><h4 id="登录-Express-处理-Session"><a href="#登录-Express-处理-Session" class="headerlink" title="登录 Express 处理 Session"></a>登录 Express 处理 Session</h4><ul><li>使用 express-session 和 connect-redis ，简单方便</li><li>req.session 保存登录信息，登录检验做成 express 中间件</li></ul><p>安装 session 插件： <code>npm i express-session</code></p><h4 id="登录-Session-连接-Redis"><a href="#登录-Session-连接-Redis" class="headerlink" title="登录 Session 连接 Redis"></a>登录 Session 连接 Redis</h4><p>安装 redis 插件： <code>npm i connect-redis</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js</span><span class="token keyword">const</span> RedisStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'connect-redis'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token keyword">const</span> redisClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db/redis'</span><span class="token punctuation">)</span><span class="token keyword">const</span> sessionStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    client<span class="token punctuation">:</span> redisClient<span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    secret<span class="token punctuation">:</span><span class="token string">'QZlp#31_59!'</span><span class="token punctuation">,</span>    cookie<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// path: '', //默认配置</span>        <span class="token comment" spellcheck="true">// httpOnly: true, //默认配置</span>        maxAge<span class="token punctuation">:</span> <span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    store<span class="token punctuation">:</span> sessionStore<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// redis.js</span><span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'redis'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> REDIS_CONF <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../conf/db'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建客户端</span><span class="token keyword">const</span> redisClient <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span>REDIS_CONF<span class="token punctuation">.</span>port<span class="token punctuation">,</span> REDIS_CONF<span class="token punctuation">.</span>host<span class="token punctuation">)</span>redisClient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> redisClient</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./routes/blog.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>     getList<span class="token punctuation">,</span>     getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>author <span class="token operator">||</span> <span class="token string">''</span>    <span class="token keyword">const</span> keyword <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token string">''</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>isadmin<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//     // 管理员界面</span>    <span class="token comment" spellcheck="true">//     const loginCheckResult = loginCheck(req)</span>    <span class="token comment" spellcheck="true">//     if (loginCheckResult) {</span>    <span class="token comment" spellcheck="true">//         // 未登录</span>    <span class="token comment" spellcheck="true">//         return loginCheckResult</span>    <span class="token comment" spellcheck="true">//     }</span>    <span class="token comment" spellcheck="true">//     // 强制查询自己的博客</span>        author <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username    <span class="token punctuation">}</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>listData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/detail'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      error<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token string">'ok!'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><h4 id="登录中间件"><a href="#登录中间件" class="headerlink" title="登录中间件"></a>登录中间件</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./middleware/loginCheck.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'未登录'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="开发路由"><a href="#开发路由" class="headerlink" title="开发路由"></a>开发路由</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./routes/blog.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>     getList<span class="token punctuation">,</span>     getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span><span class="token keyword">const</span> loginCheck <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../middleware/loginCheck.js'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>author <span class="token operator">||</span> <span class="token string">''</span>    <span class="token keyword">const</span> keyword <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token string">''</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>isadmin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 管理员界面</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 未登录</span>            res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'未登录'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 强制查询自己的博客</span>        author <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username    <span class="token punctuation">}</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>listData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/detail'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">getDetail</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>detailData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>detailData<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/new'</span><span class="token punctuation">,</span> loginCheck<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">newBlog</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/update'</span><span class="token punctuation">,</span> loginCheck<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">updateBlog</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'更新博客失败!'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/del'</span><span class="token punctuation">,</span> loginCheck<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">delBlog</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'删除失败！'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><h4 id="使用-Morgan-写日志"><a href="#使用-Morgan-写日志" class="headerlink" title="使用 Morgan 写日志"></a>使用 Morgan 写日志</h4><ul><li>access log 记录，直接使用脚手架推荐的 Morgan</li><li>自定义日志使用 console.log 和 console.error 即可</li><li>日志拆分、日志内容分析，之前讲过，不再赘述</li></ul><p>项目地址： <a href="https://github.com/expressjs/morgan" target="_blank" rel="noopener">https://github.com/expressjs/morgan</a> </p><p>搜索：Predefined Formats</p><p>访问日志 代码演示：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  app.js</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 路径</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> ENV <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV<span class="token keyword">if</span> <span class="token punctuation">(</span>ENV <span class="token operator">!=</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开发环境</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> logFileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'logs'</span><span class="token punctuation">,</span> <span class="token string">'access.log'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>logFileName<span class="token punctuation">,</span> <span class="token punctuation">{</span>        flags<span class="token punctuation">:</span> <span class="token string">'a'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">'combined'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        stream<span class="token punctuation">:</span> writeStream    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// app.use(logger('dev',{</span><span class="token comment" spellcheck="true">//     stream: process.stdout</span><span class="token comment" spellcheck="true">// })); // 记录日志</span></code></pre><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><ul><li>写法上的改变，如 req.query, res.json</li><li>使用 express-session， connect-redis，登录中间件</li><li>使用 Morgan</li></ul><h3 id="中间件原理介绍"><a href="#中间件原理介绍" class="headerlink" title="中间件原理介绍"></a>中间件原理介绍</h3><ul><li>回顾中间件使用</li><li>分析如何实现<ul><li>app.use 用来注册中间件，先收集起来</li><li>遇到 http 请求，根据 path 和 method 判断触发哪些</li><li>实现 next 机制，即上一个通过 next 触发下一个</li></ul></li><li>代码演示</li></ul><h3 id="中间件代码实现"><a href="#中间件代码实现" class="headerlink" title="中间件代码实现"></a>中间件代码实现</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./lib/express/like-express.js</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> slice <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token keyword">class</span> <span class="token class-name">LikeExpress</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 存放中间件列表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token punctuation">{</span>            all<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// app.use(...)</span>            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// app.get(...)</span>            post<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// app.post(...)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">register</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            info<span class="token punctuation">.</span>path <span class="token operator">=</span> path            <span class="token comment" spellcheck="true">// 从第二个参数开始，转为数组，存入 stack</span>            info<span class="token punctuation">.</span>stack <span class="token operator">=</span> slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            info<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token string">'/'</span>            <span class="token comment" spellcheck="true">// 从第一个参数开始，转换为数组，存入 stack</span>            info<span class="token punctuation">.</span>stack <span class="token operator">=</span> slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> info    <span class="token punctuation">}</span>    <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>register<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>register<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>register<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>post<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">match</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/favicon.ico'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> stack        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取 routes</span>        <span class="token keyword">let</span> curRoutes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        curRoutes <span class="token operator">=</span> curRoutes<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">.</span>all<span class="token punctuation">)</span>        curRoutes <span class="token operator">=</span> curRoutes<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>routes<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">)</span>        curRoutes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>routeInfo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>routeInfo<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// url === '/api/get-cookie' 且 routeInfo.path === '/'</span>                <span class="token comment" spellcheck="true">// url === '/api/get-cookie' 且 routeInfo.path === '/api'</span>                <span class="token comment" spellcheck="true">// url === '/api/get-cookie' 且 routeInfo.path === '/api/get-cookie'</span>                stack <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>routeInfo<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> stack    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 核心的 next 机制</span>    <span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拿到第一个匹配的中间件</span>            <span class="token keyword">const</span> middleware <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>middleware<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行中间件函数</span>                <span class="token function">middleware</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span>json <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>                    JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url            <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">const</span> resultList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> resultList<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 工厂函数</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LikeExpress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 测试代码 ./lib/express/test.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./like-express.js'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 本次 http 请求的实例</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求开始...'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 假设在处理 cookie</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'处理coookie...'</span><span class="token punctuation">)</span>    req<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token punctuation">{</span>        uerId<span class="token punctuation">:</span> <span class="token string">'abc123'</span>    <span class="token punctuation">}</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'处理 /api 路由'</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get /api 路由'</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 模拟登录验证</span><span class="token keyword">function</span> <span class="token function">loginCheck</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'模拟登录成功'</span><span class="token punctuation">)</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/get-cookie'</span><span class="token punctuation">,</span> loginCheck<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get /api/get-cookie'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        errno<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> req<span class="token punctuation">.</span>cookie    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is running on port 800'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><ul><li>使用框架开发的好处（相比之前不使用框架）</li><li>express 的使用和路由处理，以及操作 session redis 日志等</li><li>express 中间件的使用和原理</li></ul><h4 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h4><ul><li>JS 的异步回调带来了很多问题，Promise 也不能解决所有</li><li>Node.js 已经支持 async/await 语法，要用起来</li><li>Ko2 也已经原生支持 async/await 语法，接下来讲解</li></ul><h2 id="Koa2-框架"><a href="#Koa2-框架" class="headerlink" title="Koa2 框架"></a>Koa2 框架</h2><ul><li>Express 中间件是异步回调，Koa2 原生支持 async/await</li><li>新开发的框架和系统，都是开始基于 Koa2，例如 egg.js</li><li>Express 虽然未过时，但是 Koa2 肯定是未来的趋势</li></ul><p>目录</p><ul><li>async/await 语法介绍，安装和使用 Koa2</li><li>开发接口，连接数据库，实现登录，记录日志</li><li>分析 Koa2 中间件原理</li></ul><h3 id="async-await-语法介绍"><a href="#async-await-语法介绍" class="headerlink" title="async await 语法介绍"></a>async await 语法介绍</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// async await 获取内容</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readFileData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 同步写法</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> aData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span><span class="token string">'a.json'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aData:'</span><span class="token punctuation">,</span> aData<span class="token punctuation">)</span>    <span class="token keyword">const</span> bData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>aData<span class="token punctuation">.</span>next<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bData:'</span><span class="token punctuation">,</span> bData<span class="token punctuation">)</span>    <span class="token keyword">const</span> cData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span>bData<span class="token punctuation">.</span>next<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cData:'</span><span class="token punctuation">,</span> cData<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">readFileData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">readAData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> aData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span><span class="token string">'a.json'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> aData<span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> aData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readAData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aData:'</span><span class="token punctuation">,</span> aData<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 要点 async await</span><span class="token comment" spellcheck="true">// 1. await 后面可以追加 promise 对象，获取 resolve 的值</span><span class="token comment" spellcheck="true">// 2. await 必须包裹在 async 函数内</span><span class="token comment" spellcheck="true">// 3. async 函数执行返回的也是一个 promise 对象</span><span class="token comment" spellcheck="true">// 4. try-catch 截获 promise 中 reject 的值</span></code></pre><h3 id="介绍-Koa2"><a href="#介绍-Koa2" class="headerlink" title="介绍 Koa2"></a>介绍 Koa2</h3><h4 id="安装-Koa2"><a href="#安装-Koa2" class="headerlink" title="安装 Koa2"></a>安装 Koa2</h4><ul><li><code>npm install koa-generator -g</code></li><li><code>Koa2 koa2-test(初始化目录名)</code></li><li><code>npm install &amp; npm run dev</code></li></ul><h4 id="介绍-app-js"><a href="#介绍-app-js" class="headerlink" title="介绍 app.js"></a>介绍 app.js</h4><ul><li>介绍各个插件的作用</li><li>思考各个插件的实现原理（结合之前学过的知识）</li><li>处理 get 请求和 post 请求</li></ul><p>代码演示</p><h4 id="介绍路由"><a href="#介绍路由" class="headerlink" title="介绍路由"></a>介绍路由</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./blog-koa2/routes/blog.js</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">'/api/blog'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> qurey <span class="token operator">=</span> ctx<span class="token punctuation">.</span>qurey    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>        errno<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        qurey<span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'这是博客列表'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/bar'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'this is a users/bar response'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./blog-koa2/routes/users.js</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">'/api/users'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>        errno<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        username<span class="token punctuation">,</span>        password    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/bar'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'this is a users/bar response'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre><h4 id="介绍中间件机制"><a href="#介绍中间件机制" class="headerlink" title="介绍中间件机制"></a>介绍中间件机制</h4><ul><li>app.use 和 express 一样</li><li>next 返回 promise ，其它和 express 一样</li></ul><h3 id="开发接口-1"><a href="#开发接口-1" class="headerlink" title="开发接口"></a>开发接口</h3><h4 id="实现-Session"><a href="#实现-Session" class="headerlink" title="实现 Session"></a>实现 Session</h4><ul><li>和 express 类似</li><li>基于 koa-generic-session 和 koa-redis<ul><li><code>npm i koa-generic-session koa-redis redis --save</code></li></ul></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./blog-koa2/app.js </span><span class="token comment" spellcheck="true">// session 配置</span><span class="token comment" spellcheck="true">// 密匙</span>app<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Il34*fs24'</span><span class="token punctuation">]</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置 cookie</span>    cookie<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        httpOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        maxAge<span class="token punctuation">:</span> <span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 配置 redis</span>    store<span class="token punctuation">:</span> <span class="token function">redisStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        all<span class="token punctuation">:</span> <span class="token string">'127.0.0.1：6379'</span> <span class="token comment" spellcheck="true">// 暂时写死</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./blog-koa2/routes/users.js </span><span class="token comment" spellcheck="true">// 测试 session </span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/session-test'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>viewCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>viewCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>viewCount<span class="token operator">++</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>        errno<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        viewCount<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>viewCount    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="开发路由-1"><a href="#开发路由-1" class="headerlink" title="开发路由"></a>开发路由</h4><ul><li>复用之前代码， 如 mysql、 登录中间件 、controller、model 等</li><li>初始化路由，并开发接口</li><li>联调测试</li></ul><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><ul><li><code>npm i mysql</code></li><li><code>npm i xss</code></li></ul><h5 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./blog-koa2/app.js</span><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> views <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-views'</span><span class="token punctuation">)</span><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-json'</span><span class="token punctuation">)</span><span class="token keyword">const</span> onerror <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-onerror'</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyparser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-logger'</span><span class="token punctuation">)</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-generic-session'</span><span class="token punctuation">)</span><span class="token keyword">const</span> redisStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-redis'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> REDIS_CONF <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./conf/db.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/user.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> blog <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/blog.js'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// error handler</span><span class="token function">onerror</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// middlewares</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyparser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  enableTypes<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'json'</span><span class="token punctuation">,</span> <span class="token string">'form'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-static'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">views</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/views'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  extension<span class="token punctuation">:</span> <span class="token string">'pug'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// logger</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ms<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// session 配置</span>app<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Il34*fs24'</span><span class="token punctuation">]</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置 cookie</span>    cookie<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        httpOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        maxAge<span class="token punctuation">:</span> <span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 配置 redis</span>    store<span class="token punctuation">:</span> <span class="token function">redisStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// all: '127.0.0.1：6379' // 暂时写死</span>        all<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>REDIS_CONF<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>REDIS_CONF<span class="token punctuation">.</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// routes</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>blog<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> blog<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// error-handling</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'server error'</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>     getList<span class="token punctuation">,</span>     getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/blog'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span><span class="token keyword">const</span> loginCheck <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../middleware/loginCheck.js'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">'/api/blog'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> author <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>author <span class="token operator">||</span> <span class="token string">''</span>    <span class="token keyword">const</span> keyword <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token string">''</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>isadmin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 管理员界面</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'is admin'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 未登录</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'is admin but not login'</span><span class="token punctuation">)</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'未登录'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 强制查询自己的博客</span>        author <span class="token operator">=</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username    <span class="token punctuation">}</span>    <span class="token keyword">const</span> listData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>     ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>listData<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/detail'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> detailData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDetail</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>detailData<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/new'</span><span class="token punctuation">,</span> loginCheck<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body    body<span class="token punctuation">.</span>author <span class="token operator">=</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">newBlog</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/update'</span><span class="token punctuation">,</span> loginCheck<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">updateBlog</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'更新博客失败!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/del'</span><span class="token punctuation">,</span> loginCheck<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> author <span class="token operator">=</span> ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">delBlog</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'删除失败！'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./blog-koa2/routes/users.js</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> login <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../controller/user.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> SuccessModel<span class="token punctuation">,</span> ErrorModel <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model/resModel'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">'/api/user'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password<span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// // 操作 cookie</span>    <span class="token comment" spellcheck="true">// res.setHeader('Set-Cookie', `username=${data.username}; path=/; httpOnly; expires=${getCookieExpires()}`)</span>        ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> data<span class="token punctuation">.</span>username        ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>realname <span class="token operator">=</span> data<span class="token punctuation">.</span>realname        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuccessModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorModel</span><span class="token punctuation">(</span><span class="token string">'登录失败!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// router.get('/session-test', async function (ctx, next) {</span><span class="token comment" spellcheck="true">//     if (ctx.session.viewCount == null) {</span><span class="token comment" spellcheck="true">//         ctx.session.viewCount = 0</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">//     ctx.session.viewCount++</span><span class="token comment" spellcheck="true">//     ctx.body = {</span><span class="token comment" spellcheck="true">//         errno: 0,</span><span class="token comment" spellcheck="true">//         viewCount: ctx.session.viewCount</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// })</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./blog-koa2/controller/users.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> exec<span class="token punctuation">,</span> escape <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/mysql.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> genPassword <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/cryp.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> xss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 登录验证</span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    username <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> <span class="token function">genPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>    password <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`        select username, realname from users where username=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and password=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    `</span></span>    <span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">return</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    login<span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//../blog-koa2/controller/blog.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> exec<span class="token punctuation">,</span> escape <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/mysql'</span><span class="token punctuation">)</span><span class="token keyword">const</span> xss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//../blog-koa2/controller/blog.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> exec<span class="token punctuation">,</span> escape <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../db/mysql'</span><span class="token punctuation">)</span><span class="token keyword">const</span> xss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//博客列表</span><span class="token keyword">const</span> getList <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where 1=1 `</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>        sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and author=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>        keyword <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token string">'%'</span> <span class="token operator">+</span> <span class="token function">xss</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span>        sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and title like </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span>    <span class="token punctuation">}</span>    sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`order by createtime desc;`</span></span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//博客详情</span><span class="token keyword">const</span> getDetail <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span> id <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">return</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//新建博客</span><span class="token keyword">const</span> newBlog <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title conten 属性</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>author<span class="token punctuation">)</span>    <span class="token keyword">const</span> createtime <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`    insert into blogs (title, content, createtime, author)    values(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>createtime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)    `</span></span>    <span class="token keyword">const</span> insertData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> insertData<span class="token punctuation">.</span>insertId    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//更新博客</span><span class="token keyword">const</span> updateBlog <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// id 就是要更新的 id</span>    <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title content 属性</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`        update blogs set title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, content=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    `</span></span>    <span class="token keyword">const</span> updateData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>updateData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除博客</span><span class="token keyword">const</span> delBlog <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// id 就是要删除的博客的 id </span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`delete from blogs where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and author=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token comment" spellcheck="true">// console.log(sql)</span>    <span class="token keyword">const</span> delData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>delData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getList<span class="token punctuation">,</span>    getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//博客列表</span><span class="token keyword">const</span> getList <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>author<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where 1=1 `</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>        sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and author=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>        keyword <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token string">'%'</span> <span class="token operator">+</span> <span class="token function">xss</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">)</span>        sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`and title like </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span>    <span class="token punctuation">}</span>    sql <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`order by createtime desc;`</span></span>    <span class="token comment" spellcheck="true">// console.log(sql)</span>    <span class="token comment" spellcheck="true">//返回 promise</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//博客详情</span><span class="token keyword">const</span> getDetail <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span> id <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from blogs where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">return</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//新建博客</span><span class="token keyword">const</span> newBlog <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title conten 属性</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>author<span class="token punctuation">)</span>    <span class="token keyword">const</span> createtime <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`    insert into blogs (title, content, createtime, author)    values(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>createtime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)    `</span></span>    <span class="token keyword">const</span> insertData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> insertData<span class="token punctuation">.</span>insertId    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//更新博客</span><span class="token keyword">const</span> updateBlog <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> blogData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// id 就是要更新的 id</span>    <span class="token comment" spellcheck="true">// blogData 是一个博客对象，包含 title content 属性</span>    <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">xss</span><span class="token punctuation">(</span>blogData<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`        update blogs set title=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, content=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">    `</span></span>    <span class="token keyword">const</span> updateData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>updateData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除博客</span><span class="token keyword">const</span> delBlog <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    author <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// id 就是要删除的博客的 id </span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`delete from blogs where id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and author=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token comment" spellcheck="true">// console.log(sql)</span>    <span class="token keyword">const</span> delData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>delData<span class="token punctuation">.</span>affectedRows <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    getList<span class="token punctuation">,</span>    getDetail<span class="token punctuation">,</span>    newBlog<span class="token punctuation">,</span>    updateBlog<span class="token punctuation">,</span>    delBlog<span class="token punctuation">}</span></code></pre><h4 id="联调"><a href="#联调" class="headerlink" title="联调"></a>联调</h4><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><ul><li>access log 记录，使用 morgan</li><li>自定义日志使用 console.log 和 console.error</li><li>日志文件拆分、日志内存分析，之前讲过，不再赘述</li></ul><p>代码演示：</p><ul><li><code>npm i koa-morgan</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js</span><span class="token comment" spellcheck="true">// 记录日志</span><span class="token keyword">const</span> ENV <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV<span class="token keyword">if</span> <span class="token punctuation">(</span>ENV <span class="token operator">!=</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开发环境</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">morgan</span><span class="token punctuation">(</span><span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 线上环境</span>    <span class="token keyword">const</span> logFileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'logs'</span><span class="token punctuation">,</span> <span class="token string">'access.log'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> writeStream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>logFileName<span class="token punctuation">,</span> <span class="token punctuation">{</span>        flags<span class="token punctuation">:</span> <span class="token string">'a'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">morgan</span><span class="token punctuation">(</span><span class="token string">'combined'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        stream<span class="token punctuation">:</span> writeStream    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="中间件原理分析"><a href="#中间件原理分析" class="headerlink" title="中间件原理分析"></a>中间件原理分析</h3><ul><li>回顾中间件使用</li><li>分析如何实现<ul><li>app.use 用来注册中间件，先收集起来</li><li>实现 next 机制，即上一个通过 next 触发下一个</li><li>不涉及 method 和 path 的判断</li></ul></li><li>代码演示</li></ul><p>洋葱模型：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// logger</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一层洋葱-开始'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> rt <span class="token operator">=</span> ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'X-Response-Time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一层洋葱-结束'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// x-response-time</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二层洋葱-开始'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> ms <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'X-Response-Time'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ms<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二层洋葱-结束'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// response</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> ctx <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三层洋葱-开始'</span><span class="token punctuation">)</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三层洋葱-结束'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="中间件代码演示"><a href="#中间件代码演示" class="headerlink" title="中间件代码演示"></a>中间件代码演示</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./lib/koa2/like-koa2.js</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 组合中间件</span><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span>middlewareList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> fn <span class="token operator">=</span> middlewareList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>                    <span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dispatch<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// promise</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LikeKoa2</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>middlewareList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token function">use</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>middlewareList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    <span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">{</span>            req<span class="token punctuation">,</span>            res        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span>query <span class="token operator">=</span> req<span class="token punctuation">.</span>query        <span class="token keyword">return</span> ctx    <span class="token punctuation">}</span>    <span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>middlewareList<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> LikeKoa2</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./lib/koa2/test.js</span><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./like-koa2.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// logger</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一层洋葱-开始'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> rt <span class="token operator">=</span> ctx<span class="token punctuation">[</span><span class="token string">'X-Response-Time'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一层洋葱-结束'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// x-response-time</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二层洋葱-开始'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> ms <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>  ctx<span class="token punctuation">[</span><span class="token string">'X-Response-Time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ms<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms`</span></span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二层洋葱-结束'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// response</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> ctx <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三层洋葱-开始'</span><span class="token punctuation">)</span>  ctx<span class="token punctuation">.</span>res<span class="token punctuation">.</span>end <span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三层洋葱-结束'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><ul><li>使用 async/await 的好处</li><li>koa2 的使用，以及如何操作 session redis 日志</li><li>koa2 中间件的使用和原理</li></ul><p>下一步：</p><ul><li>一直处于开发环境，和前端联调过，但从未上线</li><li>如何实现线上服务稳定性？PM2 是什么？</li><li>nginx 在线上环境扮演了什么重要作用？</li></ul><h2 id="线上环境"><a href="#线上环境" class="headerlink" title="线上环境"></a>线上环境</h2><ul><li>服务器稳定性</li><li>充分利用服务器硬件资源，以便提高性能</li><li>线上日志记录</li></ul><p>PM2 功能：</p><ul><li>进程守护，系统崩溃自动重启</li><li>启动多进程，充分利用 CPU 和内存</li><li>自带日志记录功能</li></ul><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><ul><li><code>npm install pm2 -g</code></li><li><code>pm2 --version</code></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p><code>pm2 start &lt;配置或者文件&gt;</code> 启动 pm2</p></li><li><p><code>pm2 list</code> 查看所有 pm2 进程</p></li><li><p><code>pm2 restart &lt;Appname&gt;/&lt;id&gt;</code></p></li><li><p><code>pm2 stop &lt;AppName&gt;/&lt;id&gt;</code></p></li><li><p><code>pm2 delete &lt;AppName&gt;/&lt;id&gt;</code></p></li><li><p><code>pm2 info &lt;AppName&gt;/&lt;id&gt;</code> 查看进程详细信息</p></li><li><p><code>pm2 log &lt;AppName&gt;/&lt;id&gt;</code> 查看进程日志</p></li><li><p><code>pm2 monit &lt;AppName&gt;/&lt;id&gt;</code> 查看 CPU 内存信息</p></li></ul><pre class=" language-shell"><code class="language-shell">  $ pm2 start app.js              # 启动app.js应用程序  $ pm2 start app.js -i 4         # cluster mode 模式启动4个app.js的应用实例     # 4个应用程序会自动进行负载均衡  $ pm2 start app.js --name="api" # 启动应用程序并命名为 "api"  $ pm2 start app.js --watch      # 当文件变化时自动重启应用  $ pm2 start script.sh           # 启动 bash 脚本  $ pm2 list                      # 列表 PM2 启动的所有的应用程序  $ pm2 monit                     # 显示每个应用程序的CPU和内存占用情况  $ pm2 show [app-name]           # 显示应用程序的所有信息  $ pm2 logs                      # 显示所有应用程序的日志  $ pm2 logs [app-name]           # 显示指定应用程序的日志  $ pm2 flush  $ pm2 stop all                  # 停止所有的应用程序  $ pm2 stop 0                    # 停止 id为 0的指定应用程序  $ pm2 restart all               # 重启所有应用  $ pm2 reload all                # 重启 cluster mode下的所有应用  $ pm2 gracefulReload all        # Graceful reload all apps in cluster mode  $ pm2 delete all                # 关闭并删除所有应用  $ pm2 delete 0                  # 删除指定应用 id 0  $ pm2 scale api 10              # 把名字叫api的应用扩展到10个实例  $ pm2 reset [app-name]          # 重置重启数量  $ pm2 startup                   # 创建开机自启动命令  $ pm2 save                      # 保存当前应用列表  $ pm2 resurrect                 # 重新加载保存的应用列表  $ pm2 update                    # Save processes, kill PM2 and restore processes  $ pm2 generate                  # Generate a sample json configuration file  $ pm2 deploy app.json prod setup    # Setup "prod" remote server  $ pm2 deploy app.json prod          # Update "prod" remote server  $ pm2 deploy app.json prod revert 2 # Revert "prod" remote server by 2  $ pm2 module:generate [name]    # Generate sample module with name [name]  $ pm2 install pm2-logrotate     # Install module (here a log rotation system)  $ pm2 uninstall pm2-logrotate   # Uninstall module  $ pm2 publish                   # Increment version, git push and npm publish</code></pre><pre class=" language-shell"><code class="language-shell">windows 报错无法显示和解决方法：PS E:\web\node\JStest\JStest\Node\node_blog\pm2-test> pm2 monitpm2 : 无法加载文件 C:\Users\kishe\AppData\Roaming\npm\pm2.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。所在位置 行:1 字符: 1+ pm2 monit+ ~~~    + CategoryInfo          : SecurityError: (:) []，PSSecurityException    + FullyQualifiedErrorId : UnauthorizedAccessPS E:\web\node\JStest\JStest\Node\node_blog\pm2-test> set-ExecutionPolicy位于命令管道位置 1 的 cmdlet Set-ExecutionPolicy请为以下参数提供值:ExecutionPolicy: RemoteSigned执行策略更改执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): yPS E:\web\node\JStest\JStest\Node\node_blog\pm2-test> get-ExecutionPolicyRemoteSignedPS E:\web\node\JStest\JStest\Node\node_blog\pm2-test></code></pre><h4 id="进程守护"><a href="#进程守护" class="headerlink" title="进程守护"></a>进程守护</h4><ul><li>node app.js 和 nodemon app.js , 进程崩溃则不能访问</li><li>pm2 遇到进程崩溃，会自动重启</li></ul><p>代码演示：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ./pm2-test/app.js</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模拟日志</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cur time'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 模拟错误</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'假装出错了'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 模拟一个错误</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/err'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'/err 出错了'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>        JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            errno<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            msg<span class="token punctuation">:</span> <span class="token string">'pm2 test server 2'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is runnig on port 8000...'</span><span class="token punctuation">)</span></code></pre><h4 id="常用配置和日志记录"><a href="#常用配置和日志记录" class="headerlink" title="常用配置和日志记录"></a>常用配置和日志记录</h4><ul><li>新建 PM2 配置文件（包括进程数量，日志文件目录等）</li><li>修改 PM2 启动命令，重启</li><li>访问 server ，检查日志文件的内容（日志记录是否生效）</li></ul><p>配置文件：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"apps"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"pm2-test-server"</span><span class="token punctuation">,</span>        <span class="token property">"script"</span><span class="token operator">:</span> <span class="token string">"app.js"</span><span class="token punctuation">,</span>        <span class="token property">"watch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"ingnore_watch"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"node_modules"</span><span class="token punctuation">,</span>            <span class="token string">"logs"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"instances"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>        <span class="token property">"error_file"</span><span class="token operator">:</span> <span class="token string">"logs/err.log"</span><span class="token punctuation">,</span>        <span class="token property">"out_file"</span><span class="token operator">:</span> <span class="token string">"logs/out.log"</span><span class="token punctuation">,</span>        <span class="token property">"log_date_format"</span><span class="token operator">:</span> <span class="token string">"YYYY-MM-DD HH:mm:ss"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动方式：</p><pre class=" language-cmd"><code class="language-cmd">{  "name": "pm2-test",  "version": "1.0.0",  "description": "",  "main": "app.js",  "scripts": {    "test": "echo \"Error: no test specified\" && exit 1",    "dev": "cross-env NODE_ENV=dev nodemon app.js",    "prd": "cross-env NODE_ENV=production pm2 start pm2.conf.json"  },  "keywords": [],  "author": "",  "license": "ISC",  "dependencies": {    "pm2": "^4.2.0"  }}</code></pre><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><ul><li>为何使用多进程？<ul><li>回顾之前讲 session 时说过， 操作系统限制一个进程的内存</li><li>内存：无法充分利用机器全部内存</li><li>CPU：无法充分利用多核CPU</li></ul></li><li>多进程和 redis<ul><li>多进程之间，内存无法共享</li><li>多进程访问一个 redis ，实现数据共享</li></ul></li></ul><h4 id="关于服务器运维"><a href="#关于服务器运维" class="headerlink" title="关于服务器运维"></a>关于服务器运维</h4><ul><li>服务器运维，一般都由专业的 OP 人员和部门来处理</li><li>大公司都有自己的运维团队</li><li>中小型工期推荐使用一些云服务，如阿里云的 node 平台</li></ul><h4 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h4><ul><li>PM2 的核心价值</li><li>PM2 的常用命令和配置，日志记录</li><li>多进程</li></ul><h2 id="课程总结"><a href="#课程总结" class="headerlink" title="课程总结"></a>课程总结</h2>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.5从零基础入门到实战项目开发去哪儿网App</title>
      <link href="/2020/06/02/vue2-5-cong-ling-ji-chu-ru-men-dao-shi-zhan-xiang-mu-kai-fa-qu-na-er-wang-app/"/>
      <url>/2020/06/02/vue2-5-cong-ling-ji-chu-ru-men-dao-shi-zhan-xiang-mu-kai-fa-qu-na-er-wang-app/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Eished/vue-travel" target="_blank" rel="noopener">项目代码</a></p><h1 id="第1章-课程介绍"><a href="#第1章-课程介绍" class="headerlink" title="第1章 课程介绍"></a>第1章 课程介绍</h1><pre><code>本章主要介绍课程的知识大纲，学习前提，讲授方式及预期收获。</code></pre><h2 id="1-1-课程简介"><a href="#1-1-课程简介" class="headerlink" title="1-1 课程简介"></a>1-1 课程简介</h2><h3 id="课程流程"><a href="#课程流程" class="headerlink" title="课程流程"></a>课程流程</h3><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128143531674.png" alt="image-20200128143518066"></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128143531674.png" alt="image-20200128143531674"></p><h3 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h3><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128143728763.png" alt="image-20200128143728763"></p><h3 id="学习前提"><a href="#学习前提" class="headerlink" title="学习前提"></a>学习前提</h3><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128143807549.png" alt="image-20200128143807549"></p><h3 id="讲授方式"><a href="#讲授方式" class="headerlink" title="讲授方式"></a>讲授方式</h3><ol><li>通俗易懂的案例讲解</li><li>借助基础知识实现项目</li><li>带着你编写每一行代码</li><li>图文讲解复杂知识点</li></ol><h3 id="课程收获"><a href="#课程收获" class="headerlink" title="课程收获"></a>课程收获</h3><ol><li>彻底入门Vue的使用</li><li>理解整个Vue项目的开发流程</li><li>移动端页面布局技巧</li><li>上手中型Vue项目的开发</li><li>规范的代码编写</li></ol><h1 id="第2章-Vue-起步"><a href="#第2章-Vue-起步" class="headerlink" title="第2章 Vue 起步"></a>第2章 Vue 起步</h1><pre><code>本章将快速讲解部分 Vue 基础语法，通过 TodoList 功能的编写，在熟悉基础语法的基础上，扩展解析 MVVM 模式及前端组件化的概念及优势。</code></pre><h2 id="2-1-课程学习方法"><a href="#2-1-课程学习方法" class="headerlink" title="2-1 课程学习方法"></a>2-1 课程学习方法</h2><blockquote><p>官方文档:</p><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p></blockquote><ul><li>基于官方文档<ul><li>视频学习后看官方文档</li></ul></li></ul><h2 id="2-2-hello-world"><a href="#2-2-hello-world" class="headerlink" title="2-2 hello world"></a>2-2 hello world</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// document.getElementById('app').innerHTML = 'Hello world'</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">'Hello world'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      app<span class="token punctuation">.</span>$data<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">'hi bye'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-3-开发TodoList（v-model、v-for、v-on）"><a href="#2-3-开发TodoList（v-model、v-for、v-on）" class="headerlink" title="2-3 开发TodoList（v-model、v-for、v-on）"></a>2-3 开发TodoList（v-model、v-for、v-on）</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleBtnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'第一课的内容'</span><span class="token punctuation">,</span> <span class="token string">'第二课的内容'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        inputValue<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-4-MVVM模式"><a href="#2-4-MVVM模式" class="headerlink" title="2-4 MVVM模式"></a>2-4 MVVM模式</h2><p><strong>传统的 MVP 设计模式</strong></p><ul><li>Model : 数据层</li><li>Presenter : 呈现层, 业务逻辑</li><li>View : 视图层, DOM 展示</li></ul><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128165658026.png" alt="image-20200128165658026"></p><ul><li><p>实例: </p><ul><li>80% 代码在操作 DOM</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TodoList JQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./jquery1.12.4.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// M (模型层) V 视图 P(控制器)</span>    <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Page<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>      init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bindEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      bindEvents<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span>        btn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> $<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      handleBtnClick<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> inputElm <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#input"</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> inputValue <span class="token operator">=</span> inputElm<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> ulElem <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span>        ulElem<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;li>'</span> <span class="token operator">+</span> inputValue <span class="token operator">+</span> <span class="token string">'&lt;/li>'</span><span class="token punctuation">)</span>        inputElm<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    page<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><p><strong>MVVM 设计模式</strong></p><p><img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/image-20200128172339251.png" alt="image-20200128172339251"></p><ul><li>只要操作 Model 层和 View 层</li><li>Vue 自动帮我们操作 ViewModel 层<ul><li>通过 Object.defineProperties 和 虚拟 DOM 实现</li></ul></li></ul><h2 id="2-5-前端组件化"><a href="#2-5-前端组件化" class="headerlink" title="2-5 前端组件化"></a>2-5 前端组件化</h2><ul><li>每个组件就是页面的一个区域</li></ul><h2 id="2-6-使用组件改造TodoList"><a href="#2-6-使用组件改造TodoList" class="headerlink" title="2-6 使用组件改造TodoList"></a>2-6 使用组件改造TodoList</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleBtnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- &lt;li v-for="item in list">{{item}}&lt;/li> --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// // 全局组件</span>    <span class="token comment" spellcheck="true">// Vue.component("TodoItem", {</span>    <span class="token comment" spellcheck="true">//   props: ['content'], // 接收 v-bind:content 传递的值</span>    <span class="token comment" spellcheck="true">//   template: "&lt;li>{{content}}&lt;/li>" // 模板内使用字符串</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token keyword">var</span> TodoItem <span class="token operator">=</span> <span class="token punctuation">{</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">"&lt;li>{{content}}&lt;/li>"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        TodoItem<span class="token punctuation">:</span> TodoItem <span class="token comment" spellcheck="true">// 注册局部组件</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'第一课的内容'</span><span class="token punctuation">,</span> <span class="token string">'第二课的内容'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        inputValue<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-7-简单的组件间传值"><a href="#2-7-简单的组件间传值" class="headerlink" title="2-7 简单的组件间传值"></a>2-7 简单的组件间传值</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>TodoList<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleBtnClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- &lt;li v-for="item in list">{{item}}&lt;/li> --></span>      <span class="token comment" spellcheck="true">&lt;!-- v-bind: 可以简写为: --></span>      <span class="token comment" spellcheck="true">&lt;!-- v-on: 可以简写为@ --></span>      <span class="token comment" spellcheck="true">&lt;!-- @delete="handleItemDelete" 监听 $emit 传递的 delete 事件 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">@delete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleItemDelete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// // 全局组件</span>    <span class="token comment" spellcheck="true">// Vue.component("TodoItem", {</span>    <span class="token comment" spellcheck="true">//   props: ['content'], // 接收 v-bind:content 传递的值</span>    <span class="token comment" spellcheck="true">//   template: "&lt;li>{{content}}&lt;/li>" // 模板内使用字符串</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token keyword">var</span> TodoItem <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 父组件向子组件传值, v-bind: 发送和 props 接收</span>      props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">"&lt;li @click='handleItemClick'>{{content}}&lt;/li>"</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handleItemClick<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// $emit 向外触发事件; 父组件监听此事件传值</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        TodoItem<span class="token punctuation">:</span> TodoItem <span class="token comment" spellcheck="true">// 注册局部组件</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'第一课的内容'</span><span class="token punctuation">,</span> <span class="token string">'第二课的内容'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        inputValue<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        handleBtnClick<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        handleItemDelete<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-8-章节小结"><a href="#2-8-章节小结" class="headerlink" title="2-8 章节小结"></a>2-8 章节小结</h2><p>作业: 仔细阅读Vue介绍部分文档, 查漏补缺</p><ol><li><p><code>v-bind</code> attribute 被称为<strong>指令</strong></p></li><li><p><code>app3.seen = false</code> : 显示或隐藏元素</p></li><li><p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表</p><ul><li><code>v-for=&quot;todo in todos&quot;</code></li></ul></li><li><p><code>v-on</code> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法</p><ul><li><code>v-on:click=&quot;reverseMessage&quot;</code></li></ul></li><li><p><code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定</p><ul><li><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> app6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app-6'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'Hello Vue!'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>组件系统允许我们使用小型、独立和通常可复用的组件构建大型应用。几乎任意类型的应用界面都可以抽象为一个组件树：</p><ul><li><p>一个组件本质上是一个拥有预定义选项的一个 Vue 实例。</p></li><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义名为 todo-item 的新组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;li>这是个待办项&lt;/li>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul></li></ol><p>   <img src="https://github.com/Eished/Vue_notes/raw/master/readme.assets/components.png" alt="Component Tree"></p><ol start="7"><li>子单元通过 prop 接口与父单元进行了良好的解耦。</li></ol><h1 id="点击去GitHub查看完整版"><a href="#点击去GitHub查看完整版" class="headerlink" title="点击去GitHub查看完整版"></a><a href="https://github.com/Eished/Vue_notes" target="_blank" rel="noopener">点击去GitHub查看完整版</a></h1>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ES6-10语法</title>
      <link href="/2020/06/02/javascript-es6-10/"/>
      <url>/2020/06/02/javascript-es6-10/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-课程介绍与环境搭建"><a href="#第1章-课程介绍与环境搭建" class="headerlink" title="第1章 课程介绍与环境搭建"></a>第1章 课程介绍与环境搭建</h1><p>  JS作为前端的立身之本，让大家了解学习这门课的必要性。考虑到很多同学刚刚接触前端或者对工程化方法不太了解，为了快速进入到学习状态，我们提供了极其简单的方式帮大家准备好学习环境。</p><h2 id="1-1-课程导学-试看"><a href="#1-1-课程导学-试看" class="headerlink" title="1-1 课程导学 试看"></a>1-1 课程导学 试看</h2><h3 id="怎么学？"><a href="#怎么学？" class="headerlink" title="怎么学？"></a>怎么学？</h3><ol><li>一天后：体验乐趣</li><li>十天后：进入状态</li><li>一个月后：养成习惯</li><li>三个月后：收获知识</li><li>五个月后：形成思维习惯</li></ol><h3 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h3><ol><li>快速搭建开发环境</li><li>学习语法</li><li>推荐阅读材料</li><li>练习题</li><li>Vue 框架内实战</li><li>学习开发环境如何构建</li></ol><h3 id="适用人群"><a href="#适用人群" class="headerlink" title="适用人群"></a>适用人群</h3><ol><li>拥有 JavaScript ES3 以上基础</li><li>会编程，有编程思维</li><li>有耐心</li><li>求上进</li></ol><p>1-2 电子书位置</p><h2 id="1-3-环境准备"><a href="#1-3-环境准备" class="headerlink" title="1-3 环境准备"></a>1-3 环境准备</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><p>原理</p><ol><li>ES6-10 ：原生代码</li><li>Babel→Webpack ：构建转换</li><li>ES5 ：浏览器可以识别的代码</li></ol></li><li><p>开发环境</p><ul><li>Chrome和Node环境</li><li>自动刷新 自动编译</li><li>格式化编写代码</li></ul></li></ul><h2 id="1-4-Node-安装"><a href="#1-4-Node-安装" class="headerlink" title="1-4 Node 安装"></a>1-4 Node 安装</h2><ul><li>Node 安装：-v 12.2.0<ul><li>npm</li><li>npx</li></ul></li></ul><h2 id="1-5-初始化项目"><a href="#1-5-初始化项目" class="headerlink" title="1-5 初始化项目"></a>1-5 初始化项目</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><pre><code>npx es10-cli create projectName // 创建模板文件命令</code></pre><p>启动项目</p><pre><code>cd projectNamenpm installnpm starttouch static/lesson2-1.js // 新建文件命令</code></pre><h2 id="1-6-编辑器配置"><a href="#1-6-编辑器配置" class="headerlink" title="1-6 编辑器配置"></a>1-6 编辑器配置</h2><p>VS code 插件 beautify 和 ESLint</p><h1 id="第2章-ES6基础知识"><a href="#第2章-ES6基础知识" class="headerlink" title="第2章 ES6基础知识"></a>第2章 ES6基础知识</h1><p>  ES6语法相对于ES5有了非常大的改变，让原生 JavaScript 能力再上一个台阶，这个章节会分门别类进行讲述，单纯讲语法既乏味也不利于记忆更不知道如何运用，我们以应用场景开场分别给出ES5和ES6两种不同的解决方案，循序渐进剖析语法…</p><h2 id="Let-amp-Const"><a href="#Let-amp-Const" class="headerlink" title="Let &amp; Const"></a>Let &amp; Const</h2><h3 id="2-1-作用域（1）"><a href="#2-1-作用域（1）" class="headerlink" title="2-1 作用域（1）"></a>2-1 作用域（1）</h3><ol><li>var 声明的全局变量相当于 window 的属性，但无法删除，属性可以删除</li><li>没有var 定义的变量是作为 window 的属性定义的，是全局属性</li><li>在函数内部没有 var 定义的变量是window 的属性，是全局属性</li></ol><h3 id="2-2-作用域（2）"><a href="#2-2-作用域（2）" class="headerlink" title="2-2 作用域（2）"></a>2-2 作用域（2）</h3><ul><li>函数作用域 = 局部作用域</li><li>var 定义的变量会变量提升</li><li>let 定义的变量具有块状作用域</li></ul><h4 id="this-与-动态作用域-的关系"><a href="#this-与-动态作用域-的关系" class="headerlink" title="this 与 动态作用域 的关系"></a>this 与 动态作用域 的关系</h4><ul><li>this 具有动态指向</li></ul><h4 id="四种作用域"><a href="#四种作用域" class="headerlink" title="四种作用域"></a>四种作用域</h4><ol><li>全局作用域</li><li>函数作用域</li><li>块状作用域 ，配合 let 和 const 使用</li><li>动态作用域</li></ol><h3 id="2-3-什么是作用域"><a href="#2-3-什么是作用域" class="headerlink" title="2-3 什么是作用域"></a>2-3 什么是作用域</h3><p>几乎所有编程语言就是在变量中储存值，并且能够读取和修改这些值。事实上在变量中储存和取出值得能力，给程序赋予了状态。</p><p>如果没有这样的概念，一个程序虽然可以执行一些任务，但是它们将会受到极大的限制而且不会非常有趣。</p><p>但是这些变量该储存在哪？又如何读取？为了完成这个目标需要制定一些规则，规则就是：作用域。</p><ul><li><h4 id="四种常见作用域类型："><a href="#四种常见作用域类型：" class="headerlink" title="四种常见作用域类型："></a>四种常见作用域类型：</h4><table><thead><tr><th>对象</th><th>类型</th></tr></thead><tbody><tr><td>global</td><td>全局作用域</td></tr><tr><td>function</td><td>函数作用域（局部作用域）</td></tr><tr><td>{}</td><td>块状作用域</td></tr><tr><td>this</td><td>动态作用域</td></tr></tbody></table></li><li><blockquote><p>如果一个变量 或者其它表达式不在“当前得作用域”，那么JavaScript机制会继续沿着作用域链上查找直到找到全局作用域，通常是指沿着链式得作用域查找，而不能从父作用域引用子作用域中的变量和引用</p></blockquote></li></ul><h3 id="2-4-let-amp-const"><a href="#2-4-let-amp-const" class="headerlink" title="2-4 let&amp;const"></a>2-4 let&amp;const</h3><ul><li>let 声明的特点<ul><li>块状作用域</li><li>不能用用全局变量的属性访问</li><li>不能重复定义</li><li>不会变量提升</li></ul></li><li>const 声明的特点<ul><li><strong>只能赋值一次</strong></li><li><strong>初始化时一定要赋值</strong></li><li>块状作用域</li><li>不能用用全局变量的属性访问</li><li>不能重复定义</li><li>不会变量提升</li></ul></li><li>阅读<ol><li>什么是作用域</li><li>JavaScript深入之词法作用域和动态作用域</li><li>深入理解JS中声明提升、作用域（链）和 this 关键字</li></ol></li></ul><h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 - Array"></a>数组 - Array</h2><h3 id="2-6-ES5中数组有多少种遍历的方法？"><a href="#2-6-ES5中数组有多少种遍历的方法？" class="headerlink" title="2-6 ES5中数组有多少种遍历的方法？"></a>2-6 ES5中数组有多少种遍历的方法？</h3><p>他们有什么优势和缺点？</p><ol><li><p>for 循环</p></li><li><p>forEach ：<code>arr.forEach(funciton (item) {console.log(item)})</code></p><blockquote><p>不支持 <code>break</code> 和 <code>continue</code></p><p>return false 相当于 continue</p><p>隐式索引</p></blockquote></li><li><p>every ：<code>arr.every(funciton (item) {console.log(item)})</code></p><blockquote><p>是否继续执行取决于函数返回值 true 、false</p><p>如果数组中检测到有一个元素不满足，则整个表达式返回 <em>false</em> ，且剩余的元素不会再进行检测。</p><p>如果所有元素都满足条件，则返回 true。</p></blockquote></li><li><p>some：依次执行数组的每个元素：</p><blockquote><p>如果有一个元素满足条件，则表达式返回<em>true</em> , 剩余的元素不会再执行检测。</p><p>如果没有满足条件的元素，则返回false。</p></blockquote></li><li><p>for in ：<code>for ( let index in Object) {console.log(Object[index])}</code></p><blockquote><p>为对象设计的，数组的属性和下标作为字符串遍历</p><p>支持 continue 和 break</p></blockquote></li></ol><h3 id="2-7-ES6中数组有多少种遍历的方法？"><a href="#2-7-ES6中数组有多少种遍历的方法？" class="headerlink" title="2-7 ES6中数组有多少种遍历的方法？"></a>2-7 ES6中数组有多少种遍历的方法？</h3><ol><li><p>for of ：<code>for (let item of arr) { console.log(item)}</code></p><blockquote><p>不仅可以遍历数组和对象</p><p>可以遍历自定义数据结构</p></blockquote></li><li><p>map()</p><blockquote><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p>这种方式也是用的比较广泛的，虽然用起来比较优雅，但实际效率还比不上foreach</p></blockquote></li></ol><h3 id="2-8-Array-from（如何将伪数组转换成数组？）"><a href="#2-8-Array-from（如何将伪数组转换成数组？）" class="headerlink" title="2-8 Array.from（如何将伪数组转换成数组？）"></a>2-8 Array.from（如何将伪数组转换成数组？）</h3><h4 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// collection</span><span class="token keyword">let</span> imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>doncument<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NodeList</span></code></pre><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><ul><li><p>Array.from(arrayLike, mapFn, thisArg)</p><blockquote><p>ES6 新增方法，专门转换伪数组到数组，也可用于生成数组</p></blockquote></li></ul><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token comment" spellcheck="true">// ES6 新增方法</span>Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> mapFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 语法 伪数组，函数返回值，this指向</span><span class="token keyword">let</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span></code></pre><h4 id="什么叫伪数组"><a href="#什么叫伪数组" class="headerlink" title="什么叫伪数组"></a>什么叫伪数组</h4><ol><li>按照索引方式存储数据</li><li>具有 length 属性</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="2-9-Array-of-fill（如何生成新数组？）"><a href="#2-9-Array-of-fill（如何生成新数组？）" class="headerlink" title="2-9 Array.of-fill（如何生成新数组？）"></a>2-9 Array.of-fill（如何生成新数组？）</h3><p>ES6 新方法</p><ul><li><p>Array(5) ：初始化长度为5的数组</p></li><li><p>new Array(1,2,3)：初始化数组，同时生成数据</p></li><li><p>Array.of(1,2,3)：初始化数组，同时生成数据</p></li><li><p>Array.fill(value,start,end)：填充数据</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Array.prototype.of</span><span class="token keyword">let</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Array.prototype.fill</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Array<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 语法 填充值，起始位，截止值。 默认填充所有元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-10-Find-amp-FindIndex（如何查找数组？）"><a href="#2-10-Find-amp-FindIndex（如何查找数组？）" class="headerlink" title="2-10 Find&amp;FindIndex（如何查找数组？）"></a>2-10 Find&amp;FindIndex（如何查找数组？）</h3><ul><li><p>array.filter(fn)：ES5，返回符合fn 条件的所有值，没有则为空</p></li><li><p>Array.find(fn)：ES6，查找数组中符合fn 条件的第一个值，并返回，没有则为 undefined</p></li><li><p>Array.findIndex()：ES6，返回位置，未找到则-1</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> array <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token keyword">let</span> find <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 查找下标</span><span class="token keyword">let</span> find <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Class-Update"><a href="#Class-Update" class="headerlink" title="Class Update"></a>Class Update</h2><h3 id="2-12-Class基础语法（怎么声明一个类？）"><a href="#2-12-Class基础语法（怎么声明一个类？）" class="headerlink" title="2-12 Class基础语法（怎么声明一个类？）"></a>2-12 Class基础语法（怎么声明一个类？）</h3><h4 id="ES5中怎么声明一个类"><a href="#ES5中怎么声明一个类" class="headerlink" title="ES5中怎么声明一个类"></a>ES5中怎么声明一个类</h4><ul><li><pre class=" language-JS"><code class="language-JS">let Animal = function (type) {  this.type = type}Animal.prototype.eat = function () {  console.log('you are eatting food hello');}let dog = new Animal('food')let cat = new Animal('fish')console.log(dog)console.log(cat)// 修改实例对象原型链上的方法cat.constructor.prototype.eat = function () {  console.log('error')}dog.eat()cat.eat()</code></pre></li></ul><h4 id="ES6中声明一个类"><a href="#ES6中声明一个类" class="headerlink" title="ES6中声明一个类"></a>ES6中声明一个类</h4><ul><li><pre class=" language-JS"><code class="language-JS">class Animal {  constructor(type) {    this.type = type  }  eat() {    console.log('i am food')  }}let dog = new Animal('food')let cat = new Animal('fish')console.log(dog)console.log(cat)// 修改实例对象原型链上的方法cat.constructor.prototype.eat = function () {  console.log('error')}dog.eat()cat.eat()console.log(typeof Animal);</code></pre></li></ul><h3 id="点击去GitHub查看完整版"><a href="#点击去GitHub查看完整版" class="headerlink" title="点击去GitHub查看完整版"></a><a href="https://github.com/Eished/JavaScript_notes/blob/master/JavaScriptES6-10_notes/JavaScriptES6-10.md" target="_blank" rel="noopener">点击去GitHub查看完整版</a></h3>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript从入门到精通</title>
      <link href="/2020/06/02/javascript-cong-ru-men-dao-jing-tong/"/>
      <url>/2020/06/02/javascript-cong-ru-men-dao-jing-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript从入门到精通"><a href="#JavaScript从入门到精通" class="headerlink" title="JavaScript从入门到精通"></a><a href="https://www.bilibili.com/video/av29885002" target="_blank" rel="noopener">JavaScript从入门到精通</a></h1><h2 id="初探-JavaScript-魅力"><a href="#初探-JavaScript-魅力" class="headerlink" title="初探 JavaScript 魅力"></a>初探 JavaScript 魅力</h2><h3 id="JavsScript-是什么"><a href="#JavsScript-是什么" class="headerlink" title="JavsScript 是什么"></a>JavsScript 是什么</h3><ul><li>网页特效原理<ul><li>JavaScript 就是修改样式（文档）</li></ul></li><li>编写 JS 的流程<ul><li>布局：HTML + CSS </li><li>属性：确定要修改的属性</li><li>事件： 确定用户 做哪些操作（产品设计）</li><li>编写 JS ：在事件中，用 JS 来修改页面元素的样式</li></ul></li></ul><h3 id="第一个-JS-特效：鼠标提示框"><a href="#第一个-JS-特效：鼠标提示框" class="headerlink" title="第一个 JS 特效：鼠标提示框"></a>第一个 JS 特效：鼠标提示框</h3><ul><li><p>分析效果实现原理</p><ul><li>样式：<code>div</code> 的 <code>display / none</code></li><li>事件：<code>onmouseover / onmouseout</code></li><li>动手编写效果</li></ul></li><li><p>特效基础</p><ul><li>事件驱动：<code>onmouseover</code></li><li>元素属性操作：<code>obj.style.[...]</code></li><li>特效实现原理概括：响应式用户操作，对页面元素样式修改</li></ul></li><li><p>兼容性问题 </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// div2.style.display='block'; // 部分浏览器不兼容</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">'block'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 所有浏览器兼容</span></code></pre></li><li><p>函数</p><ul><li>制作更复杂的效果</li><li>直接在事件内写代码会很乱<ul><li>引入 <code>function()</code> 函数的基本形式</li><li>把 JS 标签里放入到函数里，类似于 css 里的 <code>class</code></li><li>变量的使用：别名</li></ul></li><li>定义和调用<ul><li>函数定义：告诉系统有这个函数，不会执行</li><li>函数调用：执行函数里面的代码</li><li>关系和区别</li></ul></li></ul></li><li><p>代码</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>第一个JS效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector"><span class="token id">#div2</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>         <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token id">#div1</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 封装 getElementById 函数</span>    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 显示 div2</span>    <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// div2.style.display='block'; // 部分浏览器不兼容</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">'block'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 隐藏 div2</span>    <span class="token keyword">function</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// div2.style.display='none'; // 部分浏览器不兼容</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变绿</span>    <span class="token keyword">function</span> <span class="token function">toGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变蓝</span>    <span class="token keyword">function</span> <span class="token function">toblue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变红</span>    <span class="token keyword">function</span> <span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 点击循环变色</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toblue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 调用页内函数修改样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeColor()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 行内 JS 修改样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseover</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2.style.display<span class="token punctuation">=</span><span class="token punctuation">'</span>block<span class="token punctuation">'</span>;<span class="token punctuation">"</span></span> <span class="token attr-name">onmouseout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2.style.display<span class="token punctuation">=</span><span class="token punctuation">'</span>none<span class="token punctuation">'</span>;<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>文字2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="网页换肤和-if-判断"><a href="#网页换肤和-if-判断" class="headerlink" title="网页换肤和 if 判断"></a>网页换肤和 if 判断</h3><ul><li><p>网页换肤</p><ul><li>土豆网 “开灯” “关灯效果”</li><li>任何标签都可以加 ID ，包括 link</li><li>任何标签的属性，都可以修改</li><li>HTML 里面怎么写，JS 里面就怎么写</li></ul></li><li><p>if 判断</p><ul><li>特效实现原理</li><li>if 基本形式</li><li>JS 里面 <code>= 赋值， == 判断</code></li><li>为 a 链接添加 JS <ul><li><code>&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;</code></li></ul></li><li>className  的使用<ul><li><code>class</code> 是关键字，所以用 <code>className</code> 代替</li><li>其它 HTML 里面怎么写，JS 里面就怎么写</li></ul></li></ul></li><li><p>代码</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link1<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/grey.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token string">'关灯'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'link1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'css/black.css'</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'开灯'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'link1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'css/grey.css'</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'关灯'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bl2:'</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'link1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">changeText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'456'</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'文字1'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">showHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> div2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">==</span> <span class="token string">'block'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>        div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'display:'</span><span class="token punctuation">,</span> div2<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">class1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      div<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'div5'</span><span class="token punctuation">;</span>      div<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token string">'div5'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 换肤 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeColor()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>关灯<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>显示隐藏div2<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showHide()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- HTMl 里面怎么写，JS 里面就怎么写 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>改文字<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeText()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- a 链接的使用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>javascript:;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- className 的使用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>className<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>class1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><ul><li><p>改变背景颜色</p><ul><li>函数传参：参数就是占位符<ul><li>函数里面变量用传参</li></ul></li></ul></li><li><p>改变 div 的任意样式</p><ul><li>操纵属性的第二种方式<ul><li>要修改的属性不确定时：<code>元素.style[ 变量/字符串 ] = 变量/字符串</code></li><li>JS 中用 <code>.</code> 的地方都可以用 <code>[]</code> 代替;</li><li>字符串变量区别和关系 ：带引号是字符串，不带是变量</li></ul></li><li>将属性名作为参数传递</li></ul></li><li><p>style 与 className </p><ul><li><code>元素.style.属性 = 变量/字符串</code> <ul><li>style 是修改行内样式</li></ul></li><li>行内样式优先级最高，之后再修改 className 不会有效果</li><li>建议：只操作一种样式，要么只操作 style ，要么只操作 className</li></ul></li><li><p>代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>函数传参<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 封装 getElementById 函数</span>    <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变绿</span>    <span class="token keyword">function</span> <span class="token function">toGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变蓝</span>    <span class="token keyword">function</span> <span class="token function">toblue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// div1 变红</span>    <span class="token keyword">function</span> <span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 点击循环变色</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toblue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">toRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'i='</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 函数传参</span>    <span class="token keyword">function</span> <span class="token function">toColor</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> color<span class="token punctuation">;</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将属性名作为参数传递</span>    <span class="token keyword">function</span> <span class="token function">chgName</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// get('div1').style.name = width; // name 会被当作属性赋值</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'style'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组 可以加字符串或者变量</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 样式优先级</span>    <span class="token keyword">function</span> <span class="token function">chgClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className <span class="token operator">=</span>  className<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 调用页内函数修改样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeColor()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>循环<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 函数传参 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toColor(<span class="token punctuation">'</span>green<span class="token punctuation">'</span>, <span class="token punctuation">'</span>200px<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变绿<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toColor(<span class="token punctuation">'</span>blue<span class="token punctuation">'</span>, <span class="token punctuation">'</span>300px<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变蓝<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toColor(<span class="token punctuation">'</span>red<span class="token punctuation">'</span>, <span class="token punctuation">'</span>400px<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变红<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chgName(<span class="token punctuation">'</span>height<span class="token punctuation">'</span>, <span class="token punctuation">'</span>200px<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变高<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chgClass(<span class="token punctuation">'</span>div2<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>class变灰<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="提取行间事件"><a href="#提取行间事件" class="headerlink" title="提取行间事件"></a>提取行间事件</h3><ul><li>提取事件<ul><li>为元素添加事件<ul><li>事件和其它属性一样，可以用 JS 添加：<code>元素.事件 = 函数名/函数;</code><ul><li>不能加括号，加括号直接执行函数</li></ul></li><li><code>window.onload</code> 的意义：等待页面加载完成再执行 JS</li><li>行为( js )、样式( css )、结构( html ) 三者分离</li></ul></li></ul></li><li>获取一组元素<ul><li><code>元素.getElementsByTagName(&#39;标签名&#39;)</code><ul><li>数组的使用</li><li>数组的属性</li></ul></li><li>全选的实现</li></ul></li><li>代码: 同下</li></ul><h3 id="循环-while-和-for"><a href="#循环-while-和-for" class="headerlink" title="循环 while 和 for"></a>循环 while 和 for</h3><ul><li><p>用 while 引入 循环的概念</p><ul><li>while 循环语法<ul><li>自增的意义</li><li>循环的构成：初始化、条件、语句、自增</li></ul></li></ul></li><li><p>for 循环</p><ul><li>用 for 代替 while 循环<ul><li>用 for 循环为一组元素甜腻骄傲事件</li><li>什么时候用循环—-一组元素</li></ul></li><li>例子<ul><li>全选—- checked 属性</li><li>反选—- for 循环配合 if 判断</li></ul></li></ul></li><li><p>代码:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>提取行间事件和循环<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>         <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span>         <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 封装 getElementById 函数</span>        <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 封装 getElementsByTagName</span>        <span class="token keyword">function</span> <span class="token function">gets</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 提取行间样式</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'提取成功'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 修改一组元素中的某一个元素</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 修改一组元素- while 循环</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// for</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn4'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 全选的实现 if 判断 无需div</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">'checkbox'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 元素.getElementsByTagName 方法 单个div</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn6'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> div2 <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> inp <span class="token operator">=</span> div2<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(inp);</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              inp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              inp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 元素.getElementsByTagName 方法 多个div</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'btn7'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> div2 <span class="token operator">=</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> div2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> inps <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> inps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>inps<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                inps<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                inps<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 提取行间样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 修改一组元素中的某一个元素 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>改第三个元素<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 修改一组元素-循环 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>while循环改一组元素<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn4<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>for循环改一组元素<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn5<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全选<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn6<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全选2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn7<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>全选3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="导航栏选项卡"><a href="#导航栏选项卡" class="headerlink" title="导航栏选项卡"></a>导航栏选项卡</h3><ul><li><p>按钮的实现</p><ul><li>添加事件<ul><li>this 的使用: 指当前发生事件的元素</li></ul></li><li>先清空所有按钮，再选中当前按钮</li></ul></li><li><p>内容的实现（ul）</p><ul><li>先隐藏所有 ul，再显示当前 ul<ul><li>索引值的使用：什么时候用索引值</li><li>HTML 添加 index 会被 FireFox 过滤</li><li>JS 添加 index</li></ul></li></ul></li><li><p>代码:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>导航选项卡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token id">#div2</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token id">#div1</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">ul </span><span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">157</span>, <span class="token number">234</span>, <span class="token number">253</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.ul</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">a </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">49</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">7</span>, <span class="token number">184</span>, <span class="token number">253</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">0</span>, <span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector"><span class="token class">.a</span> </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">32</span>, <span class="token number">108</span>, <span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 封装 getElementById 函数</span>        <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 封装 getElementsByTagName</span>        <span class="token keyword">function</span> <span class="token function">gets</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 显示第一个元素</span>        <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'ul'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当鼠标覆盖某个标签时 显示对应元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>          <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>              <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(this);</span>            <span class="token function">gets</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'ul'</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="JavaScript-基础-点击去Github查看完整版"><a href="#JavaScript-基础-点击去Github查看完整版" class="headerlink" title="JavaScript 基础 点击去Github查看完整版"></a><a href="https://github.com/Eished/JavaScript_notes" target="_blank" rel="noopener">JavaScript 基础 点击去Github查看完整版</a></h2>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Front-matter 介绍</title>
      <link href="/2020/06/02/hexo-front-matter-jie-shao/"/>
      <url>/2020/06/02/hexo-front-matter-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h1><h2 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h2><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h2 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h2><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><h2 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h2><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h1 id="Hexo-指令"><a href="#Hexo-指令" class="headerlink" title="Hexo 指令"></a>Hexo 指令</h1><iframe src="https://www.youtube.com/embed/mgdXi5npArQ" frameborder="0" loading="lazy" allowfullscreen="" style="box-sizing: inherit; margin: 1em 0px; padding: 0px; border: 0px; outline: 0px; font-weight: inherit; font-style: inherit; font-family: inherit; font-size: 15px; vertical-align: baseline;"></iframe><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><pre><code>$ hexo init [folder]</code></pre><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><pre><code>$ hexo new [layout] &lt;title&gt;</code></pre><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre><code>$ hexo new &quot;post title with whitespace&quot;</code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><pre><code>hexo new page --path about/me &quot;About me&quot;</code></pre><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><pre><code>hexo new page --path about/me</code></pre><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><pre><code>$ hexo generate</code></pre><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><pre><code>$ hexo g</code></pre><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><pre><code>$ hexo publish [layout] &lt;filename&gt;</code></pre><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><pre><code>$ hexo server</code></pre><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><pre><code>$ hexo deploy</code></pre><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><pre><code>$ hexo d</code></pre><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><pre><code>$ hexo render &lt;file1&gt; [file2] ...</code></pre><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>, <code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><pre><code>$ hexo migrate &lt;type&gt;</code></pre><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><pre><code>$ hexo clean</code></pre><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><pre><code>$ hexo list &lt;type&gt;</code></pre><p>列出网站资料。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><pre><code>$ hexo version</code></pre><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><pre><code>$ hexo --safe</code></pre><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><pre><code>$ hexo --debug</code></pre><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="noopener">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><pre><code>$ hexo --silent</code></pre><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><pre><code># 使用 custom.yml 代替默认的 _config.yml$ hexo server --config custom.yml# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高$ hexo generate --config custom.yml,custom2.json,custom3.yml</code></pre><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><pre><code># 使用 custom.yml 代替默认的 _config.yml$ hexo server --config custom.yml# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json$ hexo generate --config custom.yml,custom2.json,custom3.yml</code></pre><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><pre><code>$ hexo --draft</code></pre><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><pre><code>$ hexo --cwd /path/to/cwd</code></pre><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git和GitHub详解</title>
      <link href="/2020/06/02/git-he-github-xiang-jie/"/>
      <url>/2020/06/02/git-he-github-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Git和GitHub详解"><a href="#Git和GitHub详解" class="headerlink" title="Git和GitHub详解"></a><a href="https://github.com/Eished/git_notes" target="_blank" rel="noopener">Git和GitHub详解</a></h1><h2 id="（一）Git基础"><a href="#（一）Git基础" class="headerlink" title="（一）Git基础"></a>（一）Git基础</h2><h3 id="Git-下载和安装"><a href="#Git-下载和安装" class="headerlink" title="Git 下载和安装"></a>Git 下载和安装</h3><ul><li>下载地址： <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></li><li>使用默认值安装</li><li>资源管理器内单击鼠标右键选择 <code>Git Bash Here</code></li><li>输入<code>git --version</code> 检查是否安装成功</li></ul><h3 id="Git-基本工作流程"><a href="#Git-基本工作流程" class="headerlink" title="Git 基本工作流程"></a>Git 基本工作流程</h3><blockquote><p><a href="https://camo.githubusercontent.com/b3a8463c493afefb96ed483106ceea6966782b27/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32352f313632666363303938376266316330613f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/b3a8463c493afefb96ed483106ceea6966782b27/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32352f313632666363303938376266316330613f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31" alt="git操作通用流程"></a></p><p>主要涉及到四个关键点：</p><ol><li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li><li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li><li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li><li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li></ol><p>更细节的来看：</p><p><a href="https://camo.githubusercontent.com/9d199e09df4405718621937e8798cba7cf1964fb/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32352f313632666363306537653731316463373f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/9d199e09df4405718621937e8798cba7cf1964fb/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f342f32352f313632666363306537653731316463373f696d61676556696577322f302f772f313238302f682f3936302f666f726d61742f776562702f69676e6f72652d6572726f722f31" alt="git几个核心区域间的关系"></a></p><p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p><p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p><ol><li><p>git管理配置的命令；</p><p><strong>几个核心存储区的交互命令：</strong></p></li><li><p>工作区与暂存区的交互；</p></li><li><p>暂存区与本地仓库（分支）上的交互；</p></li><li><p>本地仓库与远程仓库的交互。</p></li></ol><p>作者：你听___ 链接：<a href="https://juejin.im/post/5ae072906fb9a07a9e4ce596" target="_blank" rel="noopener">https://juejin.im/post/5ae072906fb9a07a9e4ce596</a> 来源：掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><table><thead><tr><th>工作目录</th><th>暂存区</th><th>git 仓库</th><th>远程仓库</th></tr></thead><tbody><tr><td>被Git管理的项目</td><td>临时存放被修改的文件</td><td>目录用于存放提交记录</td><td>远程代码仓库</td></tr><tr><td><code>git init</code></td><td><code>git add</code></td><td><code>git commit</code></td><td><code>git push</code></td></tr></tbody></table><h3 id="Git使用前的配置命令"><a href="#Git使用前的配置命令" class="headerlink" title="Git使用前的配置命令"></a>Git使用前的配置命令</h3><p>在使用前告诉git你是谁：</p><ol><li><p>第一次使用git，配置用户信息</p><ol><li>配置用户名：<code>git config --global user.name &quot;your name&quot;</code>;</li><li>配置用户邮箱：<code>git config --global user.email &quot;youremail@github.com&quot;</code>;</li></ol></li><li><blockquote><p>查询配置信息</p></blockquote><ol><li>列出当前配置：<code>git config --list</code>;</li><li>列出repository配置：<code>git config --local --list</code>;</li><li>列出全局配置：<code>git config --global --list</code>;</li><li>列出系统配置：<code>git config --system --list</code>;</li></ol></li><li><blockquote><p>其他配置</p></blockquote><ol><li>配置解决冲突时使用哪种差异分析工具，比如要使用vimdiff：<code>git config --global merge.tool vimdiff</code>;</li><li>配置git命令输出为彩色的：<code>git config --global color.ui auto</code>;</li><li>配置git使用的文本编辑器：<code>git config --global core.editor vi</code>;</li></ol></li><li><blockquote><p>注：</p></blockquote><ol><li>更改–&gt;重复上述命令</li><li>也可直接修改 <code>C:\Users\用户\.gitconfig</code></li></ol></li></ol><h3 id="工作区上的操作命令"><a href="#工作区上的操作命令" class="headerlink" title="工作区上的操作命令"></a>工作区上的操作命令</h3><h4 id="提交步骤"><a href="#提交步骤" class="headerlink" title="提交步骤"></a>提交步骤</h4><ol><li><p><code>git init</code> 初始化git仓库</p><blockquote><blockquote><p>新建仓库</p></blockquote><ol><li>将工作区中的项目文件使用git进行管理，即创建一个新的本地仓库：<code>git init</code>；</li><li>从远程git仓库复制项目：<code>git clone</code>; 克隆项目时如果想定义新的项目名，可以在clone命令后指定新的项目名：<code>git clone git://github.com/wasd/example.git NewName</code>；</li></ol></blockquote></li><li><p><code>git status</code> 查看文件状态</p><blockquote><blockquote><p>查新信息</p></blockquote><ol><li>查询当前工作区所有文件的状态：<code>git status</code>;</li><li>比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：git diff；指定文件在工作区和暂存区上差异比较：<code>git diff</code>;</li></ol></blockquote></li><li><p><code>git add 文件/文件列表</code> 提交到暂存区</p><blockquote><blockquote><p>提交</p></blockquote><ol><li>提交工作区所有文件到暂存区：<code>git add .</code></li><li>提交工作区中指定文件到暂存区：<code>git add ...</code>;</li><li>提交工作区中某个文件夹中所有文件到暂存区：<code>git add [dir]</code>;</li></ol></blockquote></li><li><p><code>git commit -m 提交信息</code> 向仓库提交代码</p><blockquote><blockquote><p>提交文件到版本库</p></blockquote><ol><li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git commit -m &quot;commit_info&quot;</code>;</li><li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：<code>git commit -a -m &quot;commit_info&quot;</code>;</li><li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git commit --amend</code>;</li></ol></blockquote></li><li><p><code>git log</code> 查看提交记录</p><blockquote><blockquote><p>查看信息</p></blockquote><ol><li>比较暂存区与上一版本的差异：<code>git diff --cached</code>;</li><li>指定文件在暂存区和本地仓库的不同：<code>git diff --cached</code>;</li><li>查看提交历史：git log；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git log -p -2</code>;</li></ol></blockquote></li></ol><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><ul><li><p>用暂存区中的文件覆盖工作目录中的文件：<code>git checkout -- 文件名</code> 不加 <code>-- 文件名</code>则覆盖全部文件</p></li><li><p>将文件从暂存区中删除：<code>git rm --cached 文件名</code></p></li><li><p>将git仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git reset --hard commitID</code></p></li><li><blockquote><blockquote><p>撤销</p></blockquote><ol><li>删除工作区文件，并且也从暂存区删除对应文件的记录：<code>git rm</code>;</li><li>从暂存区中删除文件，但是工作区依然还有该文件:<code>git rm --cached</code>;</li><li>取消暂存区已经暂存的文件：<code>git reset HEAD ...</code>;</li><li>撤销上一次对文件的操作：<code>git checkout --</code>。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用stashing和分支来处理；</li><li>隐藏当前变更，以便能够切换分支：<code>git stash</code>；</li><li>查看当前所有的储藏：<code>git stash list</code>；</li><li>应用最新的储藏：<code>git stash apply</code>，如果想应用更早的储藏：<code>git stash apply stash@{2}</code>；重新应用被暂存的变更，需要加上<code>--index</code>参数：<code>git stash apply --index</code>;</li><li>使用apply命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：<code>git stash drop stash{0}</code>；如果使用pop命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：<code>git stash pop</code>;</li><li>在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：<code>git stash show -p stash@{0} | git apply -R</code>；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：<code>git stash show -p | git apply -R</code>；</li></ol><blockquote><p>更新文件</p></blockquote><ol><li>重命名文件，并将已改名文件提交到暂存区：<code>git mv [file-original] [file-renamed]</code>;</li></ol></blockquote></li></ul><h2 id="点击去GitHub查看完整版"><a href="#点击去GitHub查看完整版" class="headerlink" title="点击去GitHub查看完整版"></a><a href="https://github.com/Eished/git_notes" target="_blank" rel="noopener">点击去GitHub查看完整版</a></h2>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/23/hello-world/"/>
      <url>/2020/05/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
